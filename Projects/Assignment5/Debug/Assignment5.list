
Assignment5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005db8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  08005ec8  08005ec8  00015ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060c4  080060c4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080060c4  080060c4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080060c4  080060c4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060c4  080060c4  000160c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060c8  080060c8  000160c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080060cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001734  20000010  080060dc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001744  080060dc  00021744  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013f93  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ec5  00000000  00000000  00033fcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001220  00000000  00000000  00036e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010d8  00000000  00000000  000380b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002a82  00000000  00000000  00039190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013908  00000000  00000000  0003bc12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095de8  00000000  00000000  0004f51a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e5302  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cbc  00000000  00000000  000e5354  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08005eb0 	.word	0x08005eb0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08005eb0 	.word	0x08005eb0

08000150 <__aeabi_frsub>:
 8000150:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__addsf3>
 8000156:	bf00      	nop

08000158 <__aeabi_fsub>:
 8000158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800015c <__addsf3>:
 800015c:	0042      	lsls	r2, r0, #1
 800015e:	bf1f      	itttt	ne
 8000160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000164:	ea92 0f03 	teqne	r2, r3
 8000168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800016c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000170:	d06a      	beq.n	8000248 <__addsf3+0xec>
 8000172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800017a:	bfc1      	itttt	gt
 800017c:	18d2      	addgt	r2, r2, r3
 800017e:	4041      	eorgt	r1, r0
 8000180:	4048      	eorgt	r0, r1
 8000182:	4041      	eorgt	r1, r0
 8000184:	bfb8      	it	lt
 8000186:	425b      	neglt	r3, r3
 8000188:	2b19      	cmp	r3, #25
 800018a:	bf88      	it	hi
 800018c:	4770      	bxhi	lr
 800018e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000192:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000196:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800019a:	bf18      	it	ne
 800019c:	4240      	negne	r0, r0
 800019e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001a2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4249      	negne	r1, r1
 80001ae:	ea92 0f03 	teq	r2, r3
 80001b2:	d03f      	beq.n	8000234 <__addsf3+0xd8>
 80001b4:	f1a2 0201 	sub.w	r2, r2, #1
 80001b8:	fa41 fc03 	asr.w	ip, r1, r3
 80001bc:	eb10 000c 	adds.w	r0, r0, ip
 80001c0:	f1c3 0320 	rsb	r3, r3, #32
 80001c4:	fa01 f103 	lsl.w	r1, r1, r3
 80001c8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001cc:	d502      	bpl.n	80001d4 <__addsf3+0x78>
 80001ce:	4249      	negs	r1, r1
 80001d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d8:	d313      	bcc.n	8000202 <__addsf3+0xa6>
 80001da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001de:	d306      	bcc.n	80001ee <__addsf3+0x92>
 80001e0:	0840      	lsrs	r0, r0, #1
 80001e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e6:	f102 0201 	add.w	r2, r2, #1
 80001ea:	2afe      	cmp	r2, #254	; 0xfe
 80001ec:	d251      	bcs.n	8000292 <__addsf3+0x136>
 80001ee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f6:	bf08      	it	eq
 80001f8:	f020 0001 	biceq.w	r0, r0, #1
 80001fc:	ea40 0003 	orr.w	r0, r0, r3
 8000200:	4770      	bx	lr
 8000202:	0049      	lsls	r1, r1, #1
 8000204:	eb40 0000 	adc.w	r0, r0, r0
 8000208:	3a01      	subs	r2, #1
 800020a:	bf28      	it	cs
 800020c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000210:	d2ed      	bcs.n	80001ee <__addsf3+0x92>
 8000212:	fab0 fc80 	clz	ip, r0
 8000216:	f1ac 0c08 	sub.w	ip, ip, #8
 800021a:	ebb2 020c 	subs.w	r2, r2, ip
 800021e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000222:	bfaa      	itet	ge
 8000224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000228:	4252      	neglt	r2, r2
 800022a:	4318      	orrge	r0, r3
 800022c:	bfbc      	itt	lt
 800022e:	40d0      	lsrlt	r0, r2
 8000230:	4318      	orrlt	r0, r3
 8000232:	4770      	bx	lr
 8000234:	f092 0f00 	teq	r2, #0
 8000238:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800023c:	bf06      	itte	eq
 800023e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000242:	3201      	addeq	r2, #1
 8000244:	3b01      	subne	r3, #1
 8000246:	e7b5      	b.n	80001b4 <__addsf3+0x58>
 8000248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800024c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000250:	bf18      	it	ne
 8000252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000256:	d021      	beq.n	800029c <__addsf3+0x140>
 8000258:	ea92 0f03 	teq	r2, r3
 800025c:	d004      	beq.n	8000268 <__addsf3+0x10c>
 800025e:	f092 0f00 	teq	r2, #0
 8000262:	bf08      	it	eq
 8000264:	4608      	moveq	r0, r1
 8000266:	4770      	bx	lr
 8000268:	ea90 0f01 	teq	r0, r1
 800026c:	bf1c      	itt	ne
 800026e:	2000      	movne	r0, #0
 8000270:	4770      	bxne	lr
 8000272:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000276:	d104      	bne.n	8000282 <__addsf3+0x126>
 8000278:	0040      	lsls	r0, r0, #1
 800027a:	bf28      	it	cs
 800027c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000280:	4770      	bx	lr
 8000282:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000286:	bf3c      	itt	cc
 8000288:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800028c:	4770      	bxcc	lr
 800028e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000292:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800029a:	4770      	bx	lr
 800029c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002a0:	bf16      	itet	ne
 80002a2:	4608      	movne	r0, r1
 80002a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a8:	4601      	movne	r1, r0
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	bf06      	itte	eq
 80002ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002b2:	ea90 0f01 	teqeq	r0, r1
 80002b6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ba:	4770      	bx	lr

080002bc <__aeabi_ui2f>:
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	e004      	b.n	80002cc <__aeabi_i2f+0x8>
 80002c2:	bf00      	nop

080002c4 <__aeabi_i2f>:
 80002c4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c8:	bf48      	it	mi
 80002ca:	4240      	negmi	r0, r0
 80002cc:	ea5f 0c00 	movs.w	ip, r0
 80002d0:	bf08      	it	eq
 80002d2:	4770      	bxeq	lr
 80002d4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d8:	4601      	mov	r1, r0
 80002da:	f04f 0000 	mov.w	r0, #0
 80002de:	e01c      	b.n	800031a <__aeabi_l2f+0x2a>

080002e0 <__aeabi_ul2f>:
 80002e0:	ea50 0201 	orrs.w	r2, r0, r1
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e00a      	b.n	8000304 <__aeabi_l2f+0x14>
 80002ee:	bf00      	nop

080002f0 <__aeabi_l2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__aeabi_l2f+0x14>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	ea5f 0c01 	movs.w	ip, r1
 8000308:	bf02      	ittt	eq
 800030a:	4684      	moveq	ip, r0
 800030c:	4601      	moveq	r1, r0
 800030e:	2000      	moveq	r0, #0
 8000310:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000314:	bf08      	it	eq
 8000316:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800031a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031e:	fabc f28c 	clz	r2, ip
 8000322:	3a08      	subs	r2, #8
 8000324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000328:	db10      	blt.n	800034c <__aeabi_l2f+0x5c>
 800032a:	fa01 fc02 	lsl.w	ip, r1, r2
 800032e:	4463      	add	r3, ip
 8000330:	fa00 fc02 	lsl.w	ip, r0, r2
 8000334:	f1c2 0220 	rsb	r2, r2, #32
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	fa20 f202 	lsr.w	r2, r0, r2
 8000340:	eb43 0002 	adc.w	r0, r3, r2
 8000344:	bf08      	it	eq
 8000346:	f020 0001 	biceq.w	r0, r0, #1
 800034a:	4770      	bx	lr
 800034c:	f102 0220 	add.w	r2, r2, #32
 8000350:	fa01 fc02 	lsl.w	ip, r1, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800035c:	fa21 f202 	lsr.w	r2, r1, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800036a:	4770      	bx	lr

0800036c <__aeabi_fmul>:
 800036c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000370:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000374:	bf1e      	ittt	ne
 8000376:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800037a:	ea92 0f0c 	teqne	r2, ip
 800037e:	ea93 0f0c 	teqne	r3, ip
 8000382:	d06f      	beq.n	8000464 <__aeabi_fmul+0xf8>
 8000384:	441a      	add	r2, r3
 8000386:	ea80 0c01 	eor.w	ip, r0, r1
 800038a:	0240      	lsls	r0, r0, #9
 800038c:	bf18      	it	ne
 800038e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000392:	d01e      	beq.n	80003d2 <__aeabi_fmul+0x66>
 8000394:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000398:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800039c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003a0:	fba0 3101 	umull	r3, r1, r0, r1
 80003a4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003ac:	bf3e      	ittt	cc
 80003ae:	0049      	lslcc	r1, r1, #1
 80003b0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b4:	005b      	lslcc	r3, r3, #1
 80003b6:	ea40 0001 	orr.w	r0, r0, r1
 80003ba:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003be:	2afd      	cmp	r2, #253	; 0xfd
 80003c0:	d81d      	bhi.n	80003fe <__aeabi_fmul+0x92>
 80003c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ca:	bf08      	it	eq
 80003cc:	f020 0001 	biceq.w	r0, r0, #1
 80003d0:	4770      	bx	lr
 80003d2:	f090 0f00 	teq	r0, #0
 80003d6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003da:	bf08      	it	eq
 80003dc:	0249      	lsleq	r1, r1, #9
 80003de:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003e2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e6:	3a7f      	subs	r2, #127	; 0x7f
 80003e8:	bfc2      	ittt	gt
 80003ea:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003f2:	4770      	bxgt	lr
 80003f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f8:	f04f 0300 	mov.w	r3, #0
 80003fc:	3a01      	subs	r2, #1
 80003fe:	dc5d      	bgt.n	80004bc <__aeabi_fmul+0x150>
 8000400:	f112 0f19 	cmn.w	r2, #25
 8000404:	bfdc      	itt	le
 8000406:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800040a:	4770      	bxle	lr
 800040c:	f1c2 0200 	rsb	r2, r2, #0
 8000410:	0041      	lsls	r1, r0, #1
 8000412:	fa21 f102 	lsr.w	r1, r1, r2
 8000416:	f1c2 0220 	rsb	r2, r2, #32
 800041a:	fa00 fc02 	lsl.w	ip, r0, r2
 800041e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000422:	f140 0000 	adc.w	r0, r0, #0
 8000426:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800042a:	bf08      	it	eq
 800042c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000430:	4770      	bx	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800043a:	bf02      	ittt	eq
 800043c:	0040      	lsleq	r0, r0, #1
 800043e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000442:	3a01      	subeq	r2, #1
 8000444:	d0f9      	beq.n	800043a <__aeabi_fmul+0xce>
 8000446:	ea40 000c 	orr.w	r0, r0, ip
 800044a:	f093 0f00 	teq	r3, #0
 800044e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000452:	bf02      	ittt	eq
 8000454:	0049      	lsleq	r1, r1, #1
 8000456:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800045a:	3b01      	subeq	r3, #1
 800045c:	d0f9      	beq.n	8000452 <__aeabi_fmul+0xe6>
 800045e:	ea41 010c 	orr.w	r1, r1, ip
 8000462:	e78f      	b.n	8000384 <__aeabi_fmul+0x18>
 8000464:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000468:	ea92 0f0c 	teq	r2, ip
 800046c:	bf18      	it	ne
 800046e:	ea93 0f0c 	teqne	r3, ip
 8000472:	d00a      	beq.n	800048a <__aeabi_fmul+0x11e>
 8000474:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000478:	bf18      	it	ne
 800047a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047e:	d1d8      	bne.n	8000432 <__aeabi_fmul+0xc6>
 8000480:	ea80 0001 	eor.w	r0, r0, r1
 8000484:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000488:	4770      	bx	lr
 800048a:	f090 0f00 	teq	r0, #0
 800048e:	bf17      	itett	ne
 8000490:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000494:	4608      	moveq	r0, r1
 8000496:	f091 0f00 	teqne	r1, #0
 800049a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049e:	d014      	beq.n	80004ca <__aeabi_fmul+0x15e>
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	d101      	bne.n	80004aa <__aeabi_fmul+0x13e>
 80004a6:	0242      	lsls	r2, r0, #9
 80004a8:	d10f      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004aa:	ea93 0f0c 	teq	r3, ip
 80004ae:	d103      	bne.n	80004b8 <__aeabi_fmul+0x14c>
 80004b0:	024b      	lsls	r3, r1, #9
 80004b2:	bf18      	it	ne
 80004b4:	4608      	movne	r0, r1
 80004b6:	d108      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c8:	4770      	bx	lr
 80004ca:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ce:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_fdiv>:
 80004d4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004dc:	bf1e      	ittt	ne
 80004de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004e2:	ea92 0f0c 	teqne	r2, ip
 80004e6:	ea93 0f0c 	teqne	r3, ip
 80004ea:	d069      	beq.n	80005c0 <__aeabi_fdiv+0xec>
 80004ec:	eba2 0203 	sub.w	r2, r2, r3
 80004f0:	ea80 0c01 	eor.w	ip, r0, r1
 80004f4:	0249      	lsls	r1, r1, #9
 80004f6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004fa:	d037      	beq.n	800056c <__aeabi_fdiv+0x98>
 80004fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000500:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000504:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000508:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800050c:	428b      	cmp	r3, r1
 800050e:	bf38      	it	cc
 8000510:	005b      	lslcc	r3, r3, #1
 8000512:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000516:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800051a:	428b      	cmp	r3, r1
 800051c:	bf24      	itt	cs
 800051e:	1a5b      	subcs	r3, r3, r1
 8000520:	ea40 000c 	orrcs.w	r0, r0, ip
 8000524:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000528:	bf24      	itt	cs
 800052a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000532:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000536:	bf24      	itt	cs
 8000538:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800053c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000540:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000544:	bf24      	itt	cs
 8000546:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800054a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	bf18      	it	ne
 8000552:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000556:	d1e0      	bne.n	800051a <__aeabi_fdiv+0x46>
 8000558:	2afd      	cmp	r2, #253	; 0xfd
 800055a:	f63f af50 	bhi.w	80003fe <__aeabi_fmul+0x92>
 800055e:	428b      	cmp	r3, r1
 8000560:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000564:	bf08      	it	eq
 8000566:	f020 0001 	biceq.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000570:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000574:	327f      	adds	r2, #127	; 0x7f
 8000576:	bfc2      	ittt	gt
 8000578:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800057c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000580:	4770      	bxgt	lr
 8000582:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000586:	f04f 0300 	mov.w	r3, #0
 800058a:	3a01      	subs	r2, #1
 800058c:	e737      	b.n	80003fe <__aeabi_fmul+0x92>
 800058e:	f092 0f00 	teq	r2, #0
 8000592:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000596:	bf02      	ittt	eq
 8000598:	0040      	lsleq	r0, r0, #1
 800059a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059e:	3a01      	subeq	r2, #1
 80005a0:	d0f9      	beq.n	8000596 <__aeabi_fdiv+0xc2>
 80005a2:	ea40 000c 	orr.w	r0, r0, ip
 80005a6:	f093 0f00 	teq	r3, #0
 80005aa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ae:	bf02      	ittt	eq
 80005b0:	0049      	lsleq	r1, r1, #1
 80005b2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b6:	3b01      	subeq	r3, #1
 80005b8:	d0f9      	beq.n	80005ae <__aeabi_fdiv+0xda>
 80005ba:	ea41 010c 	orr.w	r1, r1, ip
 80005be:	e795      	b.n	80004ec <__aeabi_fdiv+0x18>
 80005c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c4:	ea92 0f0c 	teq	r2, ip
 80005c8:	d108      	bne.n	80005dc <__aeabi_fdiv+0x108>
 80005ca:	0242      	lsls	r2, r0, #9
 80005cc:	f47f af7d 	bne.w	80004ca <__aeabi_fmul+0x15e>
 80005d0:	ea93 0f0c 	teq	r3, ip
 80005d4:	f47f af70 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e776      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	d104      	bne.n	80005ec <__aeabi_fdiv+0x118>
 80005e2:	024b      	lsls	r3, r1, #9
 80005e4:	f43f af4c 	beq.w	8000480 <__aeabi_fmul+0x114>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e76e      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005ec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005f0:	bf18      	it	ne
 80005f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f6:	d1ca      	bne.n	800058e <__aeabi_fdiv+0xba>
 80005f8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005fc:	f47f af5c 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 8000600:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000604:	f47f af3c 	bne.w	8000480 <__aeabi_fmul+0x114>
 8000608:	e75f      	b.n	80004ca <__aeabi_fmul+0x15e>
 800060a:	bf00      	nop

0800060c <__gesf2>:
 800060c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000610:	e006      	b.n	8000620 <__cmpsf2+0x4>
 8000612:	bf00      	nop

08000614 <__lesf2>:
 8000614:	f04f 0c01 	mov.w	ip, #1
 8000618:	e002      	b.n	8000620 <__cmpsf2+0x4>
 800061a:	bf00      	nop

0800061c <__cmpsf2>:
 800061c:	f04f 0c01 	mov.w	ip, #1
 8000620:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000624:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000628:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800062c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000630:	bf18      	it	ne
 8000632:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000636:	d011      	beq.n	800065c <__cmpsf2+0x40>
 8000638:	b001      	add	sp, #4
 800063a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063e:	bf18      	it	ne
 8000640:	ea90 0f01 	teqne	r0, r1
 8000644:	bf58      	it	pl
 8000646:	ebb2 0003 	subspl.w	r0, r2, r3
 800064a:	bf88      	it	hi
 800064c:	17c8      	asrhi	r0, r1, #31
 800064e:	bf38      	it	cc
 8000650:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000654:	bf18      	it	ne
 8000656:	f040 0001 	orrne.w	r0, r0, #1
 800065a:	4770      	bx	lr
 800065c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000660:	d102      	bne.n	8000668 <__cmpsf2+0x4c>
 8000662:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000666:	d105      	bne.n	8000674 <__cmpsf2+0x58>
 8000668:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800066c:	d1e4      	bne.n	8000638 <__cmpsf2+0x1c>
 800066e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000672:	d0e1      	beq.n	8000638 <__cmpsf2+0x1c>
 8000674:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <__aeabi_cfrcmple>:
 800067c:	4684      	mov	ip, r0
 800067e:	4608      	mov	r0, r1
 8000680:	4661      	mov	r1, ip
 8000682:	e7ff      	b.n	8000684 <__aeabi_cfcmpeq>

08000684 <__aeabi_cfcmpeq>:
 8000684:	b50f      	push	{r0, r1, r2, r3, lr}
 8000686:	f7ff ffc9 	bl	800061c <__cmpsf2>
 800068a:	2800      	cmp	r0, #0
 800068c:	bf48      	it	mi
 800068e:	f110 0f00 	cmnmi.w	r0, #0
 8000692:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000694 <__aeabi_fcmpeq>:
 8000694:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000698:	f7ff fff4 	bl	8000684 <__aeabi_cfcmpeq>
 800069c:	bf0c      	ite	eq
 800069e:	2001      	moveq	r0, #1
 80006a0:	2000      	movne	r0, #0
 80006a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a6:	bf00      	nop

080006a8 <__aeabi_fcmplt>:
 80006a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ac:	f7ff ffea 	bl	8000684 <__aeabi_cfcmpeq>
 80006b0:	bf34      	ite	cc
 80006b2:	2001      	movcc	r0, #1
 80006b4:	2000      	movcs	r0, #0
 80006b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ba:	bf00      	nop

080006bc <__aeabi_fcmple>:
 80006bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006c0:	f7ff ffe0 	bl	8000684 <__aeabi_cfcmpeq>
 80006c4:	bf94      	ite	ls
 80006c6:	2001      	movls	r0, #1
 80006c8:	2000      	movhi	r0, #0
 80006ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ce:	bf00      	nop

080006d0 <__aeabi_fcmpge>:
 80006d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d4:	f7ff ffd2 	bl	800067c <__aeabi_cfrcmple>
 80006d8:	bf94      	ite	ls
 80006da:	2001      	movls	r0, #1
 80006dc:	2000      	movhi	r0, #0
 80006de:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e2:	bf00      	nop

080006e4 <__aeabi_fcmpgt>:
 80006e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e8:	f7ff ffc8 	bl	800067c <__aeabi_cfrcmple>
 80006ec:	bf34      	ite	cc
 80006ee:	2001      	movcc	r0, #1
 80006f0:	2000      	movcs	r0, #0
 80006f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f6:	bf00      	nop

080006f8 <__aeabi_f2iz>:
 80006f8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006fc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000700:	d30f      	bcc.n	8000722 <__aeabi_f2iz+0x2a>
 8000702:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000706:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800070a:	d90d      	bls.n	8000728 <__aeabi_f2iz+0x30>
 800070c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000710:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000714:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000718:	fa23 f002 	lsr.w	r0, r3, r2
 800071c:	bf18      	it	ne
 800071e:	4240      	negne	r0, r0
 8000720:	4770      	bx	lr
 8000722:	f04f 0000 	mov.w	r0, #0
 8000726:	4770      	bx	lr
 8000728:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800072c:	d101      	bne.n	8000732 <__aeabi_f2iz+0x3a>
 800072e:	0242      	lsls	r2, r0, #9
 8000730:	d105      	bne.n	800073e <__aeabi_f2iz+0x46>
 8000732:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000736:	bf08      	it	eq
 8000738:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800073c:	4770      	bx	lr
 800073e:	f04f 0000 	mov.w	r0, #0
 8000742:	4770      	bx	lr

08000744 <writeToDisplay>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void writeToDisplay(char hexChar) {
 8000744:	b5b0      	push	{r4, r5, r7, lr}
 8000746:	b08e      	sub	sp, #56	; 0x38
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	71fb      	strb	r3, [r7, #7]
  // Write a char (8 bits) to the 8 data pins (A0 - A7)
  int dataPins[8] = {GPIO_PIN_0,GPIO_PIN_1,GPIO_PIN_2,GPIO_PIN_3,GPIO_PIN_4,GPIO_PIN_5,GPIO_PIN_6,GPIO_PIN_7};
 800074e:	4b23      	ldr	r3, [pc, #140]	; (80007dc <writeToDisplay+0x98>)
 8000750:	f107 040c 	add.w	r4, r7, #12
 8000754:	461d      	mov	r5, r3
 8000756:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000758:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800075a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800075e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  for(int i = 0; i<8; i++) {
 8000762:	2300      	movs	r3, #0
 8000764:	637b      	str	r3, [r7, #52]	; 0x34
 8000766:	e021      	b.n	80007ac <writeToDisplay+0x68>
    int result = hexChar & (1 << i);
 8000768:	79fa      	ldrb	r2, [r7, #7]
 800076a:	2101      	movs	r1, #1
 800076c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800076e:	fa01 f303 	lsl.w	r3, r1, r3
 8000772:	4013      	ands	r3, r2
 8000774:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_PinState pinState = result ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8000776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000778:	2b00      	cmp	r3, #0
 800077a:	bf14      	ite	ne
 800077c:	2301      	movne	r3, #1
 800077e:	2300      	moveq	r3, #0
 8000780:	b2db      	uxtb	r3, r3
 8000782:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    HAL_GPIO_WritePin(GPIOA, dataPins[i], pinState);
 8000786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000788:	009b      	lsls	r3, r3, #2
 800078a:	3338      	adds	r3, #56	; 0x38
 800078c:	443b      	add	r3, r7
 800078e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8000792:	b29b      	uxth	r3, r3
 8000794:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000798:	4619      	mov	r1, r3
 800079a:	4811      	ldr	r0, [pc, #68]	; (80007e0 <writeToDisplay+0x9c>)
 800079c:	f001 fd77 	bl	800228e <HAL_GPIO_WritePin>
    osDelay(1);
 80007a0:	2001      	movs	r0, #1
 80007a2:	f002 fea7 	bl	80034f4 <osDelay>
  for(int i = 0; i<8; i++) {
 80007a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007a8:	3301      	adds	r3, #1
 80007aa:	637b      	str	r3, [r7, #52]	; 0x34
 80007ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007ae:	2b07      	cmp	r3, #7
 80007b0:	ddda      	ble.n	8000768 <writeToDisplay+0x24>
  }

  // Set E = 1 for at least 230ns (latching pulse)
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80007b2:	2201      	movs	r2, #1
 80007b4:	2120      	movs	r1, #32
 80007b6:	480b      	ldr	r0, [pc, #44]	; (80007e4 <writeToDisplay+0xa0>)
 80007b8:	f001 fd69 	bl	800228e <HAL_GPIO_WritePin>
  osDelay(5);
 80007bc:	2005      	movs	r0, #5
 80007be:	f002 fe99 	bl	80034f4 <osDelay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2120      	movs	r1, #32
 80007c6:	4807      	ldr	r0, [pc, #28]	; (80007e4 <writeToDisplay+0xa0>)
 80007c8:	f001 fd61 	bl	800228e <HAL_GPIO_WritePin>
  osDelay(5);
 80007cc:	2005      	movs	r0, #5
 80007ce:	f002 fe91 	bl	80034f4 <osDelay>
}
 80007d2:	bf00      	nop
 80007d4:	3738      	adds	r7, #56	; 0x38
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bdb0      	pop	{r4, r5, r7, pc}
 80007da:	bf00      	nop
 80007dc:	08005f40 	.word	0x08005f40
 80007e0:	40010800 	.word	0x40010800
 80007e4:	40010c00 	.word	0x40010c00

080007e8 <sendData>:

void sendData(char hexChar) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	71fb      	strb	r3, [r7, #7]
  // E not enabled
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2120      	movs	r1, #32
 80007f6:	480f      	ldr	r0, [pc, #60]	; (8000834 <sendData+0x4c>)
 80007f8:	f001 fd49 	bl	800228e <HAL_GPIO_WritePin>
  osDelay(3);
 80007fc:	2003      	movs	r0, #3
 80007fe:	f002 fe79 	bl	80034f4 <osDelay>

  // Select data register
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000802:	2201      	movs	r2, #1
 8000804:	2180      	movs	r1, #128	; 0x80
 8000806:	480b      	ldr	r0, [pc, #44]	; (8000834 <sendData+0x4c>)
 8000808:	f001 fd41 	bl	800228e <HAL_GPIO_WritePin>
  osDelay(3);
 800080c:	2003      	movs	r0, #3
 800080e:	f002 fe71 	bl	80034f4 <osDelay>

  // Select write mode
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	2140      	movs	r1, #64	; 0x40
 8000816:	4807      	ldr	r0, [pc, #28]	; (8000834 <sendData+0x4c>)
 8000818:	f001 fd39 	bl	800228e <HAL_GPIO_WritePin>
  osDelay(3);
 800081c:	2003      	movs	r0, #3
 800081e:	f002 fe69 	bl	80034f4 <osDelay>

  // Call function to write hex character to D7-D0
  writeToDisplay(hexChar);
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff ff8d 	bl	8000744 <writeToDisplay>
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40010c00 	.word	0x40010c00

08000838 <sendCommand>:

void sendCommand(char hexCommand) {
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	71fb      	strb	r3, [r7, #7]
  // E not enabled
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	2120      	movs	r1, #32
 8000846:	480f      	ldr	r0, [pc, #60]	; (8000884 <sendCommand+0x4c>)
 8000848:	f001 fd21 	bl	800228e <HAL_GPIO_WritePin>
  osDelay(3);
 800084c:	2003      	movs	r0, #3
 800084e:	f002 fe51 	bl	80034f4 <osDelay>

  // Select command register
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	2180      	movs	r1, #128	; 0x80
 8000856:	480b      	ldr	r0, [pc, #44]	; (8000884 <sendCommand+0x4c>)
 8000858:	f001 fd19 	bl	800228e <HAL_GPIO_WritePin>
  osDelay(3);
 800085c:	2003      	movs	r0, #3
 800085e:	f002 fe49 	bl	80034f4 <osDelay>

  // Select write mode
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	2140      	movs	r1, #64	; 0x40
 8000866:	4807      	ldr	r0, [pc, #28]	; (8000884 <sendCommand+0x4c>)
 8000868:	f001 fd11 	bl	800228e <HAL_GPIO_WritePin>
  osDelay(3);
 800086c:	2003      	movs	r0, #3
 800086e:	f002 fe41 	bl	80034f4 <osDelay>

  // Call function to write hex character to D7-D0
  writeToDisplay(hexCommand);
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff ff65 	bl	8000744 <writeToDisplay>
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40010c00 	.word	0x40010c00

08000888 <clearDisplay>:

void clearDisplay() {
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
   // E not enabled
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800088c:	2200      	movs	r2, #0
 800088e:	2120      	movs	r1, #32
 8000890:	480f      	ldr	r0, [pc, #60]	; (80008d0 <clearDisplay+0x48>)
 8000892:	f001 fcfc 	bl	800228e <HAL_GPIO_WritePin>
  osDelay(10);
 8000896:	200a      	movs	r0, #10
 8000898:	f002 fe2c 	bl	80034f4 <osDelay>

  sendCommand(56);
 800089c:	2038      	movs	r0, #56	; 0x38
 800089e:	f7ff ffcb 	bl	8000838 <sendCommand>
  osDelay(10);
 80008a2:	200a      	movs	r0, #10
 80008a4:	f002 fe26 	bl	80034f4 <osDelay>
  sendCommand(15);
 80008a8:	200f      	movs	r0, #15
 80008aa:	f7ff ffc5 	bl	8000838 <sendCommand>
  osDelay(10);
 80008ae:	200a      	movs	r0, #10
 80008b0:	f002 fe20 	bl	80034f4 <osDelay>
  sendCommand(1);
 80008b4:	2001      	movs	r0, #1
 80008b6:	f7ff ffbf 	bl	8000838 <sendCommand>
  osDelay(10);
 80008ba:	200a      	movs	r0, #10
 80008bc:	f002 fe1a 	bl	80034f4 <osDelay>
  sendCommand(6);
 80008c0:	2006      	movs	r0, #6
 80008c2:	f7ff ffb9 	bl	8000838 <sendCommand>
  osDelay(10);
 80008c6:	200a      	movs	r0, #10
 80008c8:	f002 fe14 	bl	80034f4 <osDelay>
}
 80008cc:	bf00      	nop
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40010c00 	.word	0x40010c00

080008d4 <printDigits>:

void printDigits(int value, int num_digits) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08a      	sub	sp, #40	; 0x28
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	6039      	str	r1, [r7, #0]
    int digits[6] = {0};
 80008de:	f107 0308 	add.w	r3, r7, #8
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
 80008ec:	611a      	str	r2, [r3, #16]
 80008ee:	615a      	str	r2, [r3, #20]

    int i = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
    while(value) {
 80008f4:	e01c      	b.n	8000930 <printDigits+0x5c>
        digits[i] = value % 10;
 80008f6:	6879      	ldr	r1, [r7, #4]
 80008f8:	4b1c      	ldr	r3, [pc, #112]	; (800096c <printDigits+0x98>)
 80008fa:	fb83 2301 	smull	r2, r3, r3, r1
 80008fe:	109a      	asrs	r2, r3, #2
 8000900:	17cb      	asrs	r3, r1, #31
 8000902:	1ad2      	subs	r2, r2, r3
 8000904:	4613      	mov	r3, r2
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	4413      	add	r3, r2
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	1aca      	subs	r2, r1, r3
 800090e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000910:	009b      	lsls	r3, r3, #2
 8000912:	3328      	adds	r3, #40	; 0x28
 8000914:	443b      	add	r3, r7
 8000916:	f843 2c20 	str.w	r2, [r3, #-32]
        value /= 10;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4a13      	ldr	r2, [pc, #76]	; (800096c <printDigits+0x98>)
 800091e:	fb82 1203 	smull	r1, r2, r2, r3
 8000922:	1092      	asrs	r2, r2, #2
 8000924:	17db      	asrs	r3, r3, #31
 8000926:	1ad3      	subs	r3, r2, r3
 8000928:	607b      	str	r3, [r7, #4]
        i++;
 800092a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800092c:	3301      	adds	r3, #1
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
    while(value) {
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d1df      	bne.n	80008f6 <printDigits+0x22>
    }

    for(int i = num_digits - 1; i >= 0; i--){
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	3b01      	subs	r3, #1
 800093a:	623b      	str	r3, [r7, #32]
 800093c:	e00e      	b.n	800095c <printDigits+0x88>
        sendData(0b00110000 + digits[i]);
 800093e:	6a3b      	ldr	r3, [r7, #32]
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	3328      	adds	r3, #40	; 0x28
 8000944:	443b      	add	r3, r7
 8000946:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800094a:	b2db      	uxtb	r3, r3
 800094c:	3330      	adds	r3, #48	; 0x30
 800094e:	b2db      	uxtb	r3, r3
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff ff49 	bl	80007e8 <sendData>
    for(int i = num_digits - 1; i >= 0; i--){
 8000956:	6a3b      	ldr	r3, [r7, #32]
 8000958:	3b01      	subs	r3, #1
 800095a:	623b      	str	r3, [r7, #32]
 800095c:	6a3b      	ldr	r3, [r7, #32]
 800095e:	2b00      	cmp	r3, #0
 8000960:	daed      	bge.n	800093e <printDigits+0x6a>
    }
}
 8000962:	bf00      	nop
 8000964:	bf00      	nop
 8000966:	3728      	adds	r7, #40	; 0x28
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	66666667 	.word	0x66666667

08000970 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000974:	f000 fdb2 	bl	80014dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000978:	f000 f882 	bl	8000a80 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800097c:	f000 f958 	bl	8000c30 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000980:	f000 f8da 	bl	8000b38 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000984:	f000 f916 	bl	8000bb4 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000988:	f002 fca4 	bl	80032d4 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of BrakeQueue */
  BrakeQueueHandle = osMessageQueueNew (16, sizeof(float), &BrakeQueue_attributes);
 800098c:	4a25      	ldr	r2, [pc, #148]	; (8000a24 <main+0xb4>)
 800098e:	2104      	movs	r1, #4
 8000990:	2010      	movs	r0, #16
 8000992:	f002 fddd 	bl	8003550 <osMessageQueueNew>
 8000996:	4603      	mov	r3, r0
 8000998:	4a23      	ldr	r2, [pc, #140]	; (8000a28 <main+0xb8>)
 800099a:	6013      	str	r3, [r2, #0]

  /* creation of ThrottleQueue */
  ThrottleQueueHandle = osMessageQueueNew (16, sizeof(float), &ThrottleQueue_attributes);
 800099c:	4a23      	ldr	r2, [pc, #140]	; (8000a2c <main+0xbc>)
 800099e:	2104      	movs	r1, #4
 80009a0:	2010      	movs	r0, #16
 80009a2:	f002 fdd5 	bl	8003550 <osMessageQueueNew>
 80009a6:	4603      	mov	r3, r0
 80009a8:	4a21      	ldr	r2, [pc, #132]	; (8000a30 <main+0xc0>)
 80009aa:	6013      	str	r3, [r2, #0]

  /* creation of GearQueue */
  GearQueueHandle = osMessageQueueNew (16, sizeof(uint8_t), &GearQueue_attributes);
 80009ac:	4a21      	ldr	r2, [pc, #132]	; (8000a34 <main+0xc4>)
 80009ae:	2101      	movs	r1, #1
 80009b0:	2010      	movs	r0, #16
 80009b2:	f002 fdcd 	bl	8003550 <osMessageQueueNew>
 80009b6:	4603      	mov	r3, r0
 80009b8:	4a1f      	ldr	r2, [pc, #124]	; (8000a38 <main+0xc8>)
 80009ba:	6013      	str	r3, [r2, #0]

  /* creation of SpeedQueue */
  SpeedQueueHandle = osMessageQueueNew (16, sizeof(uint32_t), &SpeedQueue_attributes);
 80009bc:	4a1f      	ldr	r2, [pc, #124]	; (8000a3c <main+0xcc>)
 80009be:	2104      	movs	r1, #4
 80009c0:	2010      	movs	r0, #16
 80009c2:	f002 fdc5 	bl	8003550 <osMessageQueueNew>
 80009c6:	4603      	mov	r3, r0
 80009c8:	4a1d      	ldr	r2, [pc, #116]	; (8000a40 <main+0xd0>)
 80009ca:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of breakTask */
  breakTaskHandle = osThreadNew(BreakInputTask, NULL, &breakTask_attributes);
 80009cc:	4a1d      	ldr	r2, [pc, #116]	; (8000a44 <main+0xd4>)
 80009ce:	2100      	movs	r1, #0
 80009d0:	481d      	ldr	r0, [pc, #116]	; (8000a48 <main+0xd8>)
 80009d2:	f002 fce5 	bl	80033a0 <osThreadNew>
 80009d6:	4603      	mov	r3, r0
 80009d8:	4a1c      	ldr	r2, [pc, #112]	; (8000a4c <main+0xdc>)
 80009da:	6013      	str	r3, [r2, #0]

  /* creation of throttleTask */
  throttleTaskHandle = osThreadNew(ThrottleInputTask, NULL, &throttleTask_attributes);
 80009dc:	4a1c      	ldr	r2, [pc, #112]	; (8000a50 <main+0xe0>)
 80009de:	2100      	movs	r1, #0
 80009e0:	481c      	ldr	r0, [pc, #112]	; (8000a54 <main+0xe4>)
 80009e2:	f002 fcdd 	bl	80033a0 <osThreadNew>
 80009e6:	4603      	mov	r3, r0
 80009e8:	4a1b      	ldr	r2, [pc, #108]	; (8000a58 <main+0xe8>)
 80009ea:	6013      	str	r3, [r2, #0]

  /* creation of dataProcessingT */
  dataProcessingTHandle = osThreadNew(DataProcessingTask, NULL, &dataProcessingT_attributes);
 80009ec:	4a1b      	ldr	r2, [pc, #108]	; (8000a5c <main+0xec>)
 80009ee:	2100      	movs	r1, #0
 80009f0:	481b      	ldr	r0, [pc, #108]	; (8000a60 <main+0xf0>)
 80009f2:	f002 fcd5 	bl	80033a0 <osThreadNew>
 80009f6:	4603      	mov	r3, r0
 80009f8:	4a1a      	ldr	r2, [pc, #104]	; (8000a64 <main+0xf4>)
 80009fa:	6013      	str	r3, [r2, #0]

  /* creation of outputTask */
  outputTaskHandle = osThreadNew(OutputDisplayTask, NULL, &outputTask_attributes);
 80009fc:	4a1a      	ldr	r2, [pc, #104]	; (8000a68 <main+0xf8>)
 80009fe:	2100      	movs	r1, #0
 8000a00:	481a      	ldr	r0, [pc, #104]	; (8000a6c <main+0xfc>)
 8000a02:	f002 fccd 	bl	80033a0 <osThreadNew>
 8000a06:	4603      	mov	r3, r0
 8000a08:	4a19      	ldr	r2, [pc, #100]	; (8000a70 <main+0x100>)
 8000a0a:	6013      	str	r3, [r2, #0]

  /* creation of gearTask */
  gearTaskHandle = osThreadNew(GearSelectionTask, NULL, &gearTask_attributes);
 8000a0c:	4a19      	ldr	r2, [pc, #100]	; (8000a74 <main+0x104>)
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4819      	ldr	r0, [pc, #100]	; (8000a78 <main+0x108>)
 8000a12:	f002 fcc5 	bl	80033a0 <osThreadNew>
 8000a16:	4603      	mov	r3, r0
 8000a18:	4a18      	ldr	r2, [pc, #96]	; (8000a7c <main+0x10c>)
 8000a1a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000a1c:	f002 fc8c 	bl	8003338 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <main+0xb0>
 8000a22:	bf00      	nop
 8000a24:	0800604c 	.word	0x0800604c
 8000a28:	200000a0 	.word	0x200000a0
 8000a2c:	08006064 	.word	0x08006064
 8000a30:	200000a4 	.word	0x200000a4
 8000a34:	0800607c 	.word	0x0800607c
 8000a38:	200000a8 	.word	0x200000a8
 8000a3c:	08006094 	.word	0x08006094
 8000a40:	200000ac 	.word	0x200000ac
 8000a44:	08005f98 	.word	0x08005f98
 8000a48:	08000d51 	.word	0x08000d51
 8000a4c:	2000008c 	.word	0x2000008c
 8000a50:	08005fbc 	.word	0x08005fbc
 8000a54:	08000dad 	.word	0x08000dad
 8000a58:	20000090 	.word	0x20000090
 8000a5c:	08005fe0 	.word	0x08005fe0
 8000a60:	08000e09 	.word	0x08000e09
 8000a64:	20000094 	.word	0x20000094
 8000a68:	08006004 	.word	0x08006004
 8000a6c:	080010b5 	.word	0x080010b5
 8000a70:	20000098 	.word	0x20000098
 8000a74:	08006028 	.word	0x08006028
 8000a78:	08001195 	.word	0x08001195
 8000a7c:	2000009c 	.word	0x2000009c

08000a80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b094      	sub	sp, #80	; 0x50
 8000a84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a8a:	2228      	movs	r2, #40	; 0x28
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f005 fa06 	bl	8005ea0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aa4:	1d3b      	adds	r3, r7, #4
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ab4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000aba:	2300      	movs	r3, #0
 8000abc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ac6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000acc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000ad0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f001 fbf2 	bl	80022c0 <HAL_RCC_OscConfig>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000ae2:	f000 fb90 	bl	8001206 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae6:	230f      	movs	r3, #15
 8000ae8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aea:	2302      	movs	r3, #2
 8000aec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000af2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000af6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	2102      	movs	r1, #2
 8000b02:	4618      	mov	r0, r3
 8000b04:	f001 fe5e 	bl	80027c4 <HAL_RCC_ClockConfig>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000b0e:	f000 fb7a 	bl	8001206 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b12:	2302      	movs	r3, #2
 8000b14:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000b16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b1a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f002 f818 	bl	8002b54 <HAL_RCCEx_PeriphCLKConfig>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000b2a:	f000 fb6c 	bl	8001206 <Error_Handler>
  }
}
 8000b2e:	bf00      	nop
 8000b30:	3750      	adds	r7, #80	; 0x50
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b3e:	1d3b      	adds	r3, r7, #4
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b48:	4b18      	ldr	r3, [pc, #96]	; (8000bac <MX_ADC1_Init+0x74>)
 8000b4a:	4a19      	ldr	r2, [pc, #100]	; (8000bb0 <MX_ADC1_Init+0x78>)
 8000b4c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b4e:	4b17      	ldr	r3, [pc, #92]	; (8000bac <MX_ADC1_Init+0x74>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b54:	4b15      	ldr	r3, [pc, #84]	; (8000bac <MX_ADC1_Init+0x74>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b5a:	4b14      	ldr	r3, [pc, #80]	; (8000bac <MX_ADC1_Init+0x74>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b60:	4b12      	ldr	r3, [pc, #72]	; (8000bac <MX_ADC1_Init+0x74>)
 8000b62:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000b66:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b68:	4b10      	ldr	r3, [pc, #64]	; (8000bac <MX_ADC1_Init+0x74>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000b6e:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <MX_ADC1_Init+0x74>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b74:	480d      	ldr	r0, [pc, #52]	; (8000bac <MX_ADC1_Init+0x74>)
 8000b76:	f000 fce3 	bl	8001540 <HAL_ADC_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000b80:	f000 fb41 	bl	8001206 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000b84:	2308      	movs	r3, #8
 8000b86:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b90:	1d3b      	adds	r3, r7, #4
 8000b92:	4619      	mov	r1, r3
 8000b94:	4805      	ldr	r0, [pc, #20]	; (8000bac <MX_ADC1_Init+0x74>)
 8000b96:	f000 ff6b 	bl	8001a70 <HAL_ADC_ConfigChannel>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000ba0:	f000 fb31 	bl	8001206 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ba4:	bf00      	nop
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	2000002c 	.word	0x2000002c
 8000bb0:	40012400 	.word	0x40012400

08000bb4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000bc4:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <MX_ADC2_Init+0x74>)
 8000bc6:	4a19      	ldr	r2, [pc, #100]	; (8000c2c <MX_ADC2_Init+0x78>)
 8000bc8:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bca:	4b17      	ldr	r3, [pc, #92]	; (8000c28 <MX_ADC2_Init+0x74>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000bd0:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <MX_ADC2_Init+0x74>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000bd6:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <MX_ADC2_Init+0x74>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bdc:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <MX_ADC2_Init+0x74>)
 8000bde:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000be2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000be4:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <MX_ADC2_Init+0x74>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000bea:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <MX_ADC2_Init+0x74>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000bf0:	480d      	ldr	r0, [pc, #52]	; (8000c28 <MX_ADC2_Init+0x74>)
 8000bf2:	f000 fca5 	bl	8001540 <HAL_ADC_Init>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000bfc:	f000 fb03 	bl	8001206 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000c00:	2309      	movs	r3, #9
 8000c02:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c04:	2301      	movs	r3, #1
 8000c06:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4805      	ldr	r0, [pc, #20]	; (8000c28 <MX_ADC2_Init+0x74>)
 8000c12:	f000 ff2d 	bl	8001a70 <HAL_ADC_ConfigChannel>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000c1c:	f000 faf3 	bl	8001206 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000c20:	bf00      	nop
 8000c22:	3710      	adds	r7, #16
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	2000005c 	.word	0x2000005c
 8000c2c:	40012800 	.word	0x40012800

08000c30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b088      	sub	sp, #32
 8000c34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c36:	f107 0310 	add.w	r3, r7, #16
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]
 8000c42:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c44:	4b3e      	ldr	r3, [pc, #248]	; (8000d40 <MX_GPIO_Init+0x110>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	4a3d      	ldr	r2, [pc, #244]	; (8000d40 <MX_GPIO_Init+0x110>)
 8000c4a:	f043 0310 	orr.w	r3, r3, #16
 8000c4e:	6193      	str	r3, [r2, #24]
 8000c50:	4b3b      	ldr	r3, [pc, #236]	; (8000d40 <MX_GPIO_Init+0x110>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	f003 0310 	and.w	r3, r3, #16
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c5c:	4b38      	ldr	r3, [pc, #224]	; (8000d40 <MX_GPIO_Init+0x110>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	4a37      	ldr	r2, [pc, #220]	; (8000d40 <MX_GPIO_Init+0x110>)
 8000c62:	f043 0320 	orr.w	r3, r3, #32
 8000c66:	6193      	str	r3, [r2, #24]
 8000c68:	4b35      	ldr	r3, [pc, #212]	; (8000d40 <MX_GPIO_Init+0x110>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	f003 0320 	and.w	r3, r3, #32
 8000c70:	60bb      	str	r3, [r7, #8]
 8000c72:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c74:	4b32      	ldr	r3, [pc, #200]	; (8000d40 <MX_GPIO_Init+0x110>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	4a31      	ldr	r2, [pc, #196]	; (8000d40 <MX_GPIO_Init+0x110>)
 8000c7a:	f043 0304 	orr.w	r3, r3, #4
 8000c7e:	6193      	str	r3, [r2, #24]
 8000c80:	4b2f      	ldr	r3, [pc, #188]	; (8000d40 <MX_GPIO_Init+0x110>)
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	f003 0304 	and.w	r3, r3, #4
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8c:	4b2c      	ldr	r3, [pc, #176]	; (8000d40 <MX_GPIO_Init+0x110>)
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	4a2b      	ldr	r2, [pc, #172]	; (8000d40 <MX_GPIO_Init+0x110>)
 8000c92:	f043 0308 	orr.w	r3, r3, #8
 8000c96:	6193      	str	r3, [r2, #24]
 8000c98:	4b29      	ldr	r3, [pc, #164]	; (8000d40 <MX_GPIO_Init+0x110>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	f003 0308 	and.w	r3, r3, #8
 8000ca0:	603b      	str	r3, [r7, #0]
 8000ca2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000caa:	4826      	ldr	r0, [pc, #152]	; (8000d44 <MX_GPIO_Init+0x114>)
 8000cac:	f001 faef 	bl	800228e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	21ff      	movs	r1, #255	; 0xff
 8000cb4:	4824      	ldr	r0, [pc, #144]	; (8000d48 <MX_GPIO_Init+0x118>)
 8000cb6:	f001 faea 	bl	800228e <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f44f 5187 	mov.w	r1, #4320	; 0x10e0
 8000cc0:	4822      	ldr	r0, [pc, #136]	; (8000d4c <MX_GPIO_Init+0x11c>)
 8000cc2:	f001 fae4 	bl	800228e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000cc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd8:	f107 0310 	add.w	r3, r7, #16
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4819      	ldr	r0, [pc, #100]	; (8000d44 <MX_GPIO_Init+0x114>)
 8000ce0:	f001 f93a 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000ce4:	23ff      	movs	r3, #255	; 0xff
 8000ce6:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf4:	f107 0310 	add.w	r3, r7, #16
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4813      	ldr	r0, [pc, #76]	; (8000d48 <MX_GPIO_Init+0x118>)
 8000cfc:	f001 f92c 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d00:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0e:	f107 0310 	add.w	r3, r7, #16
 8000d12:	4619      	mov	r1, r3
 8000d14:	480d      	ldr	r0, [pc, #52]	; (8000d4c <MX_GPIO_Init+0x11c>)
 8000d16:	f001 f91f 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d1a:	f44f 5387 	mov.w	r3, #4320	; 0x10e0
 8000d1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d20:	2301      	movs	r3, #1
 8000d22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2c:	f107 0310 	add.w	r3, r7, #16
 8000d30:	4619      	mov	r1, r3
 8000d32:	4806      	ldr	r0, [pc, #24]	; (8000d4c <MX_GPIO_Init+0x11c>)
 8000d34:	f001 f910 	bl	8001f58 <HAL_GPIO_Init>

}
 8000d38:	bf00      	nop
 8000d3a:	3720      	adds	r7, #32
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40021000 	.word	0x40021000
 8000d44:	40011000 	.word	0x40011000
 8000d48:	40010800 	.word	0x40010800
 8000d4c:	40010c00 	.word	0x40010c00

08000d50 <BreakInputTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_BreakInputTask */
void BreakInputTask(void *argument)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    // Read value from potentiometer
	HAL_ADC_Start(&hadc2);
 8000d58:	4811      	ldr	r0, [pc, #68]	; (8000da0 <BreakInputTask+0x50>)
 8000d5a:	f000 fcc9 	bl	80016f0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 300);
 8000d5e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000d62:	480f      	ldr	r0, [pc, #60]	; (8000da0 <BreakInputTask+0x50>)
 8000d64:	f000 fd72 	bl	800184c <HAL_ADC_PollForConversion>
	int potentiometerValue = HAL_ADC_GetValue(&hadc2);
 8000d68:	480d      	ldr	r0, [pc, #52]	; (8000da0 <BreakInputTask+0x50>)
 8000d6a:	f000 fe75 	bl	8001a58 <HAL_ADC_GetValue>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	60fb      	str	r3, [r7, #12]

	float currentValue = potentiometerValue/4095.0f;
 8000d72:	68f8      	ldr	r0, [r7, #12]
 8000d74:	f7ff faa6 	bl	80002c4 <__aeabi_i2f>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	490a      	ldr	r1, [pc, #40]	; (8000da4 <BreakInputTask+0x54>)
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fba9 	bl	80004d4 <__aeabi_fdiv>
 8000d82:	4603      	mov	r3, r0
 8000d84:	60bb      	str	r3, [r7, #8]

    // Place value in BrakeQueue
	xQueueSendToBack(BrakeQueueHandle, &currentValue, 10);
 8000d86:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <BreakInputTask+0x58>)
 8000d88:	6818      	ldr	r0, [r3, #0]
 8000d8a:	f107 0108 	add.w	r1, r7, #8
 8000d8e:	2300      	movs	r3, #0
 8000d90:	220a      	movs	r2, #10
 8000d92:	f002 fe83 	bl	8003a9c <xQueueGenericSend>
    
    osDelay(10);
 8000d96:	200a      	movs	r0, #10
 8000d98:	f002 fbac 	bl	80034f4 <osDelay>
  {
 8000d9c:	e7dc      	b.n	8000d58 <BreakInputTask+0x8>
 8000d9e:	bf00      	nop
 8000da0:	2000005c 	.word	0x2000005c
 8000da4:	457ff000 	.word	0x457ff000
 8000da8:	200000a0 	.word	0x200000a0

08000dac <ThrottleInputTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ThrottleInputTask */
void ThrottleInputTask(void *argument)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ThrottleInputTask */
  /* Infinite loop */
  for(;;)
  {
     // Read value from potentiometer
     HAL_ADC_Start(&hadc1);
 8000db4:	4811      	ldr	r0, [pc, #68]	; (8000dfc <ThrottleInputTask+0x50>)
 8000db6:	f000 fc9b 	bl	80016f0 <HAL_ADC_Start>
     HAL_ADC_PollForConversion(&hadc1, 300);
 8000dba:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000dbe:	480f      	ldr	r0, [pc, #60]	; (8000dfc <ThrottleInputTask+0x50>)
 8000dc0:	f000 fd44 	bl	800184c <HAL_ADC_PollForConversion>
     int potentiometerValue = HAL_ADC_GetValue(&hadc1);
 8000dc4:	480d      	ldr	r0, [pc, #52]	; (8000dfc <ThrottleInputTask+0x50>)
 8000dc6:	f000 fe47 	bl	8001a58 <HAL_ADC_GetValue>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	60fb      	str	r3, [r7, #12]

	float currentValue = potentiometerValue/4095.0f;
 8000dce:	68f8      	ldr	r0, [r7, #12]
 8000dd0:	f7ff fa78 	bl	80002c4 <__aeabi_i2f>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	490a      	ldr	r1, [pc, #40]	; (8000e00 <ThrottleInputTask+0x54>)
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff fb7b 	bl	80004d4 <__aeabi_fdiv>
 8000dde:	4603      	mov	r3, r0
 8000de0:	60bb      	str	r3, [r7, #8]

    // Place value in ThrottleQueue
	xQueueSendToBack(ThrottleQueueHandle, &currentValue, 10);
 8000de2:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <ThrottleInputTask+0x58>)
 8000de4:	6818      	ldr	r0, [r3, #0]
 8000de6:	f107 0108 	add.w	r1, r7, #8
 8000dea:	2300      	movs	r3, #0
 8000dec:	220a      	movs	r2, #10
 8000dee:	f002 fe55 	bl	8003a9c <xQueueGenericSend>

    osDelay(10);
 8000df2:	200a      	movs	r0, #10
 8000df4:	f002 fb7e 	bl	80034f4 <osDelay>
  {
 8000df8:	e7dc      	b.n	8000db4 <ThrottleInputTask+0x8>
 8000dfa:	bf00      	nop
 8000dfc:	2000002c 	.word	0x2000002c
 8000e00:	457ff000 	.word	0x457ff000
 8000e04:	200000a4 	.word	0x200000a4

08000e08 <DataProcessingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DataProcessingTask */
void DataProcessingTask(void *argument)
{
 8000e08:	b590      	push	{r4, r7, lr}
 8000e0a:	b08f      	sub	sp, #60	; 0x3c
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DataProcessingTask */
  // Only once. 

  // Iniitialize variables
  int DesiredSpeed = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]
  float AverageBrakePercentage = 0.0;
 8000e14:	f04f 0300 	mov.w	r3, #0
 8000e18:	637b      	str	r3, [r7, #52]	; 0x34
  float AverageThrottlePercentage = 0.0;
 8000e1a:	f04f 0300 	mov.w	r3, #0
 8000e1e:	633b      	str	r3, [r7, #48]	; 0x30
  int RequestedGear = 0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	613b      	str	r3, [r7, #16]
  for(;;)
  {
    // Read values from queues amnd calculate averages
    // Break Queue
    float valueFromBrakeQueue;
    int itemsInBrakeQueue = uxQueueMessagesWaiting(BrakeQueueHandle);
 8000e24:	4b98      	ldr	r3, [pc, #608]	; (8001088 <DataProcessingTask+0x280>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f003 f8ad 	bl	8003f88 <uxQueueMessagesWaiting>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	61fb      	str	r3, [r7, #28]
    AverageBrakePercentage = 0.0;
 8000e32:	f04f 0300 	mov.w	r3, #0
 8000e36:	637b      	str	r3, [r7, #52]	; 0x34
    for(int i = 0; i < itemsInBrakeQueue; i++) {
 8000e38:	2300      	movs	r3, #0
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8000e3c:	e01d      	b.n	8000e7a <DataProcessingTask+0x72>
        if(xQueueReceive(BrakeQueueHandle, &valueFromBrakeQueue, 10) == pdTRUE) {
 8000e3e:	4b92      	ldr	r3, [pc, #584]	; (8001088 <DataProcessingTask+0x280>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f107 010c 	add.w	r1, r7, #12
 8000e46:	220a      	movs	r2, #10
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f002 ffbd 	bl	8003dc8 <xQueueReceive>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d10f      	bne.n	8000e74 <DataProcessingTask+0x6c>
            AverageBrakePercentage = AverageBrakePercentage + valueFromBrakeQueue/itemsInBrakeQueue;
 8000e54:	68fc      	ldr	r4, [r7, #12]
 8000e56:	69f8      	ldr	r0, [r7, #28]
 8000e58:	f7ff fa34 	bl	80002c4 <__aeabi_i2f>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4620      	mov	r0, r4
 8000e62:	f7ff fb37 	bl	80004d4 <__aeabi_fdiv>
 8000e66:	4603      	mov	r3, r0
 8000e68:	4619      	mov	r1, r3
 8000e6a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000e6c:	f7ff f976 	bl	800015c <__addsf3>
 8000e70:	4603      	mov	r3, r0
 8000e72:	637b      	str	r3, [r7, #52]	; 0x34
    for(int i = 0; i < itemsInBrakeQueue; i++) {
 8000e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e76:	3301      	adds	r3, #1
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
 8000e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	dbdd      	blt.n	8000e3e <DataProcessingTask+0x36>
        }
    }
    
    // Throttle Queue
    float valueFromThrottleQueue;
    int itemsInThrottleQueue = uxQueueMessagesWaiting(ThrottleQueueHandle);
 8000e82:	4b82      	ldr	r3, [pc, #520]	; (800108c <DataProcessingTask+0x284>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f003 f87e 	bl	8003f88 <uxQueueMessagesWaiting>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	61bb      	str	r3, [r7, #24]
    AverageThrottlePercentage = 0.0;
 8000e90:	f04f 0300 	mov.w	r3, #0
 8000e94:	633b      	str	r3, [r7, #48]	; 0x30
    for(int i = 0; i < itemsInThrottleQueue; i++) {
 8000e96:	2300      	movs	r3, #0
 8000e98:	623b      	str	r3, [r7, #32]
 8000e9a:	e01d      	b.n	8000ed8 <DataProcessingTask+0xd0>
        if(xQueueReceive(ThrottleQueueHandle, &valueFromThrottleQueue, 10) == pdTRUE) {
 8000e9c:	4b7b      	ldr	r3, [pc, #492]	; (800108c <DataProcessingTask+0x284>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f107 0108 	add.w	r1, r7, #8
 8000ea4:	220a      	movs	r2, #10
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f002 ff8e 	bl	8003dc8 <xQueueReceive>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d10f      	bne.n	8000ed2 <DataProcessingTask+0xca>
            AverageThrottlePercentage = AverageThrottlePercentage + valueFromThrottleQueue/itemsInThrottleQueue;
 8000eb2:	68bc      	ldr	r4, [r7, #8]
 8000eb4:	69b8      	ldr	r0, [r7, #24]
 8000eb6:	f7ff fa05 	bl	80002c4 <__aeabi_i2f>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4620      	mov	r0, r4
 8000ec0:	f7ff fb08 	bl	80004d4 <__aeabi_fdiv>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000eca:	f7ff f947 	bl	800015c <__addsf3>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	633b      	str	r3, [r7, #48]	; 0x30
    for(int i = 0; i < itemsInThrottleQueue; i++) {
 8000ed2:	6a3b      	ldr	r3, [r7, #32]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	623b      	str	r3, [r7, #32]
 8000ed8:	6a3a      	ldr	r2, [r7, #32]
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	dbdd      	blt.n	8000e9c <DataProcessingTask+0x94>
        }
    }

    // Read value from Gear queue
    if(xQueueReceive(GearQueueHandle, &RequestedGear, 10) != pdTRUE) {
 8000ee0:	4b6b      	ldr	r3, [pc, #428]	; (8001090 <DataProcessingTask+0x288>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f107 0110 	add.w	r1, r7, #16
 8000ee8:	220a      	movs	r2, #10
 8000eea:	4618      	mov	r0, r3
 8000eec:	f002 ff6c 	bl	8003dc8 <xQueueReceive>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d001      	beq.n	8000efa <DataProcessingTask+0xf2>
    	RequestedGear = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
    };
    
    if(RequestedGear == 0) {
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d102      	bne.n	8000f06 <DataProcessingTask+0xfe>
        Acceleration = -400;
 8000f00:	4b64      	ldr	r3, [pc, #400]	; (8001094 <DataProcessingTask+0x28c>)
 8000f02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f04:	e093      	b.n	800102e <DataProcessingTask+0x226>
    } else if(RequestedGear == 1) {
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d148      	bne.n	8000f9e <DataProcessingTask+0x196>
        // Gear is Forward Speed 1
        MaximumSpeed = 80000;
 8000f0c:	4b62      	ldr	r3, [pc, #392]	; (8001098 <DataProcessingTask+0x290>)
 8000f0e:	62bb      	str	r3, [r7, #40]	; 0x28

        // Invalid state where breaks and throttle are pressed at the same time
        if(AverageBrakePercentage > 0 && AverageThrottlePercentage > 0) {
 8000f10:	f04f 0100 	mov.w	r1, #0
 8000f14:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000f16:	f7ff fbe5 	bl	80006e4 <__aeabi_fcmpgt>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d009      	beq.n	8000f34 <DataProcessingTask+0x12c>
 8000f20:	f04f 0100 	mov.w	r1, #0
 8000f24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f26:	f7ff fbdd 	bl	80006e4 <__aeabi_fcmpgt>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <DataProcessingTask+0x12c>
            Acceleration = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if(AverageBrakePercentage == 0 && AverageThrottlePercentage > 0) {
 8000f34:	f04f 0100 	mov.w	r1, #0
 8000f38:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000f3a:	f7ff fbab 	bl	8000694 <__aeabi_fcmpeq>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d011      	beq.n	8000f68 <DataProcessingTask+0x160>
 8000f44:	f04f 0100 	mov.w	r1, #0
 8000f48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f4a:	f7ff fbcb 	bl	80006e4 <__aeabi_fcmpgt>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d009      	beq.n	8000f68 <DataProcessingTask+0x160>
             Acceleration = 1600*AverageThrottlePercentage;
 8000f54:	4951      	ldr	r1, [pc, #324]	; (800109c <DataProcessingTask+0x294>)
 8000f56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f58:	f7ff fa08 	bl	800036c <__aeabi_fmul>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff fbca 	bl	80006f8 <__aeabi_f2iz>
 8000f64:	4603      	mov	r3, r0
 8000f66:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if(AverageThrottlePercentage == 0 && AverageBrakePercentage > 0) {
 8000f68:	f04f 0100 	mov.w	r1, #0
 8000f6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f6e:	f7ff fb91 	bl	8000694 <__aeabi_fcmpeq>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d05a      	beq.n	800102e <DataProcessingTask+0x226>
 8000f78:	f04f 0100 	mov.w	r1, #0
 8000f7c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000f7e:	f7ff fbb1 	bl	80006e4 <__aeabi_fcmpgt>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d052      	beq.n	800102e <DataProcessingTask+0x226>
            Acceleration = -3200*AverageBrakePercentage;
 8000f88:	4945      	ldr	r1, [pc, #276]	; (80010a0 <DataProcessingTask+0x298>)
 8000f8a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000f8c:	f7ff f9ee 	bl	800036c <__aeabi_fmul>
 8000f90:	4603      	mov	r3, r0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff fbb0 	bl	80006f8 <__aeabi_f2iz>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f9c:	e047      	b.n	800102e <DataProcessingTask+0x226>
        }
    } else {
        // Gear is Forward Speed 2
        MaximumSpeed = 200000;
 8000f9e:	4b41      	ldr	r3, [pc, #260]	; (80010a4 <DataProcessingTask+0x29c>)
 8000fa0:	62bb      	str	r3, [r7, #40]	; 0x28
    
        // Invalid state where breaks and throttle are pressed at the same time
        if(AverageBrakePercentage > 0 && AverageThrottlePercentage > 0) {
 8000fa2:	f04f 0100 	mov.w	r1, #0
 8000fa6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000fa8:	f7ff fb9c 	bl	80006e4 <__aeabi_fcmpgt>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d009      	beq.n	8000fc6 <DataProcessingTask+0x1be>
 8000fb2:	f04f 0100 	mov.w	r1, #0
 8000fb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000fb8:	f7ff fb94 	bl	80006e4 <__aeabi_fcmpgt>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <DataProcessingTask+0x1be>
            Acceleration = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        
        if(AverageBrakePercentage == 0 && AverageThrottlePercentage > 0) {
 8000fc6:	f04f 0100 	mov.w	r1, #0
 8000fca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000fcc:	f7ff fb62 	bl	8000694 <__aeabi_fcmpeq>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d011      	beq.n	8000ffa <DataProcessingTask+0x1f2>
 8000fd6:	f04f 0100 	mov.w	r1, #0
 8000fda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000fdc:	f7ff fb82 	bl	80006e4 <__aeabi_fcmpgt>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d009      	beq.n	8000ffa <DataProcessingTask+0x1f2>
             Acceleration = 2400*AverageThrottlePercentage;
 8000fe6:	4930      	ldr	r1, [pc, #192]	; (80010a8 <DataProcessingTask+0x2a0>)
 8000fe8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000fea:	f7ff f9bf 	bl	800036c <__aeabi_fmul>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff fb81 	bl	80006f8 <__aeabi_f2iz>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if(AverageThrottlePercentage == 0 && AverageBrakePercentage > 0) {
 8000ffa:	f04f 0100 	mov.w	r1, #0
 8000ffe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001000:	f7ff fb48 	bl	8000694 <__aeabi_fcmpeq>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d011      	beq.n	800102e <DataProcessingTask+0x226>
 800100a:	f04f 0100 	mov.w	r1, #0
 800100e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001010:	f7ff fb68 	bl	80006e4 <__aeabi_fcmpgt>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d009      	beq.n	800102e <DataProcessingTask+0x226>
            Acceleration = -3200*AverageBrakePercentage;
 800101a:	4921      	ldr	r1, [pc, #132]	; (80010a0 <DataProcessingTask+0x298>)
 800101c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800101e:	f7ff f9a5 	bl	800036c <__aeabi_fmul>
 8001022:	4603      	mov	r3, r0
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff fb67 	bl	80006f8 <__aeabi_f2iz>
 800102a:	4603      	mov	r3, r0
 800102c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
    }

    DesiredSpeed = DesiredSpeed + Acceleration;
 800102e:	697a      	ldr	r2, [r7, #20]
 8001030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001032:	4413      	add	r3, r2
 8001034:	617b      	str	r3, [r7, #20]
    if(DesiredSpeed < 0) {
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	2b00      	cmp	r3, #0
 800103a:	da02      	bge.n	8001042 <DataProcessingTask+0x23a>
        DesiredSpeed = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]
 8001040:	e005      	b.n	800104e <DataProcessingTask+0x246>
    } else if(DesiredSpeed > MaximumSpeed) {
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001046:	429a      	cmp	r2, r3
 8001048:	da01      	bge.n	800104e <DataProcessingTask+0x246>
        DesiredSpeed = MaximumSpeed;
 800104a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800104c:	617b      	str	r3, [r7, #20]
    }

    // Place desired speed in the queue
    xQueueSendToBack(SpeedQueueHandle, &DesiredSpeed, 10);
 800104e:	4b17      	ldr	r3, [pc, #92]	; (80010ac <DataProcessingTask+0x2a4>)
 8001050:	6818      	ldr	r0, [r3, #0]
 8001052:	f107 0114 	add.w	r1, r7, #20
 8001056:	2300      	movs	r3, #0
 8001058:	220a      	movs	r2, #10
 800105a:	f002 fd1f 	bl	8003a9c <xQueueGenericSend>

    if(RequestedGear == 1) {
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d106      	bne.n	8001072 <DataProcessingTask+0x26a>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001064:	2201      	movs	r2, #1
 8001066:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800106a:	4811      	ldr	r0, [pc, #68]	; (80010b0 <DataProcessingTask+0x2a8>)
 800106c:	f001 f90f 	bl	800228e <HAL_GPIO_WritePin>
 8001070:	e005      	b.n	800107e <DataProcessingTask+0x276>
    } else {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001072:	2200      	movs	r2, #0
 8001074:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001078:	480d      	ldr	r0, [pc, #52]	; (80010b0 <DataProcessingTask+0x2a8>)
 800107a:	f001 f908 	bl	800228e <HAL_GPIO_WritePin>
    }

    osDelay(100);
 800107e:	2064      	movs	r0, #100	; 0x64
 8001080:	f002 fa38 	bl	80034f4 <osDelay>
  {
 8001084:	e6ce      	b.n	8000e24 <DataProcessingTask+0x1c>
 8001086:	bf00      	nop
 8001088:	200000a0 	.word	0x200000a0
 800108c:	200000a4 	.word	0x200000a4
 8001090:	200000a8 	.word	0x200000a8
 8001094:	fffffe70 	.word	0xfffffe70
 8001098:	00013880 	.word	0x00013880
 800109c:	44c80000 	.word	0x44c80000
 80010a0:	c5480000 	.word	0xc5480000
 80010a4:	00030d40 	.word	0x00030d40
 80010a8:	45160000 	.word	0x45160000
 80010ac:	200000ac 	.word	0x200000ac
 80010b0:	40010c00 	.word	0x40010c00

080010b4 <OutputDisplayTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OutputDisplayTask */
void OutputDisplayTask(void *argument)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OutputDisplayTask */
  // Initialize variables
  int AverageDesiredSpeed = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	61fb      	str	r3, [r7, #28]
  /* Infinite loop */
  for(;;)
  {
    // Read data from speed
    int valueFromSpeedQueue;
    int itemsInSpeedQueue = uxQueueMessagesWaiting(SpeedQueueHandle);
 80010c0:	4b30      	ldr	r3, [pc, #192]	; (8001184 <OutputDisplayTask+0xd0>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f002 ff5f 	bl	8003f88 <uxQueueMessagesWaiting>
 80010ca:	4603      	mov	r3, r0
 80010cc:	617b      	str	r3, [r7, #20]
    AverageDesiredSpeed = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
    for(int i = 0; i < itemsInSpeedQueue; i++) {
 80010d2:	2300      	movs	r3, #0
 80010d4:	61bb      	str	r3, [r7, #24]
 80010d6:	e014      	b.n	8001102 <OutputDisplayTask+0x4e>
        if(xQueueReceive(SpeedQueueHandle, &valueFromSpeedQueue, 10) == pdTRUE) {
 80010d8:	4b2a      	ldr	r3, [pc, #168]	; (8001184 <OutputDisplayTask+0xd0>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f107 0108 	add.w	r1, r7, #8
 80010e0:	220a      	movs	r2, #10
 80010e2:	4618      	mov	r0, r3
 80010e4:	f002 fe70 	bl	8003dc8 <xQueueReceive>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d106      	bne.n	80010fc <OutputDisplayTask+0x48>
            AverageDesiredSpeed = AverageDesiredSpeed + valueFromSpeedQueue/itemsInSpeedQueue;
 80010ee:	68ba      	ldr	r2, [r7, #8]
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80010f6:	69fa      	ldr	r2, [r7, #28]
 80010f8:	4413      	add	r3, r2
 80010fa:	61fb      	str	r3, [r7, #28]
    for(int i = 0; i < itemsInSpeedQueue; i++) {
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	3301      	adds	r3, #1
 8001100:	61bb      	str	r3, [r7, #24]
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	429a      	cmp	r2, r3
 8001108:	dbe6      	blt.n	80010d8 <OutputDisplayTask+0x24>
        }
    }

    float speedPercentage = AverageDesiredSpeed/200000.0f;
 800110a:	69f8      	ldr	r0, [r7, #28]
 800110c:	f7ff f8da 	bl	80002c4 <__aeabi_i2f>
 8001110:	4603      	mov	r3, r0
 8001112:	491d      	ldr	r1, [pc, #116]	; (8001188 <OutputDisplayTask+0xd4>)
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff f9dd 	bl	80004d4 <__aeabi_fdiv>
 800111a:	4603      	mov	r3, r0
 800111c:	613b      	str	r3, [r7, #16]

    // Convert to km/h
    int SpeedToDisplay = AverageDesiredSpeed/1000;
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	4a1a      	ldr	r2, [pc, #104]	; (800118c <OutputDisplayTask+0xd8>)
 8001122:	fb82 1203 	smull	r1, r2, r2, r3
 8001126:	1192      	asrs	r2, r2, #6
 8001128:	17db      	asrs	r3, r3, #31
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	60fb      	str	r3, [r7, #12]

    // Set percentage as duty cycle in PWM pin


    // Display the SpeedToDisplay to an external display
	clearDisplay();
 800112e:	f7ff fbab 	bl	8000888 <clearDisplay>
	printDigits((int)SpeedToDisplay, 3);
 8001132:	2103      	movs	r1, #3
 8001134:	68f8      	ldr	r0, [r7, #12]
 8001136:	f7ff fbcd 	bl	80008d4 <printDigits>
	sendData(' ');
 800113a:	2020      	movs	r0, #32
 800113c:	f7ff fb54 	bl	80007e8 <sendData>
	sendData('k');
 8001140:	206b      	movs	r0, #107	; 0x6b
 8001142:	f7ff fb51 	bl	80007e8 <sendData>
	sendData('p');
 8001146:	2070      	movs	r0, #112	; 0x70
 8001148:	f7ff fb4e 	bl	80007e8 <sendData>
	sendData('h');
 800114c:	2068      	movs	r0, #104	; 0x68
 800114e:	f7ff fb4b 	bl	80007e8 <sendData>
	sendCommand(0xC0);
 8001152:	20c0      	movs	r0, #192	; 0xc0
 8001154:	f7ff fb70 	bl	8000838 <sendCommand>
	printDigits((int)(speedPercentage*100), 3);
 8001158:	490d      	ldr	r1, [pc, #52]	; (8001190 <OutputDisplayTask+0xdc>)
 800115a:	6938      	ldr	r0, [r7, #16]
 800115c:	f7ff f906 	bl	800036c <__aeabi_fmul>
 8001160:	4603      	mov	r3, r0
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff fac8 	bl	80006f8 <__aeabi_f2iz>
 8001168:	4603      	mov	r3, r0
 800116a:	2103      	movs	r1, #3
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff fbb1 	bl	80008d4 <printDigits>
	sendData('%');
 8001172:	2025      	movs	r0, #37	; 0x25
 8001174:	f7ff fb38 	bl	80007e8 <sendData>

    osDelay(500);
 8001178:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800117c:	f002 f9ba 	bl	80034f4 <osDelay>
  {
 8001180:	e79e      	b.n	80010c0 <OutputDisplayTask+0xc>
 8001182:	bf00      	nop
 8001184:	200000ac 	.word	0x200000ac
 8001188:	48435000 	.word	0x48435000
 800118c:	10624dd3 	.word	0x10624dd3
 8001190:	42c80000 	.word	0x42c80000

08001194 <GearSelectionTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GearSelectionTask */
void GearSelectionTask(void *argument)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
    // 1 -> Forward Speed 1
    // 2 -> Forward Speed 2

    // Read 2 bit dip switch and convert to 0, 1, or 2
    // B10, B11
    int selectedGear = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	60fb      	str	r3, [r7, #12]

    int firstPin = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10);
 80011a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011a4:	480e      	ldr	r0, [pc, #56]	; (80011e0 <GearSelectionTask+0x4c>)
 80011a6:	f001 f85b 	bl	8002260 <HAL_GPIO_ReadPin>
 80011aa:	4603      	mov	r3, r0
 80011ac:	617b      	str	r3, [r7, #20]
    int secondPin = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11);
 80011ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011b2:	480b      	ldr	r0, [pc, #44]	; (80011e0 <GearSelectionTask+0x4c>)
 80011b4:	f001 f854 	bl	8002260 <HAL_GPIO_ReadPin>
 80011b8:	4603      	mov	r3, r0
 80011ba:	613b      	str	r3, [r7, #16]

    selectedGear = firstPin + 2*secondPin;
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	005a      	lsls	r2, r3, #1
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	4413      	add	r3, r2
 80011c4:	60fb      	str	r3, [r7, #12]

    // Write to GearQueue
    xQueueSendToBack(GearQueueHandle, &selectedGear, 10);
 80011c6:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <GearSelectionTask+0x50>)
 80011c8:	6818      	ldr	r0, [r3, #0]
 80011ca:	f107 010c 	add.w	r1, r7, #12
 80011ce:	2300      	movs	r3, #0
 80011d0:	220a      	movs	r2, #10
 80011d2:	f002 fc63 	bl	8003a9c <xQueueGenericSend>

    osDelay(50);
 80011d6:	2032      	movs	r0, #50	; 0x32
 80011d8:	f002 f98c 	bl	80034f4 <osDelay>
  {
 80011dc:	e7de      	b.n	800119c <GearSelectionTask+0x8>
 80011de:	bf00      	nop
 80011e0:	40010c00 	.word	0x40010c00
 80011e4:	200000a8 	.word	0x200000a8

080011e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011f8:	d101      	bne.n	80011fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011fa:	f000 f985 	bl	8001508 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800120a:	b672      	cpsid	i
}
 800120c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800120e:	e7fe      	b.n	800120e <Error_Handler+0x8>

08001210 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001216:	4b18      	ldr	r3, [pc, #96]	; (8001278 <HAL_MspInit+0x68>)
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	4a17      	ldr	r2, [pc, #92]	; (8001278 <HAL_MspInit+0x68>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6193      	str	r3, [r2, #24]
 8001222:	4b15      	ldr	r3, [pc, #84]	; (8001278 <HAL_MspInit+0x68>)
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800122e:	4b12      	ldr	r3, [pc, #72]	; (8001278 <HAL_MspInit+0x68>)
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	4a11      	ldr	r2, [pc, #68]	; (8001278 <HAL_MspInit+0x68>)
 8001234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001238:	61d3      	str	r3, [r2, #28]
 800123a:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <HAL_MspInit+0x68>)
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001242:	607b      	str	r3, [r7, #4]
 8001244:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	210f      	movs	r1, #15
 800124a:	f06f 0001 	mvn.w	r0, #1
 800124e:	f000 fe58 	bl	8001f02 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001252:	4b0a      	ldr	r3, [pc, #40]	; (800127c <HAL_MspInit+0x6c>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	4a04      	ldr	r2, [pc, #16]	; (800127c <HAL_MspInit+0x6c>)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800126e:	bf00      	nop
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40021000 	.word	0x40021000
 800127c:	40010000 	.word	0x40010000

08001280 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08a      	sub	sp, #40	; 0x28
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 0318 	add.w	r3, r7, #24
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a28      	ldr	r2, [pc, #160]	; (800133c <HAL_ADC_MspInit+0xbc>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d122      	bne.n	80012e6 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012a0:	4b27      	ldr	r3, [pc, #156]	; (8001340 <HAL_ADC_MspInit+0xc0>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	4a26      	ldr	r2, [pc, #152]	; (8001340 <HAL_ADC_MspInit+0xc0>)
 80012a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012aa:	6193      	str	r3, [r2, #24]
 80012ac:	4b24      	ldr	r3, [pc, #144]	; (8001340 <HAL_ADC_MspInit+0xc0>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012b4:	617b      	str	r3, [r7, #20]
 80012b6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b8:	4b21      	ldr	r3, [pc, #132]	; (8001340 <HAL_ADC_MspInit+0xc0>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	4a20      	ldr	r2, [pc, #128]	; (8001340 <HAL_ADC_MspInit+0xc0>)
 80012be:	f043 0308 	orr.w	r3, r3, #8
 80012c2:	6193      	str	r3, [r2, #24]
 80012c4:	4b1e      	ldr	r3, [pc, #120]	; (8001340 <HAL_ADC_MspInit+0xc0>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	f003 0308 	and.w	r3, r3, #8
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = b_Pin|t_Pin;
 80012d0:	2303      	movs	r3, #3
 80012d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012d4:	2303      	movs	r3, #3
 80012d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d8:	f107 0318 	add.w	r3, r7, #24
 80012dc:	4619      	mov	r1, r3
 80012de:	4819      	ldr	r0, [pc, #100]	; (8001344 <HAL_ADC_MspInit+0xc4>)
 80012e0:	f000 fe3a 	bl	8001f58 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80012e4:	e026      	b.n	8001334 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a17      	ldr	r2, [pc, #92]	; (8001348 <HAL_ADC_MspInit+0xc8>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d121      	bne.n	8001334 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80012f0:	4b13      	ldr	r3, [pc, #76]	; (8001340 <HAL_ADC_MspInit+0xc0>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	4a12      	ldr	r2, [pc, #72]	; (8001340 <HAL_ADC_MspInit+0xc0>)
 80012f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012fa:	6193      	str	r3, [r2, #24]
 80012fc:	4b10      	ldr	r3, [pc, #64]	; (8001340 <HAL_ADC_MspInit+0xc0>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001308:	4b0d      	ldr	r3, [pc, #52]	; (8001340 <HAL_ADC_MspInit+0xc0>)
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	4a0c      	ldr	r2, [pc, #48]	; (8001340 <HAL_ADC_MspInit+0xc0>)
 800130e:	f043 0308 	orr.w	r3, r3, #8
 8001312:	6193      	str	r3, [r2, #24]
 8001314:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <HAL_ADC_MspInit+0xc0>)
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	f003 0308 	and.w	r3, r3, #8
 800131c:	60bb      	str	r3, [r7, #8]
 800131e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = t_Pin;
 8001320:	2302      	movs	r3, #2
 8001322:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001324:	2303      	movs	r3, #3
 8001326:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(t_GPIO_Port, &GPIO_InitStruct);
 8001328:	f107 0318 	add.w	r3, r7, #24
 800132c:	4619      	mov	r1, r3
 800132e:	4805      	ldr	r0, [pc, #20]	; (8001344 <HAL_ADC_MspInit+0xc4>)
 8001330:	f000 fe12 	bl	8001f58 <HAL_GPIO_Init>
}
 8001334:	bf00      	nop
 8001336:	3728      	adds	r7, #40	; 0x28
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40012400 	.word	0x40012400
 8001340:	40021000 	.word	0x40021000
 8001344:	40010c00 	.word	0x40010c00
 8001348:	40012800 	.word	0x40012800

0800134c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08e      	sub	sp, #56	; 0x38
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001354:	2300      	movs	r3, #0
 8001356:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001358:	2300      	movs	r3, #0
 800135a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800135c:	2300      	movs	r3, #0
 800135e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001362:	4b34      	ldr	r3, [pc, #208]	; (8001434 <HAL_InitTick+0xe8>)
 8001364:	69db      	ldr	r3, [r3, #28]
 8001366:	4a33      	ldr	r2, [pc, #204]	; (8001434 <HAL_InitTick+0xe8>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	61d3      	str	r3, [r2, #28]
 800136e:	4b31      	ldr	r3, [pc, #196]	; (8001434 <HAL_InitTick+0xe8>)
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800137a:	f107 0210 	add.w	r2, r7, #16
 800137e:	f107 0314 	add.w	r3, r7, #20
 8001382:	4611      	mov	r1, r2
 8001384:	4618      	mov	r0, r3
 8001386:	f001 fb97 	bl	8002ab8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800138a:	6a3b      	ldr	r3, [r7, #32]
 800138c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800138e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001390:	2b00      	cmp	r3, #0
 8001392:	d103      	bne.n	800139c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001394:	f001 fb68 	bl	8002a68 <HAL_RCC_GetPCLK1Freq>
 8001398:	6378      	str	r0, [r7, #52]	; 0x34
 800139a:	e004      	b.n	80013a6 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800139c:	f001 fb64 	bl	8002a68 <HAL_RCC_GetPCLK1Freq>
 80013a0:	4603      	mov	r3, r0
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013a8:	4a23      	ldr	r2, [pc, #140]	; (8001438 <HAL_InitTick+0xec>)
 80013aa:	fba2 2303 	umull	r2, r3, r2, r3
 80013ae:	0c9b      	lsrs	r3, r3, #18
 80013b0:	3b01      	subs	r3, #1
 80013b2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80013b4:	4b21      	ldr	r3, [pc, #132]	; (800143c <HAL_InitTick+0xf0>)
 80013b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013ba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80013bc:	4b1f      	ldr	r3, [pc, #124]	; (800143c <HAL_InitTick+0xf0>)
 80013be:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013c2:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80013c4:	4a1d      	ldr	r2, [pc, #116]	; (800143c <HAL_InitTick+0xf0>)
 80013c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013c8:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80013ca:	4b1c      	ldr	r3, [pc, #112]	; (800143c <HAL_InitTick+0xf0>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d0:	4b1a      	ldr	r3, [pc, #104]	; (800143c <HAL_InitTick+0xf0>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d6:	4b19      	ldr	r3, [pc, #100]	; (800143c <HAL_InitTick+0xf0>)
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80013dc:	4817      	ldr	r0, [pc, #92]	; (800143c <HAL_InitTick+0xf0>)
 80013de:	f001 fd2f 	bl	8002e40 <HAL_TIM_Base_Init>
 80013e2:	4603      	mov	r3, r0
 80013e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80013e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d11b      	bne.n	8001428 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80013f0:	4812      	ldr	r0, [pc, #72]	; (800143c <HAL_InitTick+0xf0>)
 80013f2:	f001 fd7d 	bl	8002ef0 <HAL_TIM_Base_Start_IT>
 80013f6:	4603      	mov	r3, r0
 80013f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80013fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001400:	2b00      	cmp	r3, #0
 8001402:	d111      	bne.n	8001428 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001404:	201c      	movs	r0, #28
 8001406:	f000 fd98 	bl	8001f3a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2b0f      	cmp	r3, #15
 800140e:	d808      	bhi.n	8001422 <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001410:	2200      	movs	r2, #0
 8001412:	6879      	ldr	r1, [r7, #4]
 8001414:	201c      	movs	r0, #28
 8001416:	f000 fd74 	bl	8001f02 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800141a:	4a09      	ldr	r2, [pc, #36]	; (8001440 <HAL_InitTick+0xf4>)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6013      	str	r3, [r2, #0]
 8001420:	e002      	b.n	8001428 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001428:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800142c:	4618      	mov	r0, r3
 800142e:	3738      	adds	r7, #56	; 0x38
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40021000 	.word	0x40021000
 8001438:	431bde83 	.word	0x431bde83
 800143c:	200000b0 	.word	0x200000b0
 8001440:	20000004 	.word	0x20000004

08001444 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001448:	e7fe      	b.n	8001448 <NMI_Handler+0x4>

0800144a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800144e:	e7fe      	b.n	800144e <HardFault_Handler+0x4>

08001450 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001454:	e7fe      	b.n	8001454 <MemManage_Handler+0x4>

08001456 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800145a:	e7fe      	b.n	800145a <BusFault_Handler+0x4>

0800145c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001460:	e7fe      	b.n	8001460 <UsageFault_Handler+0x4>

08001462 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	46bd      	mov	sp, r7
 800146a:	bc80      	pop	{r7}
 800146c:	4770      	bx	lr
	...

08001470 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001474:	4802      	ldr	r0, [pc, #8]	; (8001480 <TIM2_IRQHandler+0x10>)
 8001476:	f001 fd8d 	bl	8002f94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	200000b0 	.word	0x200000b0

08001484 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr

08001490 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001490:	480c      	ldr	r0, [pc, #48]	; (80014c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001492:	490d      	ldr	r1, [pc, #52]	; (80014c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001494:	4a0d      	ldr	r2, [pc, #52]	; (80014cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001496:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001498:	e002      	b.n	80014a0 <LoopCopyDataInit>

0800149a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800149a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800149c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800149e:	3304      	adds	r3, #4

080014a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014a4:	d3f9      	bcc.n	800149a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014a6:	4a0a      	ldr	r2, [pc, #40]	; (80014d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014a8:	4c0a      	ldr	r4, [pc, #40]	; (80014d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014ac:	e001      	b.n	80014b2 <LoopFillZerobss>

080014ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014b0:	3204      	adds	r2, #4

080014b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014b4:	d3fb      	bcc.n	80014ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014b6:	f7ff ffe5 	bl	8001484 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ba:	f004 fcbf 	bl	8005e3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014be:	f7ff fa57 	bl	8000970 <main>
  bx lr
 80014c2:	4770      	bx	lr
  ldr r0, =_sdata
 80014c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014c8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80014cc:	080060cc 	.word	0x080060cc
  ldr r2, =_sbss
 80014d0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80014d4:	20001744 	.word	0x20001744

080014d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014d8:	e7fe      	b.n	80014d8 <ADC1_2_IRQHandler>
	...

080014dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014e0:	4b08      	ldr	r3, [pc, #32]	; (8001504 <HAL_Init+0x28>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a07      	ldr	r2, [pc, #28]	; (8001504 <HAL_Init+0x28>)
 80014e6:	f043 0310 	orr.w	r3, r3, #16
 80014ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ec:	2003      	movs	r0, #3
 80014ee:	f000 fcfd 	bl	8001eec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014f2:	200f      	movs	r0, #15
 80014f4:	f7ff ff2a 	bl	800134c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014f8:	f7ff fe8a 	bl	8001210 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40022000 	.word	0x40022000

08001508 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800150c:	4b05      	ldr	r3, [pc, #20]	; (8001524 <HAL_IncTick+0x1c>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	461a      	mov	r2, r3
 8001512:	4b05      	ldr	r3, [pc, #20]	; (8001528 <HAL_IncTick+0x20>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4413      	add	r3, r2
 8001518:	4a03      	ldr	r2, [pc, #12]	; (8001528 <HAL_IncTick+0x20>)
 800151a:	6013      	str	r3, [r2, #0]
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr
 8001524:	20000008 	.word	0x20000008
 8001528:	200000f8 	.word	0x200000f8

0800152c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return uwTick;
 8001530:	4b02      	ldr	r3, [pc, #8]	; (800153c <HAL_GetTick+0x10>)
 8001532:	681b      	ldr	r3, [r3, #0]
}
 8001534:	4618      	mov	r0, r3
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr
 800153c:	200000f8 	.word	0x200000f8

08001540 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001548:	2300      	movs	r3, #0
 800154a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800154c:	2300      	movs	r3, #0
 800154e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001550:	2300      	movs	r3, #0
 8001552:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001554:	2300      	movs	r3, #0
 8001556:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d101      	bne.n	8001562 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e0be      	b.n	80016e0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156c:	2b00      	cmp	r3, #0
 800156e:	d109      	bne.n	8001584 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff fe7e 	bl	8001280 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f000 fbc5 	bl	8001d14 <ADC_ConversionStop_Disable>
 800158a:	4603      	mov	r3, r0
 800158c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001592:	f003 0310 	and.w	r3, r3, #16
 8001596:	2b00      	cmp	r3, #0
 8001598:	f040 8099 	bne.w	80016ce <HAL_ADC_Init+0x18e>
 800159c:	7dfb      	ldrb	r3, [r7, #23]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f040 8095 	bne.w	80016ce <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015ac:	f023 0302 	bic.w	r3, r3, #2
 80015b0:	f043 0202 	orr.w	r2, r3, #2
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80015c0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	7b1b      	ldrb	r3, [r3, #12]
 80015c6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80015c8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80015ca:	68ba      	ldr	r2, [r7, #8]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015d8:	d003      	beq.n	80015e2 <HAL_ADC_Init+0xa2>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d102      	bne.n	80015e8 <HAL_ADC_Init+0xa8>
 80015e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015e6:	e000      	b.n	80015ea <HAL_ADC_Init+0xaa>
 80015e8:	2300      	movs	r3, #0
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	7d1b      	ldrb	r3, [r3, #20]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d119      	bne.n	800162c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	7b1b      	ldrb	r3, [r3, #12]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d109      	bne.n	8001614 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	3b01      	subs	r3, #1
 8001606:	035a      	lsls	r2, r3, #13
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	4313      	orrs	r3, r2
 800160c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001610:	613b      	str	r3, [r7, #16]
 8001612:	e00b      	b.n	800162c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001618:	f043 0220 	orr.w	r2, r3, #32
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001624:	f043 0201 	orr.w	r2, r3, #1
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	430a      	orrs	r2, r1
 800163e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	689a      	ldr	r2, [r3, #8]
 8001646:	4b28      	ldr	r3, [pc, #160]	; (80016e8 <HAL_ADC_Init+0x1a8>)
 8001648:	4013      	ands	r3, r2
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	6812      	ldr	r2, [r2, #0]
 800164e:	68b9      	ldr	r1, [r7, #8]
 8001650:	430b      	orrs	r3, r1
 8001652:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800165c:	d003      	beq.n	8001666 <HAL_ADC_Init+0x126>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d104      	bne.n	8001670 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	3b01      	subs	r3, #1
 800166c:	051b      	lsls	r3, r3, #20
 800166e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001676:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	430a      	orrs	r2, r1
 8001682:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	689a      	ldr	r2, [r3, #8]
 800168a:	4b18      	ldr	r3, [pc, #96]	; (80016ec <HAL_ADC_Init+0x1ac>)
 800168c:	4013      	ands	r3, r2
 800168e:	68ba      	ldr	r2, [r7, #8]
 8001690:	429a      	cmp	r2, r3
 8001692:	d10b      	bne.n	80016ac <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169e:	f023 0303 	bic.w	r3, r3, #3
 80016a2:	f043 0201 	orr.w	r2, r3, #1
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016aa:	e018      	b.n	80016de <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b0:	f023 0312 	bic.w	r3, r3, #18
 80016b4:	f043 0210 	orr.w	r2, r3, #16
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c0:	f043 0201 	orr.w	r2, r3, #1
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016cc:	e007      	b.n	80016de <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d2:	f043 0210 	orr.w	r2, r3, #16
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80016de:	7dfb      	ldrb	r3, [r7, #23]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3718      	adds	r7, #24
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	ffe1f7fd 	.word	0xffe1f7fd
 80016ec:	ff1f0efe 	.word	0xff1f0efe

080016f0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016f8:	2300      	movs	r3, #0
 80016fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001702:	2b01      	cmp	r3, #1
 8001704:	d101      	bne.n	800170a <HAL_ADC_Start+0x1a>
 8001706:	2302      	movs	r3, #2
 8001708:	e098      	b.n	800183c <HAL_ADC_Start+0x14c>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2201      	movs	r2, #1
 800170e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 faa4 	bl	8001c60 <ADC_Enable>
 8001718:	4603      	mov	r3, r0
 800171a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800171c:	7bfb      	ldrb	r3, [r7, #15]
 800171e:	2b00      	cmp	r3, #0
 8001720:	f040 8087 	bne.w	8001832 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001728:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800172c:	f023 0301 	bic.w	r3, r3, #1
 8001730:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a41      	ldr	r2, [pc, #260]	; (8001844 <HAL_ADC_Start+0x154>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d105      	bne.n	800174e <HAL_ADC_Start+0x5e>
 8001742:	4b41      	ldr	r3, [pc, #260]	; (8001848 <HAL_ADC_Start+0x158>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d115      	bne.n	800177a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001752:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001764:	2b00      	cmp	r3, #0
 8001766:	d026      	beq.n	80017b6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001770:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001778:	e01d      	b.n	80017b6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a2f      	ldr	r2, [pc, #188]	; (8001848 <HAL_ADC_Start+0x158>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d004      	beq.n	800179a <HAL_ADC_Start+0xaa>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a2b      	ldr	r2, [pc, #172]	; (8001844 <HAL_ADC_Start+0x154>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d10d      	bne.n	80017b6 <HAL_ADC_Start+0xc6>
 800179a:	4b2b      	ldr	r3, [pc, #172]	; (8001848 <HAL_ADC_Start+0x158>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d007      	beq.n	80017b6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d006      	beq.n	80017d0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c6:	f023 0206 	bic.w	r2, r3, #6
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80017ce:	e002      	b.n	80017d6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f06f 0202 	mvn.w	r2, #2
 80017e6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80017f2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80017f6:	d113      	bne.n	8001820 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80017fc:	4a11      	ldr	r2, [pc, #68]	; (8001844 <HAL_ADC_Start+0x154>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d105      	bne.n	800180e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001802:	4b11      	ldr	r3, [pc, #68]	; (8001848 <HAL_ADC_Start+0x158>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800180a:	2b00      	cmp	r3, #0
 800180c:	d108      	bne.n	8001820 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800181c:	609a      	str	r2, [r3, #8]
 800181e:	e00c      	b.n	800183a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	689a      	ldr	r2, [r3, #8]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	e003      	b.n	800183a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800183a:	7bfb      	ldrb	r3, [r7, #15]
}
 800183c:	4618      	mov	r0, r3
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40012800 	.word	0x40012800
 8001848:	40012400 	.word	0x40012400

0800184c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800184c:	b590      	push	{r4, r7, lr}
 800184e:	b087      	sub	sp, #28
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001856:	2300      	movs	r3, #0
 8001858:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800185e:	2300      	movs	r3, #0
 8001860:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001862:	f7ff fe63 	bl	800152c <HAL_GetTick>
 8001866:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001872:	2b00      	cmp	r3, #0
 8001874:	d00b      	beq.n	800188e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187a:	f043 0220 	orr.w	r2, r3, #32
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e0d3      	b.n	8001a36 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001898:	2b00      	cmp	r3, #0
 800189a:	d131      	bne.n	8001900 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d12a      	bne.n	8001900 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80018aa:	e021      	b.n	80018f0 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018b2:	d01d      	beq.n	80018f0 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d007      	beq.n	80018ca <HAL_ADC_PollForConversion+0x7e>
 80018ba:	f7ff fe37 	bl	800152c <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d212      	bcs.n	80018f0 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d10b      	bne.n	80018f0 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018dc:	f043 0204 	orr.w	r2, r3, #4
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e0a2      	b.n	8001a36 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d0d6      	beq.n	80018ac <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80018fe:	e070      	b.n	80019e2 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001900:	4b4f      	ldr	r3, [pc, #316]	; (8001a40 <HAL_ADC_PollForConversion+0x1f4>)
 8001902:	681c      	ldr	r4, [r3, #0]
 8001904:	2002      	movs	r0, #2
 8001906:	f001 f9db 	bl	8002cc0 <HAL_RCCEx_GetPeriphCLKFreq>
 800190a:	4603      	mov	r3, r0
 800190c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6919      	ldr	r1, [r3, #16]
 8001916:	4b4b      	ldr	r3, [pc, #300]	; (8001a44 <HAL_ADC_PollForConversion+0x1f8>)
 8001918:	400b      	ands	r3, r1
 800191a:	2b00      	cmp	r3, #0
 800191c:	d118      	bne.n	8001950 <HAL_ADC_PollForConversion+0x104>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	68d9      	ldr	r1, [r3, #12]
 8001924:	4b48      	ldr	r3, [pc, #288]	; (8001a48 <HAL_ADC_PollForConversion+0x1fc>)
 8001926:	400b      	ands	r3, r1
 8001928:	2b00      	cmp	r3, #0
 800192a:	d111      	bne.n	8001950 <HAL_ADC_PollForConversion+0x104>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6919      	ldr	r1, [r3, #16]
 8001932:	4b46      	ldr	r3, [pc, #280]	; (8001a4c <HAL_ADC_PollForConversion+0x200>)
 8001934:	400b      	ands	r3, r1
 8001936:	2b00      	cmp	r3, #0
 8001938:	d108      	bne.n	800194c <HAL_ADC_PollForConversion+0x100>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	68d9      	ldr	r1, [r3, #12]
 8001940:	4b43      	ldr	r3, [pc, #268]	; (8001a50 <HAL_ADC_PollForConversion+0x204>)
 8001942:	400b      	ands	r3, r1
 8001944:	2b00      	cmp	r3, #0
 8001946:	d101      	bne.n	800194c <HAL_ADC_PollForConversion+0x100>
 8001948:	2314      	movs	r3, #20
 800194a:	e020      	b.n	800198e <HAL_ADC_PollForConversion+0x142>
 800194c:	2329      	movs	r3, #41	; 0x29
 800194e:	e01e      	b.n	800198e <HAL_ADC_PollForConversion+0x142>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6919      	ldr	r1, [r3, #16]
 8001956:	4b3d      	ldr	r3, [pc, #244]	; (8001a4c <HAL_ADC_PollForConversion+0x200>)
 8001958:	400b      	ands	r3, r1
 800195a:	2b00      	cmp	r3, #0
 800195c:	d106      	bne.n	800196c <HAL_ADC_PollForConversion+0x120>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	68d9      	ldr	r1, [r3, #12]
 8001964:	4b3a      	ldr	r3, [pc, #232]	; (8001a50 <HAL_ADC_PollForConversion+0x204>)
 8001966:	400b      	ands	r3, r1
 8001968:	2b00      	cmp	r3, #0
 800196a:	d00d      	beq.n	8001988 <HAL_ADC_PollForConversion+0x13c>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6919      	ldr	r1, [r3, #16]
 8001972:	4b38      	ldr	r3, [pc, #224]	; (8001a54 <HAL_ADC_PollForConversion+0x208>)
 8001974:	400b      	ands	r3, r1
 8001976:	2b00      	cmp	r3, #0
 8001978:	d108      	bne.n	800198c <HAL_ADC_PollForConversion+0x140>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68d9      	ldr	r1, [r3, #12]
 8001980:	4b34      	ldr	r3, [pc, #208]	; (8001a54 <HAL_ADC_PollForConversion+0x208>)
 8001982:	400b      	ands	r3, r1
 8001984:	2b00      	cmp	r3, #0
 8001986:	d101      	bne.n	800198c <HAL_ADC_PollForConversion+0x140>
 8001988:	2354      	movs	r3, #84	; 0x54
 800198a:	e000      	b.n	800198e <HAL_ADC_PollForConversion+0x142>
 800198c:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800198e:	fb02 f303 	mul.w	r3, r2, r3
 8001992:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001994:	e021      	b.n	80019da <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800199c:	d01a      	beq.n	80019d4 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d007      	beq.n	80019b4 <HAL_ADC_PollForConversion+0x168>
 80019a4:	f7ff fdc2 	bl	800152c <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d20f      	bcs.n	80019d4 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d90b      	bls.n	80019d4 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c0:	f043 0204 	orr.w	r2, r3, #4
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e030      	b.n	8001a36 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	3301      	adds	r3, #1
 80019d8:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d8d9      	bhi.n	8001996 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f06f 0212 	mvn.w	r2, #18
 80019ea:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001a02:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001a06:	d115      	bne.n	8001a34 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d111      	bne.n	8001a34 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d105      	bne.n	8001a34 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2c:	f043 0201 	orr.w	r2, r3, #1
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	371c      	adds	r7, #28
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd90      	pop	{r4, r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000000 	.word	0x20000000
 8001a44:	24924924 	.word	0x24924924
 8001a48:	00924924 	.word	0x00924924
 8001a4c:	12492492 	.word	0x12492492
 8001a50:	00492492 	.word	0x00492492
 8001a54:	00249249 	.word	0x00249249

08001a58 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr

08001a70 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d101      	bne.n	8001a90 <HAL_ADC_ConfigChannel+0x20>
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	e0dc      	b.n	8001c4a <HAL_ADC_ConfigChannel+0x1da>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b06      	cmp	r3, #6
 8001a9e:	d81c      	bhi.n	8001ada <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	3b05      	subs	r3, #5
 8001ab2:	221f      	movs	r2, #31
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	4019      	ands	r1, r3
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	6818      	ldr	r0, [r3, #0]
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685a      	ldr	r2, [r3, #4]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	4413      	add	r3, r2
 8001aca:	3b05      	subs	r3, #5
 8001acc:	fa00 f203 	lsl.w	r2, r0, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	635a      	str	r2, [r3, #52]	; 0x34
 8001ad8:	e03c      	b.n	8001b54 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	2b0c      	cmp	r3, #12
 8001ae0:	d81c      	bhi.n	8001b1c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685a      	ldr	r2, [r3, #4]
 8001aec:	4613      	mov	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	4413      	add	r3, r2
 8001af2:	3b23      	subs	r3, #35	; 0x23
 8001af4:	221f      	movs	r2, #31
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	43db      	mvns	r3, r3
 8001afc:	4019      	ands	r1, r3
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	6818      	ldr	r0, [r3, #0]
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	4613      	mov	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	4413      	add	r3, r2
 8001b0c:	3b23      	subs	r3, #35	; 0x23
 8001b0e:	fa00 f203 	lsl.w	r2, r0, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	430a      	orrs	r2, r1
 8001b18:	631a      	str	r2, [r3, #48]	; 0x30
 8001b1a:	e01b      	b.n	8001b54 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685a      	ldr	r2, [r3, #4]
 8001b26:	4613      	mov	r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	4413      	add	r3, r2
 8001b2c:	3b41      	subs	r3, #65	; 0x41
 8001b2e:	221f      	movs	r2, #31
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	4019      	ands	r1, r3
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	6818      	ldr	r0, [r3, #0]
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	4613      	mov	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4413      	add	r3, r2
 8001b46:	3b41      	subs	r3, #65	; 0x41
 8001b48:	fa00 f203 	lsl.w	r2, r0, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	430a      	orrs	r2, r1
 8001b52:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2b09      	cmp	r3, #9
 8001b5a:	d91c      	bls.n	8001b96 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	68d9      	ldr	r1, [r3, #12]
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	4613      	mov	r3, r2
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	4413      	add	r3, r2
 8001b6c:	3b1e      	subs	r3, #30
 8001b6e:	2207      	movs	r2, #7
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	4019      	ands	r1, r3
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	6898      	ldr	r0, [r3, #8]
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	4613      	mov	r3, r2
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	4413      	add	r3, r2
 8001b86:	3b1e      	subs	r3, #30
 8001b88:	fa00 f203 	lsl.w	r2, r0, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	430a      	orrs	r2, r1
 8001b92:	60da      	str	r2, [r3, #12]
 8001b94:	e019      	b.n	8001bca <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	6919      	ldr	r1, [r3, #16]
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	4413      	add	r3, r2
 8001ba6:	2207      	movs	r2, #7
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	4019      	ands	r1, r3
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	6898      	ldr	r0, [r3, #8]
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	4413      	add	r3, r2
 8001bbe:	fa00 f203 	lsl.w	r2, r0, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2b10      	cmp	r3, #16
 8001bd0:	d003      	beq.n	8001bda <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001bd6:	2b11      	cmp	r3, #17
 8001bd8:	d132      	bne.n	8001c40 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a1d      	ldr	r2, [pc, #116]	; (8001c54 <HAL_ADC_ConfigChannel+0x1e4>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d125      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d126      	bne.n	8001c40 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	689a      	ldr	r2, [r3, #8]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001c00:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2b10      	cmp	r3, #16
 8001c08:	d11a      	bne.n	8001c40 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c0a:	4b13      	ldr	r3, [pc, #76]	; (8001c58 <HAL_ADC_ConfigChannel+0x1e8>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a13      	ldr	r2, [pc, #76]	; (8001c5c <HAL_ADC_ConfigChannel+0x1ec>)
 8001c10:	fba2 2303 	umull	r2, r3, r2, r3
 8001c14:	0c9a      	lsrs	r2, r3, #18
 8001c16:	4613      	mov	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c20:	e002      	b.n	8001c28 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	3b01      	subs	r3, #1
 8001c26:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1f9      	bne.n	8001c22 <HAL_ADC_ConfigChannel+0x1b2>
 8001c2e:	e007      	b.n	8001c40 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c34:	f043 0220 	orr.w	r2, r3, #32
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr
 8001c54:	40012400 	.word	0x40012400
 8001c58:	20000000 	.word	0x20000000
 8001c5c:	431bde83 	.word	0x431bde83

08001c60 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d040      	beq.n	8001d00 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f042 0201 	orr.w	r2, r2, #1
 8001c8c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c8e:	4b1f      	ldr	r3, [pc, #124]	; (8001d0c <ADC_Enable+0xac>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a1f      	ldr	r2, [pc, #124]	; (8001d10 <ADC_Enable+0xb0>)
 8001c94:	fba2 2303 	umull	r2, r3, r2, r3
 8001c98:	0c9b      	lsrs	r3, r3, #18
 8001c9a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001c9c:	e002      	b.n	8001ca4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1f9      	bne.n	8001c9e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001caa:	f7ff fc3f 	bl	800152c <HAL_GetTick>
 8001cae:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001cb0:	e01f      	b.n	8001cf2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001cb2:	f7ff fc3b 	bl	800152c <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d918      	bls.n	8001cf2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d011      	beq.n	8001cf2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd2:	f043 0210 	orr.w	r2, r3, #16
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cde:	f043 0201 	orr.w	r2, r3, #1
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e007      	b.n	8001d02 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 0301 	and.w	r3, r3, #1
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d1d8      	bne.n	8001cb2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000000 	.word	0x20000000
 8001d10:	431bde83 	.word	0x431bde83

08001d14 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d12e      	bne.n	8001d8c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f022 0201 	bic.w	r2, r2, #1
 8001d3c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d3e:	f7ff fbf5 	bl	800152c <HAL_GetTick>
 8001d42:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d44:	e01b      	b.n	8001d7e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d46:	f7ff fbf1 	bl	800152c <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d914      	bls.n	8001d7e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d10d      	bne.n	8001d7e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d66:	f043 0210 	orr.w	r2, r3, #16
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d72:	f043 0201 	orr.w	r2, r3, #1
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e007      	b.n	8001d8e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d0dc      	beq.n	8001d46 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
	...

08001d98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001da8:	4b0c      	ldr	r3, [pc, #48]	; (8001ddc <__NVIC_SetPriorityGrouping+0x44>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dae:	68ba      	ldr	r2, [r7, #8]
 8001db0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001db4:	4013      	ands	r3, r2
 8001db6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dca:	4a04      	ldr	r2, [pc, #16]	; (8001ddc <__NVIC_SetPriorityGrouping+0x44>)
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	60d3      	str	r3, [r2, #12]
}
 8001dd0:	bf00      	nop
 8001dd2:	3714      	adds	r7, #20
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bc80      	pop	{r7}
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001de4:	4b04      	ldr	r3, [pc, #16]	; (8001df8 <__NVIC_GetPriorityGrouping+0x18>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	0a1b      	lsrs	r3, r3, #8
 8001dea:	f003 0307 	and.w	r3, r3, #7
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bc80      	pop	{r7}
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	e000ed00 	.word	0xe000ed00

08001dfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	db0b      	blt.n	8001e26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
 8001e10:	f003 021f 	and.w	r2, r3, #31
 8001e14:	4906      	ldr	r1, [pc, #24]	; (8001e30 <__NVIC_EnableIRQ+0x34>)
 8001e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1a:	095b      	lsrs	r3, r3, #5
 8001e1c:	2001      	movs	r0, #1
 8001e1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bc80      	pop	{r7}
 8001e2e:	4770      	bx	lr
 8001e30:	e000e100 	.word	0xe000e100

08001e34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	6039      	str	r1, [r7, #0]
 8001e3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	db0a      	blt.n	8001e5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	490c      	ldr	r1, [pc, #48]	; (8001e80 <__NVIC_SetPriority+0x4c>)
 8001e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e52:	0112      	lsls	r2, r2, #4
 8001e54:	b2d2      	uxtb	r2, r2
 8001e56:	440b      	add	r3, r1
 8001e58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e5c:	e00a      	b.n	8001e74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	4908      	ldr	r1, [pc, #32]	; (8001e84 <__NVIC_SetPriority+0x50>)
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	3b04      	subs	r3, #4
 8001e6c:	0112      	lsls	r2, r2, #4
 8001e6e:	b2d2      	uxtb	r2, r2
 8001e70:	440b      	add	r3, r1
 8001e72:	761a      	strb	r2, [r3, #24]
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	e000e100 	.word	0xe000e100
 8001e84:	e000ed00 	.word	0xe000ed00

08001e88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b089      	sub	sp, #36	; 0x24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	f1c3 0307 	rsb	r3, r3, #7
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	bf28      	it	cs
 8001ea6:	2304      	movcs	r3, #4
 8001ea8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	3304      	adds	r3, #4
 8001eae:	2b06      	cmp	r3, #6
 8001eb0:	d902      	bls.n	8001eb8 <NVIC_EncodePriority+0x30>
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	3b03      	subs	r3, #3
 8001eb6:	e000      	b.n	8001eba <NVIC_EncodePriority+0x32>
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ebc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	43da      	mvns	r2, r3
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	401a      	ands	r2, r3
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ed0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eda:	43d9      	mvns	r1, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee0:	4313      	orrs	r3, r2
         );
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3724      	adds	r7, #36	; 0x24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr

08001eec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f7ff ff4f 	bl	8001d98 <__NVIC_SetPriorityGrouping>
}
 8001efa:	bf00      	nop
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b086      	sub	sp, #24
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	4603      	mov	r3, r0
 8001f0a:	60b9      	str	r1, [r7, #8]
 8001f0c:	607a      	str	r2, [r7, #4]
 8001f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f14:	f7ff ff64 	bl	8001de0 <__NVIC_GetPriorityGrouping>
 8001f18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	68b9      	ldr	r1, [r7, #8]
 8001f1e:	6978      	ldr	r0, [r7, #20]
 8001f20:	f7ff ffb2 	bl	8001e88 <NVIC_EncodePriority>
 8001f24:	4602      	mov	r2, r0
 8001f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f2a:	4611      	mov	r1, r2
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff ff81 	bl	8001e34 <__NVIC_SetPriority>
}
 8001f32:	bf00      	nop
 8001f34:	3718      	adds	r7, #24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b082      	sub	sp, #8
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	4603      	mov	r3, r0
 8001f42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff ff57 	bl	8001dfc <__NVIC_EnableIRQ>
}
 8001f4e:	bf00      	nop
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
	...

08001f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b08b      	sub	sp, #44	; 0x2c
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f62:	2300      	movs	r3, #0
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f66:	2300      	movs	r3, #0
 8001f68:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f6a:	e169      	b.n	8002240 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	69fa      	ldr	r2, [r7, #28]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	f040 8158 	bne.w	800223a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	4a9a      	ldr	r2, [pc, #616]	; (80021f8 <HAL_GPIO_Init+0x2a0>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d05e      	beq.n	8002052 <HAL_GPIO_Init+0xfa>
 8001f94:	4a98      	ldr	r2, [pc, #608]	; (80021f8 <HAL_GPIO_Init+0x2a0>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d875      	bhi.n	8002086 <HAL_GPIO_Init+0x12e>
 8001f9a:	4a98      	ldr	r2, [pc, #608]	; (80021fc <HAL_GPIO_Init+0x2a4>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d058      	beq.n	8002052 <HAL_GPIO_Init+0xfa>
 8001fa0:	4a96      	ldr	r2, [pc, #600]	; (80021fc <HAL_GPIO_Init+0x2a4>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d86f      	bhi.n	8002086 <HAL_GPIO_Init+0x12e>
 8001fa6:	4a96      	ldr	r2, [pc, #600]	; (8002200 <HAL_GPIO_Init+0x2a8>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d052      	beq.n	8002052 <HAL_GPIO_Init+0xfa>
 8001fac:	4a94      	ldr	r2, [pc, #592]	; (8002200 <HAL_GPIO_Init+0x2a8>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d869      	bhi.n	8002086 <HAL_GPIO_Init+0x12e>
 8001fb2:	4a94      	ldr	r2, [pc, #592]	; (8002204 <HAL_GPIO_Init+0x2ac>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d04c      	beq.n	8002052 <HAL_GPIO_Init+0xfa>
 8001fb8:	4a92      	ldr	r2, [pc, #584]	; (8002204 <HAL_GPIO_Init+0x2ac>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d863      	bhi.n	8002086 <HAL_GPIO_Init+0x12e>
 8001fbe:	4a92      	ldr	r2, [pc, #584]	; (8002208 <HAL_GPIO_Init+0x2b0>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d046      	beq.n	8002052 <HAL_GPIO_Init+0xfa>
 8001fc4:	4a90      	ldr	r2, [pc, #576]	; (8002208 <HAL_GPIO_Init+0x2b0>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d85d      	bhi.n	8002086 <HAL_GPIO_Init+0x12e>
 8001fca:	2b12      	cmp	r3, #18
 8001fcc:	d82a      	bhi.n	8002024 <HAL_GPIO_Init+0xcc>
 8001fce:	2b12      	cmp	r3, #18
 8001fd0:	d859      	bhi.n	8002086 <HAL_GPIO_Init+0x12e>
 8001fd2:	a201      	add	r2, pc, #4	; (adr r2, 8001fd8 <HAL_GPIO_Init+0x80>)
 8001fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd8:	08002053 	.word	0x08002053
 8001fdc:	0800202d 	.word	0x0800202d
 8001fe0:	0800203f 	.word	0x0800203f
 8001fe4:	08002081 	.word	0x08002081
 8001fe8:	08002087 	.word	0x08002087
 8001fec:	08002087 	.word	0x08002087
 8001ff0:	08002087 	.word	0x08002087
 8001ff4:	08002087 	.word	0x08002087
 8001ff8:	08002087 	.word	0x08002087
 8001ffc:	08002087 	.word	0x08002087
 8002000:	08002087 	.word	0x08002087
 8002004:	08002087 	.word	0x08002087
 8002008:	08002087 	.word	0x08002087
 800200c:	08002087 	.word	0x08002087
 8002010:	08002087 	.word	0x08002087
 8002014:	08002087 	.word	0x08002087
 8002018:	08002087 	.word	0x08002087
 800201c:	08002035 	.word	0x08002035
 8002020:	08002049 	.word	0x08002049
 8002024:	4a79      	ldr	r2, [pc, #484]	; (800220c <HAL_GPIO_Init+0x2b4>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d013      	beq.n	8002052 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800202a:	e02c      	b.n	8002086 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	623b      	str	r3, [r7, #32]
          break;
 8002032:	e029      	b.n	8002088 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	3304      	adds	r3, #4
 800203a:	623b      	str	r3, [r7, #32]
          break;
 800203c:	e024      	b.n	8002088 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	3308      	adds	r3, #8
 8002044:	623b      	str	r3, [r7, #32]
          break;
 8002046:	e01f      	b.n	8002088 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	330c      	adds	r3, #12
 800204e:	623b      	str	r3, [r7, #32]
          break;
 8002050:	e01a      	b.n	8002088 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d102      	bne.n	8002060 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800205a:	2304      	movs	r3, #4
 800205c:	623b      	str	r3, [r7, #32]
          break;
 800205e:	e013      	b.n	8002088 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d105      	bne.n	8002074 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002068:	2308      	movs	r3, #8
 800206a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	69fa      	ldr	r2, [r7, #28]
 8002070:	611a      	str	r2, [r3, #16]
          break;
 8002072:	e009      	b.n	8002088 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002074:	2308      	movs	r3, #8
 8002076:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	69fa      	ldr	r2, [r7, #28]
 800207c:	615a      	str	r2, [r3, #20]
          break;
 800207e:	e003      	b.n	8002088 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002080:	2300      	movs	r3, #0
 8002082:	623b      	str	r3, [r7, #32]
          break;
 8002084:	e000      	b.n	8002088 <HAL_GPIO_Init+0x130>
          break;
 8002086:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	2bff      	cmp	r3, #255	; 0xff
 800208c:	d801      	bhi.n	8002092 <HAL_GPIO_Init+0x13a>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	e001      	b.n	8002096 <HAL_GPIO_Init+0x13e>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	3304      	adds	r3, #4
 8002096:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	2bff      	cmp	r3, #255	; 0xff
 800209c:	d802      	bhi.n	80020a4 <HAL_GPIO_Init+0x14c>
 800209e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	e002      	b.n	80020aa <HAL_GPIO_Init+0x152>
 80020a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a6:	3b08      	subs	r3, #8
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	210f      	movs	r1, #15
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	fa01 f303 	lsl.w	r3, r1, r3
 80020b8:	43db      	mvns	r3, r3
 80020ba:	401a      	ands	r2, r3
 80020bc:	6a39      	ldr	r1, [r7, #32]
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	fa01 f303 	lsl.w	r3, r1, r3
 80020c4:	431a      	orrs	r2, r3
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f000 80b1 	beq.w	800223a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020d8:	4b4d      	ldr	r3, [pc, #308]	; (8002210 <HAL_GPIO_Init+0x2b8>)
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	4a4c      	ldr	r2, [pc, #304]	; (8002210 <HAL_GPIO_Init+0x2b8>)
 80020de:	f043 0301 	orr.w	r3, r3, #1
 80020e2:	6193      	str	r3, [r2, #24]
 80020e4:	4b4a      	ldr	r3, [pc, #296]	; (8002210 <HAL_GPIO_Init+0x2b8>)
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	60bb      	str	r3, [r7, #8]
 80020ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020f0:	4a48      	ldr	r2, [pc, #288]	; (8002214 <HAL_GPIO_Init+0x2bc>)
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	089b      	lsrs	r3, r3, #2
 80020f6:	3302      	adds	r3, #2
 80020f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002100:	f003 0303 	and.w	r3, r3, #3
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	220f      	movs	r2, #15
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	43db      	mvns	r3, r3
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	4013      	ands	r3, r2
 8002112:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a40      	ldr	r2, [pc, #256]	; (8002218 <HAL_GPIO_Init+0x2c0>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d013      	beq.n	8002144 <HAL_GPIO_Init+0x1ec>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a3f      	ldr	r2, [pc, #252]	; (800221c <HAL_GPIO_Init+0x2c4>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d00d      	beq.n	8002140 <HAL_GPIO_Init+0x1e8>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a3e      	ldr	r2, [pc, #248]	; (8002220 <HAL_GPIO_Init+0x2c8>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d007      	beq.n	800213c <HAL_GPIO_Init+0x1e4>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a3d      	ldr	r2, [pc, #244]	; (8002224 <HAL_GPIO_Init+0x2cc>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d101      	bne.n	8002138 <HAL_GPIO_Init+0x1e0>
 8002134:	2303      	movs	r3, #3
 8002136:	e006      	b.n	8002146 <HAL_GPIO_Init+0x1ee>
 8002138:	2304      	movs	r3, #4
 800213a:	e004      	b.n	8002146 <HAL_GPIO_Init+0x1ee>
 800213c:	2302      	movs	r3, #2
 800213e:	e002      	b.n	8002146 <HAL_GPIO_Init+0x1ee>
 8002140:	2301      	movs	r3, #1
 8002142:	e000      	b.n	8002146 <HAL_GPIO_Init+0x1ee>
 8002144:	2300      	movs	r3, #0
 8002146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002148:	f002 0203 	and.w	r2, r2, #3
 800214c:	0092      	lsls	r2, r2, #2
 800214e:	4093      	lsls	r3, r2
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	4313      	orrs	r3, r2
 8002154:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002156:	492f      	ldr	r1, [pc, #188]	; (8002214 <HAL_GPIO_Init+0x2bc>)
 8002158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215a:	089b      	lsrs	r3, r3, #2
 800215c:	3302      	adds	r3, #2
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d006      	beq.n	800217e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002170:	4b2d      	ldr	r3, [pc, #180]	; (8002228 <HAL_GPIO_Init+0x2d0>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	492c      	ldr	r1, [pc, #176]	; (8002228 <HAL_GPIO_Init+0x2d0>)
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	4313      	orrs	r3, r2
 800217a:	600b      	str	r3, [r1, #0]
 800217c:	e006      	b.n	800218c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800217e:	4b2a      	ldr	r3, [pc, #168]	; (8002228 <HAL_GPIO_Init+0x2d0>)
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	43db      	mvns	r3, r3
 8002186:	4928      	ldr	r1, [pc, #160]	; (8002228 <HAL_GPIO_Init+0x2d0>)
 8002188:	4013      	ands	r3, r2
 800218a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d006      	beq.n	80021a6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002198:	4b23      	ldr	r3, [pc, #140]	; (8002228 <HAL_GPIO_Init+0x2d0>)
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	4922      	ldr	r1, [pc, #136]	; (8002228 <HAL_GPIO_Init+0x2d0>)
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	604b      	str	r3, [r1, #4]
 80021a4:	e006      	b.n	80021b4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021a6:	4b20      	ldr	r3, [pc, #128]	; (8002228 <HAL_GPIO_Init+0x2d0>)
 80021a8:	685a      	ldr	r2, [r3, #4]
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	43db      	mvns	r3, r3
 80021ae:	491e      	ldr	r1, [pc, #120]	; (8002228 <HAL_GPIO_Init+0x2d0>)
 80021b0:	4013      	ands	r3, r2
 80021b2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d006      	beq.n	80021ce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021c0:	4b19      	ldr	r3, [pc, #100]	; (8002228 <HAL_GPIO_Init+0x2d0>)
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	4918      	ldr	r1, [pc, #96]	; (8002228 <HAL_GPIO_Init+0x2d0>)
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	608b      	str	r3, [r1, #8]
 80021cc:	e006      	b.n	80021dc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021ce:	4b16      	ldr	r3, [pc, #88]	; (8002228 <HAL_GPIO_Init+0x2d0>)
 80021d0:	689a      	ldr	r2, [r3, #8]
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	43db      	mvns	r3, r3
 80021d6:	4914      	ldr	r1, [pc, #80]	; (8002228 <HAL_GPIO_Init+0x2d0>)
 80021d8:	4013      	ands	r3, r2
 80021da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d021      	beq.n	800222c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021e8:	4b0f      	ldr	r3, [pc, #60]	; (8002228 <HAL_GPIO_Init+0x2d0>)
 80021ea:	68da      	ldr	r2, [r3, #12]
 80021ec:	490e      	ldr	r1, [pc, #56]	; (8002228 <HAL_GPIO_Init+0x2d0>)
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	60cb      	str	r3, [r1, #12]
 80021f4:	e021      	b.n	800223a <HAL_GPIO_Init+0x2e2>
 80021f6:	bf00      	nop
 80021f8:	10320000 	.word	0x10320000
 80021fc:	10310000 	.word	0x10310000
 8002200:	10220000 	.word	0x10220000
 8002204:	10210000 	.word	0x10210000
 8002208:	10120000 	.word	0x10120000
 800220c:	10110000 	.word	0x10110000
 8002210:	40021000 	.word	0x40021000
 8002214:	40010000 	.word	0x40010000
 8002218:	40010800 	.word	0x40010800
 800221c:	40010c00 	.word	0x40010c00
 8002220:	40011000 	.word	0x40011000
 8002224:	40011400 	.word	0x40011400
 8002228:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800222c:	4b0b      	ldr	r3, [pc, #44]	; (800225c <HAL_GPIO_Init+0x304>)
 800222e:	68da      	ldr	r2, [r3, #12]
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	43db      	mvns	r3, r3
 8002234:	4909      	ldr	r1, [pc, #36]	; (800225c <HAL_GPIO_Init+0x304>)
 8002236:	4013      	ands	r3, r2
 8002238:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800223a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223c:	3301      	adds	r3, #1
 800223e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002246:	fa22 f303 	lsr.w	r3, r2, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	f47f ae8e 	bne.w	8001f6c <HAL_GPIO_Init+0x14>
  }
}
 8002250:	bf00      	nop
 8002252:	bf00      	nop
 8002254:	372c      	adds	r7, #44	; 0x2c
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr
 800225c:	40010400 	.word	0x40010400

08002260 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	460b      	mov	r3, r1
 800226a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	887b      	ldrh	r3, [r7, #2]
 8002272:	4013      	ands	r3, r2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d002      	beq.n	800227e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002278:	2301      	movs	r3, #1
 800227a:	73fb      	strb	r3, [r7, #15]
 800227c:	e001      	b.n	8002282 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800227e:	2300      	movs	r3, #0
 8002280:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002282:	7bfb      	ldrb	r3, [r7, #15]
}
 8002284:	4618      	mov	r0, r3
 8002286:	3714      	adds	r7, #20
 8002288:	46bd      	mov	sp, r7
 800228a:	bc80      	pop	{r7}
 800228c:	4770      	bx	lr

0800228e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800228e:	b480      	push	{r7}
 8002290:	b083      	sub	sp, #12
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
 8002296:	460b      	mov	r3, r1
 8002298:	807b      	strh	r3, [r7, #2]
 800229a:	4613      	mov	r3, r2
 800229c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800229e:	787b      	ldrb	r3, [r7, #1]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d003      	beq.n	80022ac <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022a4:	887a      	ldrh	r2, [r7, #2]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80022aa:	e003      	b.n	80022b4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022ac:	887b      	ldrh	r3, [r7, #2]
 80022ae:	041a      	lsls	r2, r3, #16
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	611a      	str	r2, [r3, #16]
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bc80      	pop	{r7}
 80022bc:	4770      	bx	lr
	...

080022c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e272      	b.n	80027b8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f000 8087 	beq.w	80023ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022e0:	4b92      	ldr	r3, [pc, #584]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f003 030c 	and.w	r3, r3, #12
 80022e8:	2b04      	cmp	r3, #4
 80022ea:	d00c      	beq.n	8002306 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022ec:	4b8f      	ldr	r3, [pc, #572]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 030c 	and.w	r3, r3, #12
 80022f4:	2b08      	cmp	r3, #8
 80022f6:	d112      	bne.n	800231e <HAL_RCC_OscConfig+0x5e>
 80022f8:	4b8c      	ldr	r3, [pc, #560]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002304:	d10b      	bne.n	800231e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002306:	4b89      	ldr	r3, [pc, #548]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d06c      	beq.n	80023ec <HAL_RCC_OscConfig+0x12c>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d168      	bne.n	80023ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e24c      	b.n	80027b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002326:	d106      	bne.n	8002336 <HAL_RCC_OscConfig+0x76>
 8002328:	4b80      	ldr	r3, [pc, #512]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a7f      	ldr	r2, [pc, #508]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 800232e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002332:	6013      	str	r3, [r2, #0]
 8002334:	e02e      	b.n	8002394 <HAL_RCC_OscConfig+0xd4>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d10c      	bne.n	8002358 <HAL_RCC_OscConfig+0x98>
 800233e:	4b7b      	ldr	r3, [pc, #492]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a7a      	ldr	r2, [pc, #488]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 8002344:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002348:	6013      	str	r3, [r2, #0]
 800234a:	4b78      	ldr	r3, [pc, #480]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a77      	ldr	r2, [pc, #476]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 8002350:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002354:	6013      	str	r3, [r2, #0]
 8002356:	e01d      	b.n	8002394 <HAL_RCC_OscConfig+0xd4>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002360:	d10c      	bne.n	800237c <HAL_RCC_OscConfig+0xbc>
 8002362:	4b72      	ldr	r3, [pc, #456]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a71      	ldr	r2, [pc, #452]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 8002368:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	4b6f      	ldr	r3, [pc, #444]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a6e      	ldr	r2, [pc, #440]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 8002374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002378:	6013      	str	r3, [r2, #0]
 800237a:	e00b      	b.n	8002394 <HAL_RCC_OscConfig+0xd4>
 800237c:	4b6b      	ldr	r3, [pc, #428]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a6a      	ldr	r2, [pc, #424]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 8002382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002386:	6013      	str	r3, [r2, #0]
 8002388:	4b68      	ldr	r3, [pc, #416]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a67      	ldr	r2, [pc, #412]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 800238e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002392:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d013      	beq.n	80023c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239c:	f7ff f8c6 	bl	800152c <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023a4:	f7ff f8c2 	bl	800152c <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b64      	cmp	r3, #100	; 0x64
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e200      	b.n	80027b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b6:	4b5d      	ldr	r3, [pc, #372]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d0f0      	beq.n	80023a4 <HAL_RCC_OscConfig+0xe4>
 80023c2:	e014      	b.n	80023ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c4:	f7ff f8b2 	bl	800152c <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023cc:	f7ff f8ae 	bl	800152c <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b64      	cmp	r3, #100	; 0x64
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e1ec      	b.n	80027b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023de:	4b53      	ldr	r3, [pc, #332]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1f0      	bne.n	80023cc <HAL_RCC_OscConfig+0x10c>
 80023ea:	e000      	b.n	80023ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d063      	beq.n	80024c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023fa:	4b4c      	ldr	r3, [pc, #304]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f003 030c 	and.w	r3, r3, #12
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00b      	beq.n	800241e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002406:	4b49      	ldr	r3, [pc, #292]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f003 030c 	and.w	r3, r3, #12
 800240e:	2b08      	cmp	r3, #8
 8002410:	d11c      	bne.n	800244c <HAL_RCC_OscConfig+0x18c>
 8002412:	4b46      	ldr	r3, [pc, #280]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d116      	bne.n	800244c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800241e:	4b43      	ldr	r3, [pc, #268]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d005      	beq.n	8002436 <HAL_RCC_OscConfig+0x176>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d001      	beq.n	8002436 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e1c0      	b.n	80027b8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002436:	4b3d      	ldr	r3, [pc, #244]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	4939      	ldr	r1, [pc, #228]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 8002446:	4313      	orrs	r3, r2
 8002448:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800244a:	e03a      	b.n	80024c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d020      	beq.n	8002496 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002454:	4b36      	ldr	r3, [pc, #216]	; (8002530 <HAL_RCC_OscConfig+0x270>)
 8002456:	2201      	movs	r2, #1
 8002458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245a:	f7ff f867 	bl	800152c <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002460:	e008      	b.n	8002474 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002462:	f7ff f863 	bl	800152c <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e1a1      	b.n	80027b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002474:	4b2d      	ldr	r3, [pc, #180]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0f0      	beq.n	8002462 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002480:	4b2a      	ldr	r3, [pc, #168]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	4927      	ldr	r1, [pc, #156]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 8002490:	4313      	orrs	r3, r2
 8002492:	600b      	str	r3, [r1, #0]
 8002494:	e015      	b.n	80024c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002496:	4b26      	ldr	r3, [pc, #152]	; (8002530 <HAL_RCC_OscConfig+0x270>)
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249c:	f7ff f846 	bl	800152c <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024a4:	f7ff f842 	bl	800152c <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e180      	b.n	80027b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024b6:	4b1d      	ldr	r3, [pc, #116]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f0      	bne.n	80024a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0308 	and.w	r3, r3, #8
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d03a      	beq.n	8002544 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d019      	beq.n	800250a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024d6:	4b17      	ldr	r3, [pc, #92]	; (8002534 <HAL_RCC_OscConfig+0x274>)
 80024d8:	2201      	movs	r2, #1
 80024da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024dc:	f7ff f826 	bl	800152c <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024e4:	f7ff f822 	bl	800152c <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e160      	b.n	80027b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024f6:	4b0d      	ldr	r3, [pc, #52]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 80024f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d0f0      	beq.n	80024e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002502:	2001      	movs	r0, #1
 8002504:	f000 fb08 	bl	8002b18 <RCC_Delay>
 8002508:	e01c      	b.n	8002544 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800250a:	4b0a      	ldr	r3, [pc, #40]	; (8002534 <HAL_RCC_OscConfig+0x274>)
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002510:	f7ff f80c 	bl	800152c <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002516:	e00f      	b.n	8002538 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002518:	f7ff f808 	bl	800152c <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d908      	bls.n	8002538 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e146      	b.n	80027b8 <HAL_RCC_OscConfig+0x4f8>
 800252a:	bf00      	nop
 800252c:	40021000 	.word	0x40021000
 8002530:	42420000 	.word	0x42420000
 8002534:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002538:	4b92      	ldr	r3, [pc, #584]	; (8002784 <HAL_RCC_OscConfig+0x4c4>)
 800253a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1e9      	bne.n	8002518 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0304 	and.w	r3, r3, #4
 800254c:	2b00      	cmp	r3, #0
 800254e:	f000 80a6 	beq.w	800269e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002552:	2300      	movs	r3, #0
 8002554:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002556:	4b8b      	ldr	r3, [pc, #556]	; (8002784 <HAL_RCC_OscConfig+0x4c4>)
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10d      	bne.n	800257e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002562:	4b88      	ldr	r3, [pc, #544]	; (8002784 <HAL_RCC_OscConfig+0x4c4>)
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	4a87      	ldr	r2, [pc, #540]	; (8002784 <HAL_RCC_OscConfig+0x4c4>)
 8002568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800256c:	61d3      	str	r3, [r2, #28]
 800256e:	4b85      	ldr	r3, [pc, #532]	; (8002784 <HAL_RCC_OscConfig+0x4c4>)
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002576:	60bb      	str	r3, [r7, #8]
 8002578:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800257a:	2301      	movs	r3, #1
 800257c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800257e:	4b82      	ldr	r3, [pc, #520]	; (8002788 <HAL_RCC_OscConfig+0x4c8>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002586:	2b00      	cmp	r3, #0
 8002588:	d118      	bne.n	80025bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800258a:	4b7f      	ldr	r3, [pc, #508]	; (8002788 <HAL_RCC_OscConfig+0x4c8>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a7e      	ldr	r2, [pc, #504]	; (8002788 <HAL_RCC_OscConfig+0x4c8>)
 8002590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002594:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002596:	f7fe ffc9 	bl	800152c <HAL_GetTick>
 800259a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800259c:	e008      	b.n	80025b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800259e:	f7fe ffc5 	bl	800152c <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b64      	cmp	r3, #100	; 0x64
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e103      	b.n	80027b8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b0:	4b75      	ldr	r3, [pc, #468]	; (8002788 <HAL_RCC_OscConfig+0x4c8>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0f0      	beq.n	800259e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d106      	bne.n	80025d2 <HAL_RCC_OscConfig+0x312>
 80025c4:	4b6f      	ldr	r3, [pc, #444]	; (8002784 <HAL_RCC_OscConfig+0x4c4>)
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	4a6e      	ldr	r2, [pc, #440]	; (8002784 <HAL_RCC_OscConfig+0x4c4>)
 80025ca:	f043 0301 	orr.w	r3, r3, #1
 80025ce:	6213      	str	r3, [r2, #32]
 80025d0:	e02d      	b.n	800262e <HAL_RCC_OscConfig+0x36e>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d10c      	bne.n	80025f4 <HAL_RCC_OscConfig+0x334>
 80025da:	4b6a      	ldr	r3, [pc, #424]	; (8002784 <HAL_RCC_OscConfig+0x4c4>)
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	4a69      	ldr	r2, [pc, #420]	; (8002784 <HAL_RCC_OscConfig+0x4c4>)
 80025e0:	f023 0301 	bic.w	r3, r3, #1
 80025e4:	6213      	str	r3, [r2, #32]
 80025e6:	4b67      	ldr	r3, [pc, #412]	; (8002784 <HAL_RCC_OscConfig+0x4c4>)
 80025e8:	6a1b      	ldr	r3, [r3, #32]
 80025ea:	4a66      	ldr	r2, [pc, #408]	; (8002784 <HAL_RCC_OscConfig+0x4c4>)
 80025ec:	f023 0304 	bic.w	r3, r3, #4
 80025f0:	6213      	str	r3, [r2, #32]
 80025f2:	e01c      	b.n	800262e <HAL_RCC_OscConfig+0x36e>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	2b05      	cmp	r3, #5
 80025fa:	d10c      	bne.n	8002616 <HAL_RCC_OscConfig+0x356>
 80025fc:	4b61      	ldr	r3, [pc, #388]	; (8002784 <HAL_RCC_OscConfig+0x4c4>)
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	4a60      	ldr	r2, [pc, #384]	; (8002784 <HAL_RCC_OscConfig+0x4c4>)
 8002602:	f043 0304 	orr.w	r3, r3, #4
 8002606:	6213      	str	r3, [r2, #32]
 8002608:	4b5e      	ldr	r3, [pc, #376]	; (8002784 <HAL_RCC_OscConfig+0x4c4>)
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	4a5d      	ldr	r2, [pc, #372]	; (8002784 <HAL_RCC_OscConfig+0x4c4>)
 800260e:	f043 0301 	orr.w	r3, r3, #1
 8002612:	6213      	str	r3, [r2, #32]
 8002614:	e00b      	b.n	800262e <HAL_RCC_OscConfig+0x36e>
 8002616:	4b5b      	ldr	r3, [pc, #364]	; (8002784 <HAL_RCC_OscConfig+0x4c4>)
 8002618:	6a1b      	ldr	r3, [r3, #32]
 800261a:	4a5a      	ldr	r2, [pc, #360]	; (8002784 <HAL_RCC_OscConfig+0x4c4>)
 800261c:	f023 0301 	bic.w	r3, r3, #1
 8002620:	6213      	str	r3, [r2, #32]
 8002622:	4b58      	ldr	r3, [pc, #352]	; (8002784 <HAL_RCC_OscConfig+0x4c4>)
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	4a57      	ldr	r2, [pc, #348]	; (8002784 <HAL_RCC_OscConfig+0x4c4>)
 8002628:	f023 0304 	bic.w	r3, r3, #4
 800262c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d015      	beq.n	8002662 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002636:	f7fe ff79 	bl	800152c <HAL_GetTick>
 800263a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800263c:	e00a      	b.n	8002654 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800263e:	f7fe ff75 	bl	800152c <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	f241 3288 	movw	r2, #5000	; 0x1388
 800264c:	4293      	cmp	r3, r2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e0b1      	b.n	80027b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002654:	4b4b      	ldr	r3, [pc, #300]	; (8002784 <HAL_RCC_OscConfig+0x4c4>)
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d0ee      	beq.n	800263e <HAL_RCC_OscConfig+0x37e>
 8002660:	e014      	b.n	800268c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002662:	f7fe ff63 	bl	800152c <HAL_GetTick>
 8002666:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002668:	e00a      	b.n	8002680 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800266a:	f7fe ff5f 	bl	800152c <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	f241 3288 	movw	r2, #5000	; 0x1388
 8002678:	4293      	cmp	r3, r2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e09b      	b.n	80027b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002680:	4b40      	ldr	r3, [pc, #256]	; (8002784 <HAL_RCC_OscConfig+0x4c4>)
 8002682:	6a1b      	ldr	r3, [r3, #32]
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1ee      	bne.n	800266a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800268c:	7dfb      	ldrb	r3, [r7, #23]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d105      	bne.n	800269e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002692:	4b3c      	ldr	r3, [pc, #240]	; (8002784 <HAL_RCC_OscConfig+0x4c4>)
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	4a3b      	ldr	r2, [pc, #236]	; (8002784 <HAL_RCC_OscConfig+0x4c4>)
 8002698:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800269c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 8087 	beq.w	80027b6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026a8:	4b36      	ldr	r3, [pc, #216]	; (8002784 <HAL_RCC_OscConfig+0x4c4>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f003 030c 	and.w	r3, r3, #12
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	d061      	beq.n	8002778 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d146      	bne.n	800274a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026bc:	4b33      	ldr	r3, [pc, #204]	; (800278c <HAL_RCC_OscConfig+0x4cc>)
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c2:	f7fe ff33 	bl	800152c <HAL_GetTick>
 80026c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026c8:	e008      	b.n	80026dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ca:	f7fe ff2f 	bl	800152c <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e06d      	b.n	80027b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026dc:	4b29      	ldr	r3, [pc, #164]	; (8002784 <HAL_RCC_OscConfig+0x4c4>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1f0      	bne.n	80026ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026f0:	d108      	bne.n	8002704 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026f2:	4b24      	ldr	r3, [pc, #144]	; (8002784 <HAL_RCC_OscConfig+0x4c4>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	4921      	ldr	r1, [pc, #132]	; (8002784 <HAL_RCC_OscConfig+0x4c4>)
 8002700:	4313      	orrs	r3, r2
 8002702:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002704:	4b1f      	ldr	r3, [pc, #124]	; (8002784 <HAL_RCC_OscConfig+0x4c4>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a19      	ldr	r1, [r3, #32]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002714:	430b      	orrs	r3, r1
 8002716:	491b      	ldr	r1, [pc, #108]	; (8002784 <HAL_RCC_OscConfig+0x4c4>)
 8002718:	4313      	orrs	r3, r2
 800271a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800271c:	4b1b      	ldr	r3, [pc, #108]	; (800278c <HAL_RCC_OscConfig+0x4cc>)
 800271e:	2201      	movs	r2, #1
 8002720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002722:	f7fe ff03 	bl	800152c <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002728:	e008      	b.n	800273c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800272a:	f7fe feff 	bl	800152c <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e03d      	b.n	80027b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800273c:	4b11      	ldr	r3, [pc, #68]	; (8002784 <HAL_RCC_OscConfig+0x4c4>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d0f0      	beq.n	800272a <HAL_RCC_OscConfig+0x46a>
 8002748:	e035      	b.n	80027b6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800274a:	4b10      	ldr	r3, [pc, #64]	; (800278c <HAL_RCC_OscConfig+0x4cc>)
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002750:	f7fe feec 	bl	800152c <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002758:	f7fe fee8 	bl	800152c <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e026      	b.n	80027b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800276a:	4b06      	ldr	r3, [pc, #24]	; (8002784 <HAL_RCC_OscConfig+0x4c4>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1f0      	bne.n	8002758 <HAL_RCC_OscConfig+0x498>
 8002776:	e01e      	b.n	80027b6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	69db      	ldr	r3, [r3, #28]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d107      	bne.n	8002790 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e019      	b.n	80027b8 <HAL_RCC_OscConfig+0x4f8>
 8002784:	40021000 	.word	0x40021000
 8002788:	40007000 	.word	0x40007000
 800278c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002790:	4b0b      	ldr	r3, [pc, #44]	; (80027c0 <HAL_RCC_OscConfig+0x500>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a1b      	ldr	r3, [r3, #32]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d106      	bne.n	80027b2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d001      	beq.n	80027b6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e000      	b.n	80027b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3718      	adds	r7, #24
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40021000 	.word	0x40021000

080027c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e0d0      	b.n	800297a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027d8:	4b6a      	ldr	r3, [pc, #424]	; (8002984 <HAL_RCC_ClockConfig+0x1c0>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0307 	and.w	r3, r3, #7
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d910      	bls.n	8002808 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027e6:	4b67      	ldr	r3, [pc, #412]	; (8002984 <HAL_RCC_ClockConfig+0x1c0>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f023 0207 	bic.w	r2, r3, #7
 80027ee:	4965      	ldr	r1, [pc, #404]	; (8002984 <HAL_RCC_ClockConfig+0x1c0>)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027f6:	4b63      	ldr	r3, [pc, #396]	; (8002984 <HAL_RCC_ClockConfig+0x1c0>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0307 	and.w	r3, r3, #7
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	429a      	cmp	r2, r3
 8002802:	d001      	beq.n	8002808 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e0b8      	b.n	800297a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d020      	beq.n	8002856 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0304 	and.w	r3, r3, #4
 800281c:	2b00      	cmp	r3, #0
 800281e:	d005      	beq.n	800282c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002820:	4b59      	ldr	r3, [pc, #356]	; (8002988 <HAL_RCC_ClockConfig+0x1c4>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	4a58      	ldr	r2, [pc, #352]	; (8002988 <HAL_RCC_ClockConfig+0x1c4>)
 8002826:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800282a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0308 	and.w	r3, r3, #8
 8002834:	2b00      	cmp	r3, #0
 8002836:	d005      	beq.n	8002844 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002838:	4b53      	ldr	r3, [pc, #332]	; (8002988 <HAL_RCC_ClockConfig+0x1c4>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	4a52      	ldr	r2, [pc, #328]	; (8002988 <HAL_RCC_ClockConfig+0x1c4>)
 800283e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002842:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002844:	4b50      	ldr	r3, [pc, #320]	; (8002988 <HAL_RCC_ClockConfig+0x1c4>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	494d      	ldr	r1, [pc, #308]	; (8002988 <HAL_RCC_ClockConfig+0x1c4>)
 8002852:	4313      	orrs	r3, r2
 8002854:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b00      	cmp	r3, #0
 8002860:	d040      	beq.n	80028e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d107      	bne.n	800287a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800286a:	4b47      	ldr	r3, [pc, #284]	; (8002988 <HAL_RCC_ClockConfig+0x1c4>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d115      	bne.n	80028a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e07f      	b.n	800297a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	2b02      	cmp	r3, #2
 8002880:	d107      	bne.n	8002892 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002882:	4b41      	ldr	r3, [pc, #260]	; (8002988 <HAL_RCC_ClockConfig+0x1c4>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d109      	bne.n	80028a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e073      	b.n	800297a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002892:	4b3d      	ldr	r3, [pc, #244]	; (8002988 <HAL_RCC_ClockConfig+0x1c4>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e06b      	b.n	800297a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028a2:	4b39      	ldr	r3, [pc, #228]	; (8002988 <HAL_RCC_ClockConfig+0x1c4>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f023 0203 	bic.w	r2, r3, #3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	4936      	ldr	r1, [pc, #216]	; (8002988 <HAL_RCC_ClockConfig+0x1c4>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028b4:	f7fe fe3a 	bl	800152c <HAL_GetTick>
 80028b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ba:	e00a      	b.n	80028d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028bc:	f7fe fe36 	bl	800152c <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e053      	b.n	800297a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028d2:	4b2d      	ldr	r3, [pc, #180]	; (8002988 <HAL_RCC_ClockConfig+0x1c4>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f003 020c 	and.w	r2, r3, #12
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d1eb      	bne.n	80028bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028e4:	4b27      	ldr	r3, [pc, #156]	; (8002984 <HAL_RCC_ClockConfig+0x1c0>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d210      	bcs.n	8002914 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f2:	4b24      	ldr	r3, [pc, #144]	; (8002984 <HAL_RCC_ClockConfig+0x1c0>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f023 0207 	bic.w	r2, r3, #7
 80028fa:	4922      	ldr	r1, [pc, #136]	; (8002984 <HAL_RCC_ClockConfig+0x1c0>)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	4313      	orrs	r3, r2
 8002900:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002902:	4b20      	ldr	r3, [pc, #128]	; (8002984 <HAL_RCC_ClockConfig+0x1c0>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0307 	and.w	r3, r3, #7
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	429a      	cmp	r2, r3
 800290e:	d001      	beq.n	8002914 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e032      	b.n	800297a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0304 	and.w	r3, r3, #4
 800291c:	2b00      	cmp	r3, #0
 800291e:	d008      	beq.n	8002932 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002920:	4b19      	ldr	r3, [pc, #100]	; (8002988 <HAL_RCC_ClockConfig+0x1c4>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	4916      	ldr	r1, [pc, #88]	; (8002988 <HAL_RCC_ClockConfig+0x1c4>)
 800292e:	4313      	orrs	r3, r2
 8002930:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0308 	and.w	r3, r3, #8
 800293a:	2b00      	cmp	r3, #0
 800293c:	d009      	beq.n	8002952 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800293e:	4b12      	ldr	r3, [pc, #72]	; (8002988 <HAL_RCC_ClockConfig+0x1c4>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	490e      	ldr	r1, [pc, #56]	; (8002988 <HAL_RCC_ClockConfig+0x1c4>)
 800294e:	4313      	orrs	r3, r2
 8002950:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002952:	f000 f821 	bl	8002998 <HAL_RCC_GetSysClockFreq>
 8002956:	4602      	mov	r2, r0
 8002958:	4b0b      	ldr	r3, [pc, #44]	; (8002988 <HAL_RCC_ClockConfig+0x1c4>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	091b      	lsrs	r3, r3, #4
 800295e:	f003 030f 	and.w	r3, r3, #15
 8002962:	490a      	ldr	r1, [pc, #40]	; (800298c <HAL_RCC_ClockConfig+0x1c8>)
 8002964:	5ccb      	ldrb	r3, [r1, r3]
 8002966:	fa22 f303 	lsr.w	r3, r2, r3
 800296a:	4a09      	ldr	r2, [pc, #36]	; (8002990 <HAL_RCC_ClockConfig+0x1cc>)
 800296c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800296e:	4b09      	ldr	r3, [pc, #36]	; (8002994 <HAL_RCC_ClockConfig+0x1d0>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f7fe fcea 	bl	800134c <HAL_InitTick>

  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	40022000 	.word	0x40022000
 8002988:	40021000 	.word	0x40021000
 800298c:	080060ac 	.word	0x080060ac
 8002990:	20000000 	.word	0x20000000
 8002994:	20000004 	.word	0x20000004

08002998 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002998:	b490      	push	{r4, r7}
 800299a:	b08a      	sub	sp, #40	; 0x28
 800299c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800299e:	4b29      	ldr	r3, [pc, #164]	; (8002a44 <HAL_RCC_GetSysClockFreq+0xac>)
 80029a0:	1d3c      	adds	r4, r7, #4
 80029a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80029a8:	f240 2301 	movw	r3, #513	; 0x201
 80029ac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029ae:	2300      	movs	r3, #0
 80029b0:	61fb      	str	r3, [r7, #28]
 80029b2:	2300      	movs	r3, #0
 80029b4:	61bb      	str	r3, [r7, #24]
 80029b6:	2300      	movs	r3, #0
 80029b8:	627b      	str	r3, [r7, #36]	; 0x24
 80029ba:	2300      	movs	r3, #0
 80029bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80029be:	2300      	movs	r3, #0
 80029c0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80029c2:	4b21      	ldr	r3, [pc, #132]	; (8002a48 <HAL_RCC_GetSysClockFreq+0xb0>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	f003 030c 	and.w	r3, r3, #12
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	d002      	beq.n	80029d8 <HAL_RCC_GetSysClockFreq+0x40>
 80029d2:	2b08      	cmp	r3, #8
 80029d4:	d003      	beq.n	80029de <HAL_RCC_GetSysClockFreq+0x46>
 80029d6:	e02b      	b.n	8002a30 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029d8:	4b1c      	ldr	r3, [pc, #112]	; (8002a4c <HAL_RCC_GetSysClockFreq+0xb4>)
 80029da:	623b      	str	r3, [r7, #32]
      break;
 80029dc:	e02b      	b.n	8002a36 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	0c9b      	lsrs	r3, r3, #18
 80029e2:	f003 030f 	and.w	r3, r3, #15
 80029e6:	3328      	adds	r3, #40	; 0x28
 80029e8:	443b      	add	r3, r7
 80029ea:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80029ee:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d012      	beq.n	8002a20 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029fa:	4b13      	ldr	r3, [pc, #76]	; (8002a48 <HAL_RCC_GetSysClockFreq+0xb0>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	0c5b      	lsrs	r3, r3, #17
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	3328      	adds	r3, #40	; 0x28
 8002a06:	443b      	add	r3, r7
 8002a08:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002a0c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	4a0e      	ldr	r2, [pc, #56]	; (8002a4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a12:	fb03 f202 	mul.w	r2, r3, r2
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a1e:	e004      	b.n	8002a2a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	4a0b      	ldr	r2, [pc, #44]	; (8002a50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a24:	fb02 f303 	mul.w	r3, r2, r3
 8002a28:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2c:	623b      	str	r3, [r7, #32]
      break;
 8002a2e:	e002      	b.n	8002a36 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a30:	4b06      	ldr	r3, [pc, #24]	; (8002a4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a32:	623b      	str	r3, [r7, #32]
      break;
 8002a34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a36:	6a3b      	ldr	r3, [r7, #32]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3728      	adds	r7, #40	; 0x28
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bc90      	pop	{r4, r7}
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	08005f60 	.word	0x08005f60
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	007a1200 	.word	0x007a1200
 8002a50:	003d0900 	.word	0x003d0900

08002a54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a58:	4b02      	ldr	r3, [pc, #8]	; (8002a64 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr
 8002a64:	20000000 	.word	0x20000000

08002a68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a6c:	f7ff fff2 	bl	8002a54 <HAL_RCC_GetHCLKFreq>
 8002a70:	4602      	mov	r2, r0
 8002a72:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	0a1b      	lsrs	r3, r3, #8
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	4903      	ldr	r1, [pc, #12]	; (8002a8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a7e:	5ccb      	ldrb	r3, [r1, r3]
 8002a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	080060bc 	.word	0x080060bc

08002a90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a94:	f7ff ffde 	bl	8002a54 <HAL_RCC_GetHCLKFreq>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	0adb      	lsrs	r3, r3, #11
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	4903      	ldr	r1, [pc, #12]	; (8002ab4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aa6:	5ccb      	ldrb	r3, [r1, r3]
 8002aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	080060bc 	.word	0x080060bc

08002ab8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	220f      	movs	r2, #15
 8002ac6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ac8:	4b11      	ldr	r3, [pc, #68]	; (8002b10 <HAL_RCC_GetClockConfig+0x58>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f003 0203 	and.w	r2, r3, #3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002ad4:	4b0e      	ldr	r3, [pc, #56]	; (8002b10 <HAL_RCC_GetClockConfig+0x58>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002ae0:	4b0b      	ldr	r3, [pc, #44]	; (8002b10 <HAL_RCC_GetClockConfig+0x58>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002aec:	4b08      	ldr	r3, [pc, #32]	; (8002b10 <HAL_RCC_GetClockConfig+0x58>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	08db      	lsrs	r3, r3, #3
 8002af2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002afa:	4b06      	ldr	r3, [pc, #24]	; (8002b14 <HAL_RCC_GetClockConfig+0x5c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0207 	and.w	r2, r3, #7
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002b06:	bf00      	nop
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bc80      	pop	{r7}
 8002b0e:	4770      	bx	lr
 8002b10:	40021000 	.word	0x40021000
 8002b14:	40022000 	.word	0x40022000

08002b18 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b20:	4b0a      	ldr	r3, [pc, #40]	; (8002b4c <RCC_Delay+0x34>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a0a      	ldr	r2, [pc, #40]	; (8002b50 <RCC_Delay+0x38>)
 8002b26:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2a:	0a5b      	lsrs	r3, r3, #9
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	fb02 f303 	mul.w	r3, r2, r3
 8002b32:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b34:	bf00      	nop
  }
  while (Delay --);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	1e5a      	subs	r2, r3, #1
 8002b3a:	60fa      	str	r2, [r7, #12]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1f9      	bne.n	8002b34 <RCC_Delay+0x1c>
}
 8002b40:	bf00      	nop
 8002b42:	bf00      	nop
 8002b44:	3714      	adds	r7, #20
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bc80      	pop	{r7}
 8002b4a:	4770      	bx	lr
 8002b4c:	20000000 	.word	0x20000000
 8002b50:	10624dd3 	.word	0x10624dd3

08002b54 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	613b      	str	r3, [r7, #16]
 8002b60:	2300      	movs	r3, #0
 8002b62:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d07d      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002b70:	2300      	movs	r3, #0
 8002b72:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b74:	4b4f      	ldr	r3, [pc, #316]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b76:	69db      	ldr	r3, [r3, #28]
 8002b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10d      	bne.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b80:	4b4c      	ldr	r3, [pc, #304]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b82:	69db      	ldr	r3, [r3, #28]
 8002b84:	4a4b      	ldr	r2, [pc, #300]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b8a:	61d3      	str	r3, [r2, #28]
 8002b8c:	4b49      	ldr	r3, [pc, #292]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b8e:	69db      	ldr	r3, [r3, #28]
 8002b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b94:	60bb      	str	r3, [r7, #8]
 8002b96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b9c:	4b46      	ldr	r3, [pc, #280]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d118      	bne.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ba8:	4b43      	ldr	r3, [pc, #268]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a42      	ldr	r2, [pc, #264]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bb2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bb4:	f7fe fcba 	bl	800152c <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bba:	e008      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bbc:	f7fe fcb6 	bl	800152c <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b64      	cmp	r3, #100	; 0x64
 8002bc8:	d901      	bls.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e06d      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bce:	4b3a      	ldr	r3, [pc, #232]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d0f0      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bda:	4b36      	ldr	r3, [pc, #216]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002be2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d02e      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d027      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bf8:	4b2e      	ldr	r3, [pc, #184]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c00:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c02:	4b2e      	ldr	r3, [pc, #184]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c04:	2201      	movs	r2, #1
 8002c06:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c08:	4b2c      	ldr	r3, [pc, #176]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c0e:	4a29      	ldr	r2, [pc, #164]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d014      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1e:	f7fe fc85 	bl	800152c <HAL_GetTick>
 8002c22:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c24:	e00a      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c26:	f7fe fc81 	bl	800152c <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e036      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c3c:	4b1d      	ldr	r3, [pc, #116]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0ee      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c48:	4b1a      	ldr	r3, [pc, #104]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c4a:	6a1b      	ldr	r3, [r3, #32]
 8002c4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	4917      	ldr	r1, [pc, #92]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c5a:	7dfb      	ldrb	r3, [r7, #23]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d105      	bne.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c60:	4b14      	ldr	r3, [pc, #80]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c62:	69db      	ldr	r3, [r3, #28]
 8002c64:	4a13      	ldr	r2, [pc, #76]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c6a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d008      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c78:	4b0e      	ldr	r3, [pc, #56]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	490b      	ldr	r1, [pc, #44]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0310 	and.w	r3, r3, #16
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d008      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c96:	4b07      	ldr	r3, [pc, #28]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	4904      	ldr	r1, [pc, #16]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3718      	adds	r7, #24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	40007000 	.word	0x40007000
 8002cbc:	42420440 	.word	0x42420440

08002cc0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002cc0:	b590      	push	{r4, r7, lr}
 8002cc2:	b08d      	sub	sp, #52	; 0x34
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002cc8:	4b58      	ldr	r3, [pc, #352]	; (8002e2c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002cca:	f107 040c 	add.w	r4, r7, #12
 8002cce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002cd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002cd4:	f240 2301 	movw	r3, #513	; 0x201
 8002cd8:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	627b      	str	r3, [r7, #36]	; 0x24
 8002cde:	2300      	movs	r3, #0
 8002ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61fb      	str	r3, [r7, #28]
 8002cea:	2300      	movs	r3, #0
 8002cec:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b10      	cmp	r3, #16
 8002cf2:	d00a      	beq.n	8002d0a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2b10      	cmp	r3, #16
 8002cf8:	f200 808e 	bhi.w	8002e18 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d049      	beq.n	8002d96 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d079      	beq.n	8002dfc <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002d08:	e086      	b.n	8002e18 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8002d0a:	4b49      	ldr	r3, [pc, #292]	; (8002e30 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002d10:	4b47      	ldr	r3, [pc, #284]	; (8002e30 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d07f      	beq.n	8002e1c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	0c9b      	lsrs	r3, r3, #18
 8002d20:	f003 030f 	and.w	r3, r3, #15
 8002d24:	3330      	adds	r3, #48	; 0x30
 8002d26:	443b      	add	r3, r7
 8002d28:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002d2c:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d017      	beq.n	8002d68 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d38:	4b3d      	ldr	r3, [pc, #244]	; (8002e30 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	0c5b      	lsrs	r3, r3, #17
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	3330      	adds	r3, #48	; 0x30
 8002d44:	443b      	add	r3, r7
 8002d46:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002d4a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00d      	beq.n	8002d72 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002d56:	4a37      	ldr	r2, [pc, #220]	; (8002e34 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d5e:	6a3b      	ldr	r3, [r7, #32]
 8002d60:	fb02 f303 	mul.w	r3, r2, r3
 8002d64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d66:	e004      	b.n	8002d72 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d68:	6a3b      	ldr	r3, [r7, #32]
 8002d6a:	4a33      	ldr	r2, [pc, #204]	; (8002e38 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002d6c:	fb02 f303 	mul.w	r3, r2, r3
 8002d70:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002d72:	4b2f      	ldr	r3, [pc, #188]	; (8002e30 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d7e:	d102      	bne.n	8002d86 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8002d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d82:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002d84:	e04a      	b.n	8002e1c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8002d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	4a2c      	ldr	r2, [pc, #176]	; (8002e3c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8002d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d90:	085b      	lsrs	r3, r3, #1
 8002d92:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002d94:	e042      	b.n	8002e1c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8002d96:	4b26      	ldr	r3, [pc, #152]	; (8002e30 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002da2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002da6:	d108      	bne.n	8002dba <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8002db2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002db6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002db8:	e01f      	b.n	8002dfa <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dc4:	d109      	bne.n	8002dda <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8002dc6:	4b1a      	ldr	r3, [pc, #104]	; (8002e30 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d003      	beq.n	8002dda <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8002dd2:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002dd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dd8:	e00f      	b.n	8002dfa <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002de0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002de4:	d11c      	bne.n	8002e20 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8002de6:	4b12      	ldr	r3, [pc, #72]	; (8002e30 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d016      	beq.n	8002e20 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8002df2:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002df6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002df8:	e012      	b.n	8002e20 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8002dfa:	e011      	b.n	8002e20 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002dfc:	f7ff fe48 	bl	8002a90 <HAL_RCC_GetPCLK2Freq>
 8002e00:	4602      	mov	r2, r0
 8002e02:	4b0b      	ldr	r3, [pc, #44]	; (8002e30 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	0b9b      	lsrs	r3, r3, #14
 8002e08:	f003 0303 	and.w	r3, r3, #3
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e14:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002e16:	e004      	b.n	8002e22 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002e18:	bf00      	nop
 8002e1a:	e002      	b.n	8002e22 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002e1c:	bf00      	nop
 8002e1e:	e000      	b.n	8002e22 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002e20:	bf00      	nop
    }
  }
  return (frequency);
 8002e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3734      	adds	r7, #52	; 0x34
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd90      	pop	{r4, r7, pc}
 8002e2c:	08005f70 	.word	0x08005f70
 8002e30:	40021000 	.word	0x40021000
 8002e34:	007a1200 	.word	0x007a1200
 8002e38:	003d0900 	.word	0x003d0900
 8002e3c:	aaaaaaab 	.word	0xaaaaaaab

08002e40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e041      	b.n	8002ed6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d106      	bne.n	8002e6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f839 	bl	8002ede <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2202      	movs	r2, #2
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3304      	adds	r3, #4
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4610      	mov	r0, r2
 8002e80:	f000 f9b4 	bl	80031ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bc80      	pop	{r7}
 8002eee:	4770      	bx	lr

08002ef0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d001      	beq.n	8002f08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e03a      	b.n	8002f7e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68da      	ldr	r2, [r3, #12]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f042 0201 	orr.w	r2, r2, #1
 8002f1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a18      	ldr	r2, [pc, #96]	; (8002f88 <HAL_TIM_Base_Start_IT+0x98>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d00e      	beq.n	8002f48 <HAL_TIM_Base_Start_IT+0x58>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f32:	d009      	beq.n	8002f48 <HAL_TIM_Base_Start_IT+0x58>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a14      	ldr	r2, [pc, #80]	; (8002f8c <HAL_TIM_Base_Start_IT+0x9c>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d004      	beq.n	8002f48 <HAL_TIM_Base_Start_IT+0x58>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a13      	ldr	r2, [pc, #76]	; (8002f90 <HAL_TIM_Base_Start_IT+0xa0>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d111      	bne.n	8002f6c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 0307 	and.w	r3, r3, #7
 8002f52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2b06      	cmp	r3, #6
 8002f58:	d010      	beq.n	8002f7c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f042 0201 	orr.w	r2, r2, #1
 8002f68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f6a:	e007      	b.n	8002f7c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0201 	orr.w	r2, r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bc80      	pop	{r7}
 8002f86:	4770      	bx	lr
 8002f88:	40012c00 	.word	0x40012c00
 8002f8c:	40000400 	.word	0x40000400
 8002f90:	40000800 	.word	0x40000800

08002f94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d122      	bne.n	8002ff0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d11b      	bne.n	8002ff0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f06f 0202 	mvn.w	r2, #2
 8002fc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	f003 0303 	and.w	r3, r3, #3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f8ed 	bl	80031b6 <HAL_TIM_IC_CaptureCallback>
 8002fdc:	e005      	b.n	8002fea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f8e0 	bl	80031a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 f8ef 	bl	80031c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	f003 0304 	and.w	r3, r3, #4
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	d122      	bne.n	8003044 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	2b04      	cmp	r3, #4
 800300a:	d11b      	bne.n	8003044 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f06f 0204 	mvn.w	r2, #4
 8003014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2202      	movs	r2, #2
 800301a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f8c3 	bl	80031b6 <HAL_TIM_IC_CaptureCallback>
 8003030:	e005      	b.n	800303e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 f8b6 	bl	80031a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 f8c5 	bl	80031c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	f003 0308 	and.w	r3, r3, #8
 800304e:	2b08      	cmp	r3, #8
 8003050:	d122      	bne.n	8003098 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	f003 0308 	and.w	r3, r3, #8
 800305c:	2b08      	cmp	r3, #8
 800305e:	d11b      	bne.n	8003098 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f06f 0208 	mvn.w	r2, #8
 8003068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2204      	movs	r2, #4
 800306e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	f003 0303 	and.w	r3, r3, #3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 f899 	bl	80031b6 <HAL_TIM_IC_CaptureCallback>
 8003084:	e005      	b.n	8003092 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 f88c 	bl	80031a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f89b 	bl	80031c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	f003 0310 	and.w	r3, r3, #16
 80030a2:	2b10      	cmp	r3, #16
 80030a4:	d122      	bne.n	80030ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	f003 0310 	and.w	r3, r3, #16
 80030b0:	2b10      	cmp	r3, #16
 80030b2:	d11b      	bne.n	80030ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f06f 0210 	mvn.w	r2, #16
 80030bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2208      	movs	r2, #8
 80030c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d003      	beq.n	80030da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 f86f 	bl	80031b6 <HAL_TIM_IC_CaptureCallback>
 80030d8:	e005      	b.n	80030e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 f862 	bl	80031a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 f871 	bl	80031c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d10e      	bne.n	8003118 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	2b01      	cmp	r3, #1
 8003106:	d107      	bne.n	8003118 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f06f 0201 	mvn.w	r2, #1
 8003110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f7fe f868 	bl	80011e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003122:	2b80      	cmp	r3, #128	; 0x80
 8003124:	d10e      	bne.n	8003144 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003130:	2b80      	cmp	r3, #128	; 0x80
 8003132:	d107      	bne.n	8003144 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800313c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 f8bf 	bl	80032c2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800314e:	2b40      	cmp	r3, #64	; 0x40
 8003150:	d10e      	bne.n	8003170 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800315c:	2b40      	cmp	r3, #64	; 0x40
 800315e:	d107      	bne.n	8003170 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f835 	bl	80031da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	f003 0320 	and.w	r3, r3, #32
 800317a:	2b20      	cmp	r3, #32
 800317c:	d10e      	bne.n	800319c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	f003 0320 	and.w	r3, r3, #32
 8003188:	2b20      	cmp	r3, #32
 800318a:	d107      	bne.n	800319c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f06f 0220 	mvn.w	r2, #32
 8003194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 f88a 	bl	80032b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800319c:	bf00      	nop
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bc80      	pop	{r7}
 80031b4:	4770      	bx	lr

080031b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b083      	sub	sp, #12
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031be:	bf00      	nop
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bc80      	pop	{r7}
 80031c6:	4770      	bx	lr

080031c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bc80      	pop	{r7}
 80031d8:	4770      	bx	lr

080031da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031da:	b480      	push	{r7}
 80031dc:	b083      	sub	sp, #12
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031e2:	bf00      	nop
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bc80      	pop	{r7}
 80031ea:	4770      	bx	lr

080031ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a29      	ldr	r2, [pc, #164]	; (80032a4 <TIM_Base_SetConfig+0xb8>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d00b      	beq.n	800321c <TIM_Base_SetConfig+0x30>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800320a:	d007      	beq.n	800321c <TIM_Base_SetConfig+0x30>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a26      	ldr	r2, [pc, #152]	; (80032a8 <TIM_Base_SetConfig+0xbc>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d003      	beq.n	800321c <TIM_Base_SetConfig+0x30>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a25      	ldr	r2, [pc, #148]	; (80032ac <TIM_Base_SetConfig+0xc0>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d108      	bne.n	800322e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003222:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	4313      	orrs	r3, r2
 800322c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a1c      	ldr	r2, [pc, #112]	; (80032a4 <TIM_Base_SetConfig+0xb8>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d00b      	beq.n	800324e <TIM_Base_SetConfig+0x62>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800323c:	d007      	beq.n	800324e <TIM_Base_SetConfig+0x62>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a19      	ldr	r2, [pc, #100]	; (80032a8 <TIM_Base_SetConfig+0xbc>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d003      	beq.n	800324e <TIM_Base_SetConfig+0x62>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a18      	ldr	r2, [pc, #96]	; (80032ac <TIM_Base_SetConfig+0xc0>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d108      	bne.n	8003260 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003254:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	4313      	orrs	r3, r2
 800325e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	4313      	orrs	r3, r2
 800326c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a07      	ldr	r2, [pc, #28]	; (80032a4 <TIM_Base_SetConfig+0xb8>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d103      	bne.n	8003294 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	691a      	ldr	r2, [r3, #16]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	615a      	str	r2, [r3, #20]
}
 800329a:	bf00      	nop
 800329c:	3714      	adds	r7, #20
 800329e:	46bd      	mov	sp, r7
 80032a0:	bc80      	pop	{r7}
 80032a2:	4770      	bx	lr
 80032a4:	40012c00 	.word	0x40012c00
 80032a8:	40000400 	.word	0x40000400
 80032ac:	40000800 	.word	0x40000800

080032b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	bc80      	pop	{r7}
 80032c0:	4770      	bx	lr

080032c2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032c2:	b480      	push	{r7}
 80032c4:	b083      	sub	sp, #12
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032ca:	bf00      	nop
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bc80      	pop	{r7}
 80032d2:	4770      	bx	lr

080032d4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032da:	f3ef 8305 	mrs	r3, IPSR
 80032de:	60bb      	str	r3, [r7, #8]
  return(result);
 80032e0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10f      	bne.n	8003306 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032e6:	f3ef 8310 	mrs	r3, PRIMASK
 80032ea:	607b      	str	r3, [r7, #4]
  return(result);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d109      	bne.n	8003306 <osKernelInitialize+0x32>
 80032f2:	4b10      	ldr	r3, [pc, #64]	; (8003334 <osKernelInitialize+0x60>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d109      	bne.n	800330e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80032fa:	f3ef 8311 	mrs	r3, BASEPRI
 80032fe:	603b      	str	r3, [r7, #0]
  return(result);
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d003      	beq.n	800330e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003306:	f06f 0305 	mvn.w	r3, #5
 800330a:	60fb      	str	r3, [r7, #12]
 800330c:	e00c      	b.n	8003328 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800330e:	4b09      	ldr	r3, [pc, #36]	; (8003334 <osKernelInitialize+0x60>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d105      	bne.n	8003322 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003316:	4b07      	ldr	r3, [pc, #28]	; (8003334 <osKernelInitialize+0x60>)
 8003318:	2201      	movs	r2, #1
 800331a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800331c:	2300      	movs	r3, #0
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	e002      	b.n	8003328 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003322:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003326:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003328:	68fb      	ldr	r3, [r7, #12]
}
 800332a:	4618      	mov	r0, r3
 800332c:	3714      	adds	r7, #20
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr
 8003334:	200000fc 	.word	0x200000fc

08003338 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800333e:	f3ef 8305 	mrs	r3, IPSR
 8003342:	60bb      	str	r3, [r7, #8]
  return(result);
 8003344:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10f      	bne.n	800336a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800334a:	f3ef 8310 	mrs	r3, PRIMASK
 800334e:	607b      	str	r3, [r7, #4]
  return(result);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d109      	bne.n	800336a <osKernelStart+0x32>
 8003356:	4b11      	ldr	r3, [pc, #68]	; (800339c <osKernelStart+0x64>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2b02      	cmp	r3, #2
 800335c:	d109      	bne.n	8003372 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800335e:	f3ef 8311 	mrs	r3, BASEPRI
 8003362:	603b      	str	r3, [r7, #0]
  return(result);
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <osKernelStart+0x3a>
    stat = osErrorISR;
 800336a:	f06f 0305 	mvn.w	r3, #5
 800336e:	60fb      	str	r3, [r7, #12]
 8003370:	e00e      	b.n	8003390 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003372:	4b0a      	ldr	r3, [pc, #40]	; (800339c <osKernelStart+0x64>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d107      	bne.n	800338a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800337a:	4b08      	ldr	r3, [pc, #32]	; (800339c <osKernelStart+0x64>)
 800337c:	2202      	movs	r2, #2
 800337e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003380:	f001 f958 	bl	8004634 <vTaskStartScheduler>
      stat = osOK;
 8003384:	2300      	movs	r3, #0
 8003386:	60fb      	str	r3, [r7, #12]
 8003388:	e002      	b.n	8003390 <osKernelStart+0x58>
    } else {
      stat = osError;
 800338a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800338e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003390:	68fb      	ldr	r3, [r7, #12]
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	200000fc 	.word	0x200000fc

080033a0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b092      	sub	sp, #72	; 0x48
 80033a4:	af04      	add	r7, sp, #16
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80033ac:	2300      	movs	r3, #0
 80033ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033b0:	f3ef 8305 	mrs	r3, IPSR
 80033b4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80033b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f040 8094 	bne.w	80034e6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033be:	f3ef 8310 	mrs	r3, PRIMASK
 80033c2:	623b      	str	r3, [r7, #32]
  return(result);
 80033c4:	6a3b      	ldr	r3, [r7, #32]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f040 808d 	bne.w	80034e6 <osThreadNew+0x146>
 80033cc:	4b48      	ldr	r3, [pc, #288]	; (80034f0 <osThreadNew+0x150>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d106      	bne.n	80033e2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80033d4:	f3ef 8311 	mrs	r3, BASEPRI
 80033d8:	61fb      	str	r3, [r7, #28]
  return(result);
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f040 8082 	bne.w	80034e6 <osThreadNew+0x146>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d07e      	beq.n	80034e6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80033e8:	2340      	movs	r3, #64	; 0x40
 80033ea:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80033ec:	2318      	movs	r3, #24
 80033ee:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80033f0:	2300      	movs	r3, #0
 80033f2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80033f4:	f107 031b 	add.w	r3, r7, #27
 80033f8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80033fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033fe:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d045      	beq.n	8003492 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d002      	beq.n	8003414 <osThreadNew+0x74>
        name = attr->name;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d002      	beq.n	8003422 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003424:	2b00      	cmp	r3, #0
 8003426:	d008      	beq.n	800343a <osThreadNew+0x9a>
 8003428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800342a:	2b38      	cmp	r3, #56	; 0x38
 800342c:	d805      	bhi.n	800343a <osThreadNew+0x9a>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <osThreadNew+0x9e>
        return (NULL);
 800343a:	2300      	movs	r3, #0
 800343c:	e054      	b.n	80034e8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	089b      	lsrs	r3, r3, #2
 800344c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00e      	beq.n	8003474 <osThreadNew+0xd4>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	2b5b      	cmp	r3, #91	; 0x5b
 800345c:	d90a      	bls.n	8003474 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003462:	2b00      	cmp	r3, #0
 8003464:	d006      	beq.n	8003474 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d002      	beq.n	8003474 <osThreadNew+0xd4>
        mem = 1;
 800346e:	2301      	movs	r3, #1
 8003470:	62bb      	str	r3, [r7, #40]	; 0x28
 8003472:	e010      	b.n	8003496 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10c      	bne.n	8003496 <osThreadNew+0xf6>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d108      	bne.n	8003496 <osThreadNew+0xf6>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d104      	bne.n	8003496 <osThreadNew+0xf6>
          mem = 0;
 800348c:	2300      	movs	r3, #0
 800348e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003490:	e001      	b.n	8003496 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003492:	2300      	movs	r3, #0
 8003494:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8003496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003498:	2b01      	cmp	r3, #1
 800349a:	d110      	bne.n	80034be <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80034a4:	9202      	str	r2, [sp, #8]
 80034a6:	9301      	str	r3, [sp, #4]
 80034a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f000 fef2 	bl	800429c <xTaskCreateStatic>
 80034b8:	4603      	mov	r3, r0
 80034ba:	617b      	str	r3, [r7, #20]
 80034bc:	e013      	b.n	80034e6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80034be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d110      	bne.n	80034e6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80034c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	f107 0314 	add.w	r3, r7, #20
 80034cc:	9301      	str	r3, [sp, #4]
 80034ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d0:	9300      	str	r3, [sp, #0]
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f000 ff3c 	bl	8004354 <xTaskCreate>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d001      	beq.n	80034e6 <osThreadNew+0x146>
          hTask = NULL;
 80034e2:	2300      	movs	r3, #0
 80034e4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80034e6:	697b      	ldr	r3, [r7, #20]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3738      	adds	r7, #56	; 0x38
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	200000fc 	.word	0x200000fc

080034f4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034fc:	f3ef 8305 	mrs	r3, IPSR
 8003500:	613b      	str	r3, [r7, #16]
  return(result);
 8003502:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10f      	bne.n	8003528 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003508:	f3ef 8310 	mrs	r3, PRIMASK
 800350c:	60fb      	str	r3, [r7, #12]
  return(result);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d109      	bne.n	8003528 <osDelay+0x34>
 8003514:	4b0d      	ldr	r3, [pc, #52]	; (800354c <osDelay+0x58>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2b02      	cmp	r3, #2
 800351a:	d109      	bne.n	8003530 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800351c:	f3ef 8311 	mrs	r3, BASEPRI
 8003520:	60bb      	str	r3, [r7, #8]
  return(result);
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d003      	beq.n	8003530 <osDelay+0x3c>
    stat = osErrorISR;
 8003528:	f06f 0305 	mvn.w	r3, #5
 800352c:	617b      	str	r3, [r7, #20]
 800352e:	e007      	b.n	8003540 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003530:	2300      	movs	r3, #0
 8003532:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d002      	beq.n	8003540 <osDelay+0x4c>
      vTaskDelay(ticks);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f001 f846 	bl	80045cc <vTaskDelay>
    }
  }

  return (stat);
 8003540:	697b      	ldr	r3, [r7, #20]
}
 8003542:	4618      	mov	r0, r3
 8003544:	3718      	adds	r7, #24
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	200000fc 	.word	0x200000fc

08003550 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003550:	b580      	push	{r7, lr}
 8003552:	b08c      	sub	sp, #48	; 0x30
 8003554:	af02      	add	r7, sp, #8
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800355c:	2300      	movs	r3, #0
 800355e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003560:	f3ef 8305 	mrs	r3, IPSR
 8003564:	61bb      	str	r3, [r7, #24]
  return(result);
 8003566:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003568:	2b00      	cmp	r3, #0
 800356a:	d16f      	bne.n	800364c <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800356c:	f3ef 8310 	mrs	r3, PRIMASK
 8003570:	617b      	str	r3, [r7, #20]
  return(result);
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d169      	bne.n	800364c <osMessageQueueNew+0xfc>
 8003578:	4b37      	ldr	r3, [pc, #220]	; (8003658 <osMessageQueueNew+0x108>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2b02      	cmp	r3, #2
 800357e:	d105      	bne.n	800358c <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003580:	f3ef 8311 	mrs	r3, BASEPRI
 8003584:	613b      	str	r3, [r7, #16]
  return(result);
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d15f      	bne.n	800364c <osMessageQueueNew+0xfc>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d05c      	beq.n	800364c <osMessageQueueNew+0xfc>
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d059      	beq.n	800364c <osMessageQueueNew+0xfc>
    mem = -1;
 8003598:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800359c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d029      	beq.n	80035f8 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d012      	beq.n	80035d2 <osMessageQueueNew+0x82>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	2b4f      	cmp	r3, #79	; 0x4f
 80035b2:	d90e      	bls.n	80035d2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00a      	beq.n	80035d2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	695a      	ldr	r2, [r3, #20]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	68b9      	ldr	r1, [r7, #8]
 80035c4:	fb01 f303 	mul.w	r3, r1, r3
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d302      	bcc.n	80035d2 <osMessageQueueNew+0x82>
        mem = 1;
 80035cc:	2301      	movs	r3, #1
 80035ce:	623b      	str	r3, [r7, #32]
 80035d0:	e014      	b.n	80035fc <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d110      	bne.n	80035fc <osMessageQueueNew+0xac>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10c      	bne.n	80035fc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d108      	bne.n	80035fc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d104      	bne.n	80035fc <osMessageQueueNew+0xac>
          mem = 0;
 80035f2:	2300      	movs	r3, #0
 80035f4:	623b      	str	r3, [r7, #32]
 80035f6:	e001      	b.n	80035fc <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80035f8:	2300      	movs	r3, #0
 80035fa:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80035fc:	6a3b      	ldr	r3, [r7, #32]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d10b      	bne.n	800361a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	691a      	ldr	r2, [r3, #16]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	2100      	movs	r1, #0
 800360c:	9100      	str	r1, [sp, #0]
 800360e:	68b9      	ldr	r1, [r7, #8]
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f000 f96b 	bl	80038ec <xQueueGenericCreateStatic>
 8003616:	6278      	str	r0, [r7, #36]	; 0x24
 8003618:	e008      	b.n	800362c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800361a:	6a3b      	ldr	r3, [r7, #32]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d105      	bne.n	800362c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8003620:	2200      	movs	r2, #0
 8003622:	68b9      	ldr	r1, [r7, #8]
 8003624:	68f8      	ldr	r0, [r7, #12]
 8003626:	f000 f9d8 	bl	80039da <xQueueGenericCreate>
 800362a:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800362c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00c      	beq.n	800364c <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d003      	beq.n	8003640 <osMessageQueueNew+0xf0>
        name = attr->name;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	61fb      	str	r3, [r7, #28]
 800363e:	e001      	b.n	8003644 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8003640:	2300      	movs	r3, #0
 8003642:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8003644:	69f9      	ldr	r1, [r7, #28]
 8003646:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003648:	f000 fdcc 	bl	80041e4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800364c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800364e:	4618      	mov	r0, r3
 8003650:	3728      	adds	r7, #40	; 0x28
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	200000fc 	.word	0x200000fc

0800365c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	4a06      	ldr	r2, [pc, #24]	; (8003684 <vApplicationGetIdleTaskMemory+0x28>)
 800366c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	4a05      	ldr	r2, [pc, #20]	; (8003688 <vApplicationGetIdleTaskMemory+0x2c>)
 8003672:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2240      	movs	r2, #64	; 0x40
 8003678:	601a      	str	r2, [r3, #0]
}
 800367a:	bf00      	nop
 800367c:	3714      	adds	r7, #20
 800367e:	46bd      	mov	sp, r7
 8003680:	bc80      	pop	{r7}
 8003682:	4770      	bx	lr
 8003684:	20000100 	.word	0x20000100
 8003688:	2000015c 	.word	0x2000015c

0800368c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	4a06      	ldr	r2, [pc, #24]	; (80036b4 <vApplicationGetTimerTaskMemory+0x28>)
 800369c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	4a05      	ldr	r2, [pc, #20]	; (80036b8 <vApplicationGetTimerTaskMemory+0x2c>)
 80036a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2280      	movs	r2, #128	; 0x80
 80036a8:	601a      	str	r2, [r3, #0]
}
 80036aa:	bf00      	nop
 80036ac:	3714      	adds	r7, #20
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bc80      	pop	{r7}
 80036b2:	4770      	bx	lr
 80036b4:	2000025c 	.word	0x2000025c
 80036b8:	200002b8 	.word	0x200002b8

080036bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f103 0208 	add.w	r2, r3, #8
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f103 0208 	add.w	r2, r3, #8
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f103 0208 	add.w	r2, r3, #8
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bc80      	pop	{r7}
 80036f8:	4770      	bx	lr

080036fa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80036fa:	b480      	push	{r7}
 80036fc:	b083      	sub	sp, #12
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	bc80      	pop	{r7}
 8003710:	4770      	bx	lr

08003712 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003712:	b480      	push	{r7}
 8003714:	b085      	sub	sp, #20
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
 800371a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	1c5a      	adds	r2, r3, #1
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	601a      	str	r2, [r3, #0]
}
 800374e:	bf00      	nop
 8003750:	3714      	adds	r7, #20
 8003752:	46bd      	mov	sp, r7
 8003754:	bc80      	pop	{r7}
 8003756:	4770      	bx	lr

08003758 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800376e:	d103      	bne.n	8003778 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	60fb      	str	r3, [r7, #12]
 8003776:	e00c      	b.n	8003792 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	3308      	adds	r3, #8
 800377c:	60fb      	str	r3, [r7, #12]
 800377e:	e002      	b.n	8003786 <vListInsert+0x2e>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	60fb      	str	r3, [r7, #12]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68ba      	ldr	r2, [r7, #8]
 800378e:	429a      	cmp	r2, r3
 8003790:	d2f6      	bcs.n	8003780 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	683a      	ldr	r2, [r7, #0]
 80037ac:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	1c5a      	adds	r2, r3, #1
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	601a      	str	r2, [r3, #0]
}
 80037be:	bf00      	nop
 80037c0:	3714      	adds	r7, #20
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bc80      	pop	{r7}
 80037c6:	4770      	bx	lr

080037c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	6892      	ldr	r2, [r2, #8]
 80037de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	6852      	ldr	r2, [r2, #4]
 80037e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d103      	bne.n	80037fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689a      	ldr	r2, [r3, #8]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	1e5a      	subs	r2, r3, #1
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
}
 8003810:	4618      	mov	r0, r3
 8003812:	3714      	adds	r7, #20
 8003814:	46bd      	mov	sp, r7
 8003816:	bc80      	pop	{r7}
 8003818:	4770      	bx	lr
	...

0800381c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10a      	bne.n	8003846 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003834:	f383 8811 	msr	BASEPRI, r3
 8003838:	f3bf 8f6f 	isb	sy
 800383c:	f3bf 8f4f 	dsb	sy
 8003840:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003842:	bf00      	nop
 8003844:	e7fe      	b.n	8003844 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003846:	f002 f821 	bl	800588c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003852:	68f9      	ldr	r1, [r7, #12]
 8003854:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003856:	fb01 f303 	mul.w	r3, r1, r3
 800385a:	441a      	add	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003876:	3b01      	subs	r3, #1
 8003878:	68f9      	ldr	r1, [r7, #12]
 800387a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800387c:	fb01 f303 	mul.w	r3, r1, r3
 8003880:	441a      	add	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	22ff      	movs	r2, #255	; 0xff
 800388a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	22ff      	movs	r2, #255	; 0xff
 8003892:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d114      	bne.n	80038c6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	691b      	ldr	r3, [r3, #16]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d01a      	beq.n	80038da <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	3310      	adds	r3, #16
 80038a8:	4618      	mov	r0, r3
 80038aa:	f001 f94d 	bl	8004b48 <xTaskRemoveFromEventList>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d012      	beq.n	80038da <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80038b4:	4b0c      	ldr	r3, [pc, #48]	; (80038e8 <xQueueGenericReset+0xcc>)
 80038b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038ba:	601a      	str	r2, [r3, #0]
 80038bc:	f3bf 8f4f 	dsb	sy
 80038c0:	f3bf 8f6f 	isb	sy
 80038c4:	e009      	b.n	80038da <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	3310      	adds	r3, #16
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7ff fef6 	bl	80036bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	3324      	adds	r3, #36	; 0x24
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7ff fef1 	bl	80036bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80038da:	f002 f807 	bl	80058ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80038de:	2301      	movs	r3, #1
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	e000ed04 	.word	0xe000ed04

080038ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b08e      	sub	sp, #56	; 0x38
 80038f0:	af02      	add	r7, sp, #8
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
 80038f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d10a      	bne.n	8003916 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003904:	f383 8811 	msr	BASEPRI, r3
 8003908:	f3bf 8f6f 	isb	sy
 800390c:	f3bf 8f4f 	dsb	sy
 8003910:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003912:	bf00      	nop
 8003914:	e7fe      	b.n	8003914 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d10a      	bne.n	8003932 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800391c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003920:	f383 8811 	msr	BASEPRI, r3
 8003924:	f3bf 8f6f 	isb	sy
 8003928:	f3bf 8f4f 	dsb	sy
 800392c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800392e:	bf00      	nop
 8003930:	e7fe      	b.n	8003930 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d002      	beq.n	800393e <xQueueGenericCreateStatic+0x52>
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <xQueueGenericCreateStatic+0x56>
 800393e:	2301      	movs	r3, #1
 8003940:	e000      	b.n	8003944 <xQueueGenericCreateStatic+0x58>
 8003942:	2300      	movs	r3, #0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d10a      	bne.n	800395e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800394c:	f383 8811 	msr	BASEPRI, r3
 8003950:	f3bf 8f6f 	isb	sy
 8003954:	f3bf 8f4f 	dsb	sy
 8003958:	623b      	str	r3, [r7, #32]
}
 800395a:	bf00      	nop
 800395c:	e7fe      	b.n	800395c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d102      	bne.n	800396a <xQueueGenericCreateStatic+0x7e>
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <xQueueGenericCreateStatic+0x82>
 800396a:	2301      	movs	r3, #1
 800396c:	e000      	b.n	8003970 <xQueueGenericCreateStatic+0x84>
 800396e:	2300      	movs	r3, #0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d10a      	bne.n	800398a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003978:	f383 8811 	msr	BASEPRI, r3
 800397c:	f3bf 8f6f 	isb	sy
 8003980:	f3bf 8f4f 	dsb	sy
 8003984:	61fb      	str	r3, [r7, #28]
}
 8003986:	bf00      	nop
 8003988:	e7fe      	b.n	8003988 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800398a:	2350      	movs	r3, #80	; 0x50
 800398c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	2b50      	cmp	r3, #80	; 0x50
 8003992:	d00a      	beq.n	80039aa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003998:	f383 8811 	msr	BASEPRI, r3
 800399c:	f3bf 8f6f 	isb	sy
 80039a0:	f3bf 8f4f 	dsb	sy
 80039a4:	61bb      	str	r3, [r7, #24]
}
 80039a6:	bf00      	nop
 80039a8:	e7fe      	b.n	80039a8 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80039ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00d      	beq.n	80039d0 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80039b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80039bc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80039c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	4613      	mov	r3, r2
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	68b9      	ldr	r1, [r7, #8]
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f000 f843 	bl	8003a56 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80039d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3730      	adds	r7, #48	; 0x30
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b08a      	sub	sp, #40	; 0x28
 80039de:	af02      	add	r7, sp, #8
 80039e0:	60f8      	str	r0, [r7, #12]
 80039e2:	60b9      	str	r1, [r7, #8]
 80039e4:	4613      	mov	r3, r2
 80039e6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10a      	bne.n	8003a04 <xQueueGenericCreate+0x2a>
	__asm volatile
 80039ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f2:	f383 8811 	msr	BASEPRI, r3
 80039f6:	f3bf 8f6f 	isb	sy
 80039fa:	f3bf 8f4f 	dsb	sy
 80039fe:	613b      	str	r3, [r7, #16]
}
 8003a00:	bf00      	nop
 8003a02:	e7fe      	b.n	8003a02 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d102      	bne.n	8003a10 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	61fb      	str	r3, [r7, #28]
 8003a0e:	e004      	b.n	8003a1a <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	fb02 f303 	mul.w	r3, r2, r3
 8003a18:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	3350      	adds	r3, #80	; 0x50
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f002 f834 	bl	8005a8c <pvPortMalloc>
 8003a24:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00f      	beq.n	8003a4c <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	3350      	adds	r3, #80	; 0x50
 8003a30:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a3a:	79fa      	ldrb	r2, [r7, #7]
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	4613      	mov	r3, r2
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	68b9      	ldr	r1, [r7, #8]
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 f805 	bl	8003a56 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003a4c:	69bb      	ldr	r3, [r7, #24]
	}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3720      	adds	r7, #32
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b084      	sub	sp, #16
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	60f8      	str	r0, [r7, #12]
 8003a5e:	60b9      	str	r1, [r7, #8]
 8003a60:	607a      	str	r2, [r7, #4]
 8003a62:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d103      	bne.n	8003a72 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	601a      	str	r2, [r3, #0]
 8003a70:	e002      	b.n	8003a78 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	68ba      	ldr	r2, [r7, #8]
 8003a82:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003a84:	2101      	movs	r1, #1
 8003a86:	69b8      	ldr	r0, [r7, #24]
 8003a88:	f7ff fec8 	bl	800381c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	78fa      	ldrb	r2, [r7, #3]
 8003a90:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003a94:	bf00      	nop
 8003a96:	3710      	adds	r7, #16
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b08e      	sub	sp, #56	; 0x38
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]
 8003aa8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d10a      	bne.n	8003ace <xQueueGenericSend+0x32>
	__asm volatile
 8003ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003abc:	f383 8811 	msr	BASEPRI, r3
 8003ac0:	f3bf 8f6f 	isb	sy
 8003ac4:	f3bf 8f4f 	dsb	sy
 8003ac8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003aca:	bf00      	nop
 8003acc:	e7fe      	b.n	8003acc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d103      	bne.n	8003adc <xQueueGenericSend+0x40>
 8003ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d101      	bne.n	8003ae0 <xQueueGenericSend+0x44>
 8003adc:	2301      	movs	r3, #1
 8003ade:	e000      	b.n	8003ae2 <xQueueGenericSend+0x46>
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10a      	bne.n	8003afc <xQueueGenericSend+0x60>
	__asm volatile
 8003ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aea:	f383 8811 	msr	BASEPRI, r3
 8003aee:	f3bf 8f6f 	isb	sy
 8003af2:	f3bf 8f4f 	dsb	sy
 8003af6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003af8:	bf00      	nop
 8003afa:	e7fe      	b.n	8003afa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d103      	bne.n	8003b0a <xQueueGenericSend+0x6e>
 8003b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d101      	bne.n	8003b0e <xQueueGenericSend+0x72>
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e000      	b.n	8003b10 <xQueueGenericSend+0x74>
 8003b0e:	2300      	movs	r3, #0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d10a      	bne.n	8003b2a <xQueueGenericSend+0x8e>
	__asm volatile
 8003b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b18:	f383 8811 	msr	BASEPRI, r3
 8003b1c:	f3bf 8f6f 	isb	sy
 8003b20:	f3bf 8f4f 	dsb	sy
 8003b24:	623b      	str	r3, [r7, #32]
}
 8003b26:	bf00      	nop
 8003b28:	e7fe      	b.n	8003b28 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b2a:	f001 f9cf 	bl	8004ecc <xTaskGetSchedulerState>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d102      	bne.n	8003b3a <xQueueGenericSend+0x9e>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <xQueueGenericSend+0xa2>
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e000      	b.n	8003b40 <xQueueGenericSend+0xa4>
 8003b3e:	2300      	movs	r3, #0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d10a      	bne.n	8003b5a <xQueueGenericSend+0xbe>
	__asm volatile
 8003b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b48:	f383 8811 	msr	BASEPRI, r3
 8003b4c:	f3bf 8f6f 	isb	sy
 8003b50:	f3bf 8f4f 	dsb	sy
 8003b54:	61fb      	str	r3, [r7, #28]
}
 8003b56:	bf00      	nop
 8003b58:	e7fe      	b.n	8003b58 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b5a:	f001 fe97 	bl	800588c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d302      	bcc.n	8003b70 <xQueueGenericSend+0xd4>
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d129      	bne.n	8003bc4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	68b9      	ldr	r1, [r7, #8]
 8003b74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b76:	f000 fa25 	bl	8003fc4 <prvCopyDataToQueue>
 8003b7a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d010      	beq.n	8003ba6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b86:	3324      	adds	r3, #36	; 0x24
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f000 ffdd 	bl	8004b48 <xTaskRemoveFromEventList>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d013      	beq.n	8003bbc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003b94:	4b3f      	ldr	r3, [pc, #252]	; (8003c94 <xQueueGenericSend+0x1f8>)
 8003b96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b9a:	601a      	str	r2, [r3, #0]
 8003b9c:	f3bf 8f4f 	dsb	sy
 8003ba0:	f3bf 8f6f 	isb	sy
 8003ba4:	e00a      	b.n	8003bbc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d007      	beq.n	8003bbc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003bac:	4b39      	ldr	r3, [pc, #228]	; (8003c94 <xQueueGenericSend+0x1f8>)
 8003bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bb2:	601a      	str	r2, [r3, #0]
 8003bb4:	f3bf 8f4f 	dsb	sy
 8003bb8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003bbc:	f001 fe96 	bl	80058ec <vPortExitCritical>
				return pdPASS;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e063      	b.n	8003c8c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d103      	bne.n	8003bd2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003bca:	f001 fe8f 	bl	80058ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	e05c      	b.n	8003c8c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d106      	bne.n	8003be6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003bd8:	f107 0314 	add.w	r3, r7, #20
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f001 f817 	bl	8004c10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003be2:	2301      	movs	r3, #1
 8003be4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003be6:	f001 fe81 	bl	80058ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003bea:	f000 fd89 	bl	8004700 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003bee:	f001 fe4d 	bl	800588c <vPortEnterCritical>
 8003bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bf8:	b25b      	sxtb	r3, r3
 8003bfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bfe:	d103      	bne.n	8003c08 <xQueueGenericSend+0x16c>
 8003c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c0e:	b25b      	sxtb	r3, r3
 8003c10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c14:	d103      	bne.n	8003c1e <xQueueGenericSend+0x182>
 8003c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c1e:	f001 fe65 	bl	80058ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c22:	1d3a      	adds	r2, r7, #4
 8003c24:	f107 0314 	add.w	r3, r7, #20
 8003c28:	4611      	mov	r1, r2
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f001 f806 	bl	8004c3c <xTaskCheckForTimeOut>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d124      	bne.n	8003c80 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003c36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c38:	f000 fabc 	bl	80041b4 <prvIsQueueFull>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d018      	beq.n	8003c74 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c44:	3310      	adds	r3, #16
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	4611      	mov	r1, r2
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f000 ff2c 	bl	8004aa8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003c50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c52:	f000 fa47 	bl	80040e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003c56:	f000 fd61 	bl	800471c <xTaskResumeAll>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f47f af7c 	bne.w	8003b5a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003c62:	4b0c      	ldr	r3, [pc, #48]	; (8003c94 <xQueueGenericSend+0x1f8>)
 8003c64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c68:	601a      	str	r2, [r3, #0]
 8003c6a:	f3bf 8f4f 	dsb	sy
 8003c6e:	f3bf 8f6f 	isb	sy
 8003c72:	e772      	b.n	8003b5a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003c74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c76:	f000 fa35 	bl	80040e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c7a:	f000 fd4f 	bl	800471c <xTaskResumeAll>
 8003c7e:	e76c      	b.n	8003b5a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003c80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c82:	f000 fa2f 	bl	80040e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c86:	f000 fd49 	bl	800471c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003c8a:	2300      	movs	r3, #0
		}
	}
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3738      	adds	r7, #56	; 0x38
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	e000ed04 	.word	0xe000ed04

08003c98 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b08e      	sub	sp, #56	; 0x38
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
 8003ca4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10a      	bne.n	8003cc6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb4:	f383 8811 	msr	BASEPRI, r3
 8003cb8:	f3bf 8f6f 	isb	sy
 8003cbc:	f3bf 8f4f 	dsb	sy
 8003cc0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003cc2:	bf00      	nop
 8003cc4:	e7fe      	b.n	8003cc4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d103      	bne.n	8003cd4 <xQueueGenericSendFromISR+0x3c>
 8003ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d101      	bne.n	8003cd8 <xQueueGenericSendFromISR+0x40>
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e000      	b.n	8003cda <xQueueGenericSendFromISR+0x42>
 8003cd8:	2300      	movs	r3, #0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10a      	bne.n	8003cf4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce2:	f383 8811 	msr	BASEPRI, r3
 8003ce6:	f3bf 8f6f 	isb	sy
 8003cea:	f3bf 8f4f 	dsb	sy
 8003cee:	623b      	str	r3, [r7, #32]
}
 8003cf0:	bf00      	nop
 8003cf2:	e7fe      	b.n	8003cf2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d103      	bne.n	8003d02 <xQueueGenericSendFromISR+0x6a>
 8003cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d101      	bne.n	8003d06 <xQueueGenericSendFromISR+0x6e>
 8003d02:	2301      	movs	r3, #1
 8003d04:	e000      	b.n	8003d08 <xQueueGenericSendFromISR+0x70>
 8003d06:	2300      	movs	r3, #0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d10a      	bne.n	8003d22 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d10:	f383 8811 	msr	BASEPRI, r3
 8003d14:	f3bf 8f6f 	isb	sy
 8003d18:	f3bf 8f4f 	dsb	sy
 8003d1c:	61fb      	str	r3, [r7, #28]
}
 8003d1e:	bf00      	nop
 8003d20:	e7fe      	b.n	8003d20 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003d22:	f001 fe75 	bl	8005a10 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003d26:	f3ef 8211 	mrs	r2, BASEPRI
 8003d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d2e:	f383 8811 	msr	BASEPRI, r3
 8003d32:	f3bf 8f6f 	isb	sy
 8003d36:	f3bf 8f4f 	dsb	sy
 8003d3a:	61ba      	str	r2, [r7, #24]
 8003d3c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003d3e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d40:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d302      	bcc.n	8003d54 <xQueueGenericSendFromISR+0xbc>
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d12c      	bne.n	8003dae <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d5e:	683a      	ldr	r2, [r7, #0]
 8003d60:	68b9      	ldr	r1, [r7, #8]
 8003d62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d64:	f000 f92e 	bl	8003fc4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003d68:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003d6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d70:	d112      	bne.n	8003d98 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d016      	beq.n	8003da8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7c:	3324      	adds	r3, #36	; 0x24
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f000 fee2 	bl	8004b48 <xTaskRemoveFromEventList>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00e      	beq.n	8003da8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00b      	beq.n	8003da8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	601a      	str	r2, [r3, #0]
 8003d96:	e007      	b.n	8003da8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003d98:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	b25a      	sxtb	r2, r3
 8003da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003da8:	2301      	movs	r3, #1
 8003daa:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003dac:	e001      	b.n	8003db2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003dae:	2300      	movs	r3, #0
 8003db0:	637b      	str	r3, [r7, #52]	; 0x34
 8003db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003dbc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3738      	adds	r7, #56	; 0x38
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b08c      	sub	sp, #48	; 0x30
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10a      	bne.n	8003df8 <xQueueReceive+0x30>
	__asm volatile
 8003de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de6:	f383 8811 	msr	BASEPRI, r3
 8003dea:	f3bf 8f6f 	isb	sy
 8003dee:	f3bf 8f4f 	dsb	sy
 8003df2:	623b      	str	r3, [r7, #32]
}
 8003df4:	bf00      	nop
 8003df6:	e7fe      	b.n	8003df6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d103      	bne.n	8003e06 <xQueueReceive+0x3e>
 8003dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d101      	bne.n	8003e0a <xQueueReceive+0x42>
 8003e06:	2301      	movs	r3, #1
 8003e08:	e000      	b.n	8003e0c <xQueueReceive+0x44>
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d10a      	bne.n	8003e26 <xQueueReceive+0x5e>
	__asm volatile
 8003e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e14:	f383 8811 	msr	BASEPRI, r3
 8003e18:	f3bf 8f6f 	isb	sy
 8003e1c:	f3bf 8f4f 	dsb	sy
 8003e20:	61fb      	str	r3, [r7, #28]
}
 8003e22:	bf00      	nop
 8003e24:	e7fe      	b.n	8003e24 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e26:	f001 f851 	bl	8004ecc <xTaskGetSchedulerState>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d102      	bne.n	8003e36 <xQueueReceive+0x6e>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <xQueueReceive+0x72>
 8003e36:	2301      	movs	r3, #1
 8003e38:	e000      	b.n	8003e3c <xQueueReceive+0x74>
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d10a      	bne.n	8003e56 <xQueueReceive+0x8e>
	__asm volatile
 8003e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e44:	f383 8811 	msr	BASEPRI, r3
 8003e48:	f3bf 8f6f 	isb	sy
 8003e4c:	f3bf 8f4f 	dsb	sy
 8003e50:	61bb      	str	r3, [r7, #24]
}
 8003e52:	bf00      	nop
 8003e54:	e7fe      	b.n	8003e54 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e56:	f001 fd19 	bl	800588c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d01f      	beq.n	8003ea6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003e66:	68b9      	ldr	r1, [r7, #8]
 8003e68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e6a:	f000 f915 	bl	8004098 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e70:	1e5a      	subs	r2, r3, #1
 8003e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e74:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00f      	beq.n	8003e9e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e80:	3310      	adds	r3, #16
 8003e82:	4618      	mov	r0, r3
 8003e84:	f000 fe60 	bl	8004b48 <xTaskRemoveFromEventList>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d007      	beq.n	8003e9e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003e8e:	4b3d      	ldr	r3, [pc, #244]	; (8003f84 <xQueueReceive+0x1bc>)
 8003e90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e94:	601a      	str	r2, [r3, #0]
 8003e96:	f3bf 8f4f 	dsb	sy
 8003e9a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e9e:	f001 fd25 	bl	80058ec <vPortExitCritical>
				return pdPASS;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e069      	b.n	8003f7a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d103      	bne.n	8003eb4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003eac:	f001 fd1e 	bl	80058ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	e062      	b.n	8003f7a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d106      	bne.n	8003ec8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003eba:	f107 0310 	add.w	r3, r7, #16
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f000 fea6 	bl	8004c10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ec8:	f001 fd10 	bl	80058ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ecc:	f000 fc18 	bl	8004700 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ed0:	f001 fcdc 	bl	800588c <vPortEnterCritical>
 8003ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003eda:	b25b      	sxtb	r3, r3
 8003edc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ee0:	d103      	bne.n	8003eea <xQueueReceive+0x122>
 8003ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ef0:	b25b      	sxtb	r3, r3
 8003ef2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ef6:	d103      	bne.n	8003f00 <xQueueReceive+0x138>
 8003ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f00:	f001 fcf4 	bl	80058ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f04:	1d3a      	adds	r2, r7, #4
 8003f06:	f107 0310 	add.w	r3, r7, #16
 8003f0a:	4611      	mov	r1, r2
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f000 fe95 	bl	8004c3c <xTaskCheckForTimeOut>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d123      	bne.n	8003f60 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f1a:	f000 f935 	bl	8004188 <prvIsQueueEmpty>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d017      	beq.n	8003f54 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f26:	3324      	adds	r3, #36	; 0x24
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	4611      	mov	r1, r2
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f000 fdbb 	bl	8004aa8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003f32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f34:	f000 f8d6 	bl	80040e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003f38:	f000 fbf0 	bl	800471c <xTaskResumeAll>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d189      	bne.n	8003e56 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003f42:	4b10      	ldr	r3, [pc, #64]	; (8003f84 <xQueueReceive+0x1bc>)
 8003f44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f48:	601a      	str	r2, [r3, #0]
 8003f4a:	f3bf 8f4f 	dsb	sy
 8003f4e:	f3bf 8f6f 	isb	sy
 8003f52:	e780      	b.n	8003e56 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003f54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f56:	f000 f8c5 	bl	80040e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f5a:	f000 fbdf 	bl	800471c <xTaskResumeAll>
 8003f5e:	e77a      	b.n	8003e56 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003f60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f62:	f000 f8bf 	bl	80040e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f66:	f000 fbd9 	bl	800471c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f6c:	f000 f90c 	bl	8004188 <prvIsQueueEmpty>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f43f af6f 	beq.w	8003e56 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f78:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3730      	adds	r7, #48	; 0x30
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	e000ed04 	.word	0xe000ed04

08003f88 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10a      	bne.n	8003fac <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8003f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f9a:	f383 8811 	msr	BASEPRI, r3
 8003f9e:	f3bf 8f6f 	isb	sy
 8003fa2:	f3bf 8f4f 	dsb	sy
 8003fa6:	60bb      	str	r3, [r7, #8]
}
 8003fa8:	bf00      	nop
 8003faa:	e7fe      	b.n	8003faa <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8003fac:	f001 fc6e 	bl	800588c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb4:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8003fb6:	f001 fc99 	bl	80058ec <vPortExitCritical>

	return uxReturn;
 8003fba:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10d      	bne.n	8003ffe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d14d      	bne.n	8004086 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f000 ff8a 	bl	8004f08 <xTaskPriorityDisinherit>
 8003ff4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	605a      	str	r2, [r3, #4]
 8003ffc:	e043      	b.n	8004086 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d119      	bne.n	8004038 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6898      	ldr	r0, [r3, #8]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400c:	461a      	mov	r2, r3
 800400e:	68b9      	ldr	r1, [r7, #8]
 8004010:	f001 ff38 	bl	8005e84 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	689a      	ldr	r2, [r3, #8]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401c:	441a      	add	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	689a      	ldr	r2, [r3, #8]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	429a      	cmp	r2, r3
 800402c:	d32b      	bcc.n	8004086 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	609a      	str	r2, [r3, #8]
 8004036:	e026      	b.n	8004086 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	68d8      	ldr	r0, [r3, #12]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004040:	461a      	mov	r2, r3
 8004042:	68b9      	ldr	r1, [r7, #8]
 8004044:	f001 ff1e 	bl	8005e84 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	68da      	ldr	r2, [r3, #12]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004050:	425b      	negs	r3, r3
 8004052:	441a      	add	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	68da      	ldr	r2, [r3, #12]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	429a      	cmp	r2, r3
 8004062:	d207      	bcs.n	8004074 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406c:	425b      	negs	r3, r3
 800406e:	441a      	add	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b02      	cmp	r3, #2
 8004078:	d105      	bne.n	8004086 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d002      	beq.n	8004086 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	3b01      	subs	r3, #1
 8004084:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	1c5a      	adds	r2, r3, #1
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800408e:	697b      	ldr	r3, [r7, #20]
}
 8004090:	4618      	mov	r0, r3
 8004092:	3718      	adds	r7, #24
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d018      	beq.n	80040dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68da      	ldr	r2, [r3, #12]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b2:	441a      	add	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68da      	ldr	r2, [r3, #12]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d303      	bcc.n	80040cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	68d9      	ldr	r1, [r3, #12]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d4:	461a      	mov	r2, r3
 80040d6:	6838      	ldr	r0, [r7, #0]
 80040d8:	f001 fed4 	bl	8005e84 <memcpy>
	}
}
 80040dc:	bf00      	nop
 80040de:	3708      	adds	r7, #8
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80040ec:	f001 fbce 	bl	800588c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80040f8:	e011      	b.n	800411e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d012      	beq.n	8004128 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	3324      	adds	r3, #36	; 0x24
 8004106:	4618      	mov	r0, r3
 8004108:	f000 fd1e 	bl	8004b48 <xTaskRemoveFromEventList>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004112:	f000 fdf5 	bl	8004d00 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004116:	7bfb      	ldrb	r3, [r7, #15]
 8004118:	3b01      	subs	r3, #1
 800411a:	b2db      	uxtb	r3, r3
 800411c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800411e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004122:	2b00      	cmp	r3, #0
 8004124:	dce9      	bgt.n	80040fa <prvUnlockQueue+0x16>
 8004126:	e000      	b.n	800412a <prvUnlockQueue+0x46>
					break;
 8004128:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	22ff      	movs	r2, #255	; 0xff
 800412e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004132:	f001 fbdb 	bl	80058ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004136:	f001 fba9 	bl	800588c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004140:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004142:	e011      	b.n	8004168 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d012      	beq.n	8004172 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	3310      	adds	r3, #16
 8004150:	4618      	mov	r0, r3
 8004152:	f000 fcf9 	bl	8004b48 <xTaskRemoveFromEventList>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800415c:	f000 fdd0 	bl	8004d00 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004160:	7bbb      	ldrb	r3, [r7, #14]
 8004162:	3b01      	subs	r3, #1
 8004164:	b2db      	uxtb	r3, r3
 8004166:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004168:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800416c:	2b00      	cmp	r3, #0
 800416e:	dce9      	bgt.n	8004144 <prvUnlockQueue+0x60>
 8004170:	e000      	b.n	8004174 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004172:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	22ff      	movs	r2, #255	; 0xff
 8004178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800417c:	f001 fbb6 	bl	80058ec <vPortExitCritical>
}
 8004180:	bf00      	nop
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004190:	f001 fb7c 	bl	800588c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004198:	2b00      	cmp	r3, #0
 800419a:	d102      	bne.n	80041a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800419c:	2301      	movs	r3, #1
 800419e:	60fb      	str	r3, [r7, #12]
 80041a0:	e001      	b.n	80041a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80041a2:	2300      	movs	r3, #0
 80041a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80041a6:	f001 fba1 	bl	80058ec <vPortExitCritical>

	return xReturn;
 80041aa:	68fb      	ldr	r3, [r7, #12]
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3710      	adds	r7, #16
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80041bc:	f001 fb66 	bl	800588c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d102      	bne.n	80041d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80041cc:	2301      	movs	r3, #1
 80041ce:	60fb      	str	r3, [r7, #12]
 80041d0:	e001      	b.n	80041d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80041d2:	2300      	movs	r3, #0
 80041d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80041d6:	f001 fb89 	bl	80058ec <vPortExitCritical>

	return xReturn;
 80041da:	68fb      	ldr	r3, [r7, #12]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80041ee:	2300      	movs	r3, #0
 80041f0:	60fb      	str	r3, [r7, #12]
 80041f2:	e014      	b.n	800421e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80041f4:	4a0e      	ldr	r2, [pc, #56]	; (8004230 <vQueueAddToRegistry+0x4c>)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10b      	bne.n	8004218 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004200:	490b      	ldr	r1, [pc, #44]	; (8004230 <vQueueAddToRegistry+0x4c>)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	683a      	ldr	r2, [r7, #0]
 8004206:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800420a:	4a09      	ldr	r2, [pc, #36]	; (8004230 <vQueueAddToRegistry+0x4c>)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	4413      	add	r3, r2
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004216:	e006      	b.n	8004226 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	3301      	adds	r3, #1
 800421c:	60fb      	str	r3, [r7, #12]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2b07      	cmp	r3, #7
 8004222:	d9e7      	bls.n	80041f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004224:	bf00      	nop
 8004226:	bf00      	nop
 8004228:	3714      	adds	r7, #20
 800422a:	46bd      	mov	sp, r7
 800422c:	bc80      	pop	{r7}
 800422e:	4770      	bx	lr
 8004230:	200004b8 	.word	0x200004b8

08004234 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004244:	f001 fb22 	bl	800588c <vPortEnterCritical>
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800424e:	b25b      	sxtb	r3, r3
 8004250:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004254:	d103      	bne.n	800425e <vQueueWaitForMessageRestricted+0x2a>
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004264:	b25b      	sxtb	r3, r3
 8004266:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800426a:	d103      	bne.n	8004274 <vQueueWaitForMessageRestricted+0x40>
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004274:	f001 fb3a 	bl	80058ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427c:	2b00      	cmp	r3, #0
 800427e:	d106      	bne.n	800428e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	3324      	adds	r3, #36	; 0x24
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	68b9      	ldr	r1, [r7, #8]
 8004288:	4618      	mov	r0, r3
 800428a:	f000 fc31 	bl	8004af0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800428e:	6978      	ldr	r0, [r7, #20]
 8004290:	f7ff ff28 	bl	80040e4 <prvUnlockQueue>
	}
 8004294:	bf00      	nop
 8004296:	3718      	adds	r7, #24
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800429c:	b580      	push	{r7, lr}
 800429e:	b08e      	sub	sp, #56	; 0x38
 80042a0:	af04      	add	r7, sp, #16
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	607a      	str	r2, [r7, #4]
 80042a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80042aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10a      	bne.n	80042c6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80042b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b4:	f383 8811 	msr	BASEPRI, r3
 80042b8:	f3bf 8f6f 	isb	sy
 80042bc:	f3bf 8f4f 	dsb	sy
 80042c0:	623b      	str	r3, [r7, #32]
}
 80042c2:	bf00      	nop
 80042c4:	e7fe      	b.n	80042c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80042c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d10a      	bne.n	80042e2 <xTaskCreateStatic+0x46>
	__asm volatile
 80042cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d0:	f383 8811 	msr	BASEPRI, r3
 80042d4:	f3bf 8f6f 	isb	sy
 80042d8:	f3bf 8f4f 	dsb	sy
 80042dc:	61fb      	str	r3, [r7, #28]
}
 80042de:	bf00      	nop
 80042e0:	e7fe      	b.n	80042e0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80042e2:	235c      	movs	r3, #92	; 0x5c
 80042e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	2b5c      	cmp	r3, #92	; 0x5c
 80042ea:	d00a      	beq.n	8004302 <xTaskCreateStatic+0x66>
	__asm volatile
 80042ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f0:	f383 8811 	msr	BASEPRI, r3
 80042f4:	f3bf 8f6f 	isb	sy
 80042f8:	f3bf 8f4f 	dsb	sy
 80042fc:	61bb      	str	r3, [r7, #24]
}
 80042fe:	bf00      	nop
 8004300:	e7fe      	b.n	8004300 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004304:	2b00      	cmp	r3, #0
 8004306:	d01e      	beq.n	8004346 <xTaskCreateStatic+0xaa>
 8004308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800430a:	2b00      	cmp	r3, #0
 800430c:	d01b      	beq.n	8004346 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800430e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004310:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004314:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004316:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431a:	2202      	movs	r2, #2
 800431c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004320:	2300      	movs	r3, #0
 8004322:	9303      	str	r3, [sp, #12]
 8004324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004326:	9302      	str	r3, [sp, #8]
 8004328:	f107 0314 	add.w	r3, r7, #20
 800432c:	9301      	str	r3, [sp, #4]
 800432e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004330:	9300      	str	r3, [sp, #0]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	68b9      	ldr	r1, [r7, #8]
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f000 f850 	bl	80043de <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800433e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004340:	f000 f8d4 	bl	80044ec <prvAddNewTaskToReadyList>
 8004344:	e001      	b.n	800434a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8004346:	2300      	movs	r3, #0
 8004348:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800434a:	697b      	ldr	r3, [r7, #20]
	}
 800434c:	4618      	mov	r0, r3
 800434e:	3728      	adds	r7, #40	; 0x28
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004354:	b580      	push	{r7, lr}
 8004356:	b08c      	sub	sp, #48	; 0x30
 8004358:	af04      	add	r7, sp, #16
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	603b      	str	r3, [r7, #0]
 8004360:	4613      	mov	r3, r2
 8004362:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004364:	88fb      	ldrh	r3, [r7, #6]
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	4618      	mov	r0, r3
 800436a:	f001 fb8f 	bl	8005a8c <pvPortMalloc>
 800436e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00e      	beq.n	8004394 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004376:	205c      	movs	r0, #92	; 0x5c
 8004378:	f001 fb88 	bl	8005a8c <pvPortMalloc>
 800437c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d003      	beq.n	800438c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	631a      	str	r2, [r3, #48]	; 0x30
 800438a:	e005      	b.n	8004398 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800438c:	6978      	ldr	r0, [r7, #20]
 800438e:	f001 fc41 	bl	8005c14 <vPortFree>
 8004392:	e001      	b.n	8004398 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004394:	2300      	movs	r3, #0
 8004396:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d017      	beq.n	80043ce <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80043a6:	88fa      	ldrh	r2, [r7, #6]
 80043a8:	2300      	movs	r3, #0
 80043aa:	9303      	str	r3, [sp, #12]
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	9302      	str	r3, [sp, #8]
 80043b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b2:	9301      	str	r3, [sp, #4]
 80043b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b6:	9300      	str	r3, [sp, #0]
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	68b9      	ldr	r1, [r7, #8]
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f000 f80e 	bl	80043de <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043c2:	69f8      	ldr	r0, [r7, #28]
 80043c4:	f000 f892 	bl	80044ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80043c8:	2301      	movs	r3, #1
 80043ca:	61bb      	str	r3, [r7, #24]
 80043cc:	e002      	b.n	80043d4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80043ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043d2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80043d4:	69bb      	ldr	r3, [r7, #24]
	}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3720      	adds	r7, #32
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b088      	sub	sp, #32
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	60f8      	str	r0, [r7, #12]
 80043e6:	60b9      	str	r1, [r7, #8]
 80043e8:	607a      	str	r2, [r7, #4]
 80043ea:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80043ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ee:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	461a      	mov	r2, r3
 80043f6:	21a5      	movs	r1, #165	; 0xa5
 80043f8:	f001 fd52 	bl	8005ea0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80043fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004406:	3b01      	subs	r3, #1
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4413      	add	r3, r2
 800440c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	f023 0307 	bic.w	r3, r3, #7
 8004414:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	f003 0307 	and.w	r3, r3, #7
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00a      	beq.n	8004436 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004424:	f383 8811 	msr	BASEPRI, r3
 8004428:	f3bf 8f6f 	isb	sy
 800442c:	f3bf 8f4f 	dsb	sy
 8004430:	617b      	str	r3, [r7, #20]
}
 8004432:	bf00      	nop
 8004434:	e7fe      	b.n	8004434 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004436:	2300      	movs	r3, #0
 8004438:	61fb      	str	r3, [r7, #28]
 800443a:	e012      	b.n	8004462 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800443c:	68ba      	ldr	r2, [r7, #8]
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	4413      	add	r3, r2
 8004442:	7819      	ldrb	r1, [r3, #0]
 8004444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	4413      	add	r3, r2
 800444a:	3334      	adds	r3, #52	; 0x34
 800444c:	460a      	mov	r2, r1
 800444e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	4413      	add	r3, r2
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d006      	beq.n	800446a <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	3301      	adds	r3, #1
 8004460:	61fb      	str	r3, [r7, #28]
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	2b0f      	cmp	r3, #15
 8004466:	d9e9      	bls.n	800443c <prvInitialiseNewTask+0x5e>
 8004468:	e000      	b.n	800446c <prvInitialiseNewTask+0x8e>
		{
			break;
 800446a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800446c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446e:	2200      	movs	r2, #0
 8004470:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004476:	2b37      	cmp	r3, #55	; 0x37
 8004478:	d901      	bls.n	800447e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800447a:	2337      	movs	r3, #55	; 0x37
 800447c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800447e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004480:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004482:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004486:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004488:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800448a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448c:	2200      	movs	r2, #0
 800448e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004492:	3304      	adds	r3, #4
 8004494:	4618      	mov	r0, r3
 8004496:	f7ff f930 	bl	80036fa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800449a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449c:	3318      	adds	r3, #24
 800449e:	4618      	mov	r0, r3
 80044a0:	f7ff f92b 	bl	80036fa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80044a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044a8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80044b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80044b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044b8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80044ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044bc:	2200      	movs	r2, #0
 80044be:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80044c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80044c8:	683a      	ldr	r2, [r7, #0]
 80044ca:	68f9      	ldr	r1, [r7, #12]
 80044cc:	69b8      	ldr	r0, [r7, #24]
 80044ce:	f001 f8ef 	bl	80056b0 <pxPortInitialiseStack>
 80044d2:	4602      	mov	r2, r0
 80044d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80044d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d002      	beq.n	80044e4 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80044de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044e2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80044e4:	bf00      	nop
 80044e6:	3720      	adds	r7, #32
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80044f4:	f001 f9ca 	bl	800588c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80044f8:	4b2d      	ldr	r3, [pc, #180]	; (80045b0 <prvAddNewTaskToReadyList+0xc4>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	3301      	adds	r3, #1
 80044fe:	4a2c      	ldr	r2, [pc, #176]	; (80045b0 <prvAddNewTaskToReadyList+0xc4>)
 8004500:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004502:	4b2c      	ldr	r3, [pc, #176]	; (80045b4 <prvAddNewTaskToReadyList+0xc8>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d109      	bne.n	800451e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800450a:	4a2a      	ldr	r2, [pc, #168]	; (80045b4 <prvAddNewTaskToReadyList+0xc8>)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004510:	4b27      	ldr	r3, [pc, #156]	; (80045b0 <prvAddNewTaskToReadyList+0xc4>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d110      	bne.n	800453a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004518:	f000 fc16 	bl	8004d48 <prvInitialiseTaskLists>
 800451c:	e00d      	b.n	800453a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800451e:	4b26      	ldr	r3, [pc, #152]	; (80045b8 <prvAddNewTaskToReadyList+0xcc>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d109      	bne.n	800453a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004526:	4b23      	ldr	r3, [pc, #140]	; (80045b4 <prvAddNewTaskToReadyList+0xc8>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004530:	429a      	cmp	r2, r3
 8004532:	d802      	bhi.n	800453a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004534:	4a1f      	ldr	r2, [pc, #124]	; (80045b4 <prvAddNewTaskToReadyList+0xc8>)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800453a:	4b20      	ldr	r3, [pc, #128]	; (80045bc <prvAddNewTaskToReadyList+0xd0>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	3301      	adds	r3, #1
 8004540:	4a1e      	ldr	r2, [pc, #120]	; (80045bc <prvAddNewTaskToReadyList+0xd0>)
 8004542:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004544:	4b1d      	ldr	r3, [pc, #116]	; (80045bc <prvAddNewTaskToReadyList+0xd0>)
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004550:	4b1b      	ldr	r3, [pc, #108]	; (80045c0 <prvAddNewTaskToReadyList+0xd4>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	429a      	cmp	r2, r3
 8004556:	d903      	bls.n	8004560 <prvAddNewTaskToReadyList+0x74>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455c:	4a18      	ldr	r2, [pc, #96]	; (80045c0 <prvAddNewTaskToReadyList+0xd4>)
 800455e:	6013      	str	r3, [r2, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004564:	4613      	mov	r3, r2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	4413      	add	r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4a15      	ldr	r2, [pc, #84]	; (80045c4 <prvAddNewTaskToReadyList+0xd8>)
 800456e:	441a      	add	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	3304      	adds	r3, #4
 8004574:	4619      	mov	r1, r3
 8004576:	4610      	mov	r0, r2
 8004578:	f7ff f8cb 	bl	8003712 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800457c:	f001 f9b6 	bl	80058ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004580:	4b0d      	ldr	r3, [pc, #52]	; (80045b8 <prvAddNewTaskToReadyList+0xcc>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00e      	beq.n	80045a6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004588:	4b0a      	ldr	r3, [pc, #40]	; (80045b4 <prvAddNewTaskToReadyList+0xc8>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004592:	429a      	cmp	r2, r3
 8004594:	d207      	bcs.n	80045a6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004596:	4b0c      	ldr	r3, [pc, #48]	; (80045c8 <prvAddNewTaskToReadyList+0xdc>)
 8004598:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800459c:	601a      	str	r2, [r3, #0]
 800459e:	f3bf 8f4f 	dsb	sy
 80045a2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045a6:	bf00      	nop
 80045a8:	3708      	adds	r7, #8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	200009cc 	.word	0x200009cc
 80045b4:	200004f8 	.word	0x200004f8
 80045b8:	200009d8 	.word	0x200009d8
 80045bc:	200009e8 	.word	0x200009e8
 80045c0:	200009d4 	.word	0x200009d4
 80045c4:	200004fc 	.word	0x200004fc
 80045c8:	e000ed04 	.word	0xe000ed04

080045cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80045d4:	2300      	movs	r3, #0
 80045d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d017      	beq.n	800460e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80045de:	4b13      	ldr	r3, [pc, #76]	; (800462c <vTaskDelay+0x60>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00a      	beq.n	80045fc <vTaskDelay+0x30>
	__asm volatile
 80045e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ea:	f383 8811 	msr	BASEPRI, r3
 80045ee:	f3bf 8f6f 	isb	sy
 80045f2:	f3bf 8f4f 	dsb	sy
 80045f6:	60bb      	str	r3, [r7, #8]
}
 80045f8:	bf00      	nop
 80045fa:	e7fe      	b.n	80045fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80045fc:	f000 f880 	bl	8004700 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004600:	2100      	movs	r1, #0
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 fcee 	bl	8004fe4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004608:	f000 f888 	bl	800471c <xTaskResumeAll>
 800460c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d107      	bne.n	8004624 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004614:	4b06      	ldr	r3, [pc, #24]	; (8004630 <vTaskDelay+0x64>)
 8004616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	f3bf 8f4f 	dsb	sy
 8004620:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004624:	bf00      	nop
 8004626:	3710      	adds	r7, #16
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	200009f4 	.word	0x200009f4
 8004630:	e000ed04 	.word	0xe000ed04

08004634 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b08a      	sub	sp, #40	; 0x28
 8004638:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800463a:	2300      	movs	r3, #0
 800463c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800463e:	2300      	movs	r3, #0
 8004640:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004642:	463a      	mov	r2, r7
 8004644:	1d39      	adds	r1, r7, #4
 8004646:	f107 0308 	add.w	r3, r7, #8
 800464a:	4618      	mov	r0, r3
 800464c:	f7ff f806 	bl	800365c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004650:	6839      	ldr	r1, [r7, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	68ba      	ldr	r2, [r7, #8]
 8004656:	9202      	str	r2, [sp, #8]
 8004658:	9301      	str	r3, [sp, #4]
 800465a:	2300      	movs	r3, #0
 800465c:	9300      	str	r3, [sp, #0]
 800465e:	2300      	movs	r3, #0
 8004660:	460a      	mov	r2, r1
 8004662:	4921      	ldr	r1, [pc, #132]	; (80046e8 <vTaskStartScheduler+0xb4>)
 8004664:	4821      	ldr	r0, [pc, #132]	; (80046ec <vTaskStartScheduler+0xb8>)
 8004666:	f7ff fe19 	bl	800429c <xTaskCreateStatic>
 800466a:	4603      	mov	r3, r0
 800466c:	4a20      	ldr	r2, [pc, #128]	; (80046f0 <vTaskStartScheduler+0xbc>)
 800466e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004670:	4b1f      	ldr	r3, [pc, #124]	; (80046f0 <vTaskStartScheduler+0xbc>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d002      	beq.n	800467e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004678:	2301      	movs	r3, #1
 800467a:	617b      	str	r3, [r7, #20]
 800467c:	e001      	b.n	8004682 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800467e:	2300      	movs	r3, #0
 8004680:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d102      	bne.n	800468e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004688:	f000 fd00 	bl	800508c <xTimerCreateTimerTask>
 800468c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d116      	bne.n	80046c2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004698:	f383 8811 	msr	BASEPRI, r3
 800469c:	f3bf 8f6f 	isb	sy
 80046a0:	f3bf 8f4f 	dsb	sy
 80046a4:	613b      	str	r3, [r7, #16]
}
 80046a6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80046a8:	4b12      	ldr	r3, [pc, #72]	; (80046f4 <vTaskStartScheduler+0xc0>)
 80046aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046ae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80046b0:	4b11      	ldr	r3, [pc, #68]	; (80046f8 <vTaskStartScheduler+0xc4>)
 80046b2:	2201      	movs	r2, #1
 80046b4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80046b6:	4b11      	ldr	r3, [pc, #68]	; (80046fc <vTaskStartScheduler+0xc8>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80046bc:	f001 f874 	bl	80057a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80046c0:	e00e      	b.n	80046e0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046c8:	d10a      	bne.n	80046e0 <vTaskStartScheduler+0xac>
	__asm volatile
 80046ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ce:	f383 8811 	msr	BASEPRI, r3
 80046d2:	f3bf 8f6f 	isb	sy
 80046d6:	f3bf 8f4f 	dsb	sy
 80046da:	60fb      	str	r3, [r7, #12]
}
 80046dc:	bf00      	nop
 80046de:	e7fe      	b.n	80046de <vTaskStartScheduler+0xaa>
}
 80046e0:	bf00      	nop
 80046e2:	3718      	adds	r7, #24
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	08005f80 	.word	0x08005f80
 80046ec:	08004d19 	.word	0x08004d19
 80046f0:	200009f0 	.word	0x200009f0
 80046f4:	200009ec 	.word	0x200009ec
 80046f8:	200009d8 	.word	0x200009d8
 80046fc:	200009d0 	.word	0x200009d0

08004700 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004700:	b480      	push	{r7}
 8004702:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004704:	4b04      	ldr	r3, [pc, #16]	; (8004718 <vTaskSuspendAll+0x18>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	3301      	adds	r3, #1
 800470a:	4a03      	ldr	r2, [pc, #12]	; (8004718 <vTaskSuspendAll+0x18>)
 800470c:	6013      	str	r3, [r2, #0]
}
 800470e:	bf00      	nop
 8004710:	46bd      	mov	sp, r7
 8004712:	bc80      	pop	{r7}
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	200009f4 	.word	0x200009f4

0800471c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004722:	2300      	movs	r3, #0
 8004724:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004726:	2300      	movs	r3, #0
 8004728:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800472a:	4b42      	ldr	r3, [pc, #264]	; (8004834 <xTaskResumeAll+0x118>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10a      	bne.n	8004748 <xTaskResumeAll+0x2c>
	__asm volatile
 8004732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004736:	f383 8811 	msr	BASEPRI, r3
 800473a:	f3bf 8f6f 	isb	sy
 800473e:	f3bf 8f4f 	dsb	sy
 8004742:	603b      	str	r3, [r7, #0]
}
 8004744:	bf00      	nop
 8004746:	e7fe      	b.n	8004746 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004748:	f001 f8a0 	bl	800588c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800474c:	4b39      	ldr	r3, [pc, #228]	; (8004834 <xTaskResumeAll+0x118>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	3b01      	subs	r3, #1
 8004752:	4a38      	ldr	r2, [pc, #224]	; (8004834 <xTaskResumeAll+0x118>)
 8004754:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004756:	4b37      	ldr	r3, [pc, #220]	; (8004834 <xTaskResumeAll+0x118>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d162      	bne.n	8004824 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800475e:	4b36      	ldr	r3, [pc, #216]	; (8004838 <xTaskResumeAll+0x11c>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d05e      	beq.n	8004824 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004766:	e02f      	b.n	80047c8 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004768:	4b34      	ldr	r3, [pc, #208]	; (800483c <xTaskResumeAll+0x120>)
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	3318      	adds	r3, #24
 8004774:	4618      	mov	r0, r3
 8004776:	f7ff f827 	bl	80037c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	3304      	adds	r3, #4
 800477e:	4618      	mov	r0, r3
 8004780:	f7ff f822 	bl	80037c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004788:	4b2d      	ldr	r3, [pc, #180]	; (8004840 <xTaskResumeAll+0x124>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	429a      	cmp	r2, r3
 800478e:	d903      	bls.n	8004798 <xTaskResumeAll+0x7c>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004794:	4a2a      	ldr	r2, [pc, #168]	; (8004840 <xTaskResumeAll+0x124>)
 8004796:	6013      	str	r3, [r2, #0]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800479c:	4613      	mov	r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	4413      	add	r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	4a27      	ldr	r2, [pc, #156]	; (8004844 <xTaskResumeAll+0x128>)
 80047a6:	441a      	add	r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	3304      	adds	r3, #4
 80047ac:	4619      	mov	r1, r3
 80047ae:	4610      	mov	r0, r2
 80047b0:	f7fe ffaf 	bl	8003712 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047b8:	4b23      	ldr	r3, [pc, #140]	; (8004848 <xTaskResumeAll+0x12c>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047be:	429a      	cmp	r2, r3
 80047c0:	d302      	bcc.n	80047c8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80047c2:	4b22      	ldr	r3, [pc, #136]	; (800484c <xTaskResumeAll+0x130>)
 80047c4:	2201      	movs	r2, #1
 80047c6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047c8:	4b1c      	ldr	r3, [pc, #112]	; (800483c <xTaskResumeAll+0x120>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1cb      	bne.n	8004768 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d001      	beq.n	80047da <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80047d6:	f000 fb55 	bl	8004e84 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80047da:	4b1d      	ldr	r3, [pc, #116]	; (8004850 <xTaskResumeAll+0x134>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d010      	beq.n	8004808 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80047e6:	f000 f845 	bl	8004874 <xTaskIncrementTick>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d002      	beq.n	80047f6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80047f0:	4b16      	ldr	r3, [pc, #88]	; (800484c <xTaskResumeAll+0x130>)
 80047f2:	2201      	movs	r2, #1
 80047f4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	3b01      	subs	r3, #1
 80047fa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1f1      	bne.n	80047e6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8004802:	4b13      	ldr	r3, [pc, #76]	; (8004850 <xTaskResumeAll+0x134>)
 8004804:	2200      	movs	r2, #0
 8004806:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004808:	4b10      	ldr	r3, [pc, #64]	; (800484c <xTaskResumeAll+0x130>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d009      	beq.n	8004824 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004810:	2301      	movs	r3, #1
 8004812:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004814:	4b0f      	ldr	r3, [pc, #60]	; (8004854 <xTaskResumeAll+0x138>)
 8004816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800481a:	601a      	str	r2, [r3, #0]
 800481c:	f3bf 8f4f 	dsb	sy
 8004820:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004824:	f001 f862 	bl	80058ec <vPortExitCritical>

	return xAlreadyYielded;
 8004828:	68bb      	ldr	r3, [r7, #8]
}
 800482a:	4618      	mov	r0, r3
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	200009f4 	.word	0x200009f4
 8004838:	200009cc 	.word	0x200009cc
 800483c:	2000098c 	.word	0x2000098c
 8004840:	200009d4 	.word	0x200009d4
 8004844:	200004fc 	.word	0x200004fc
 8004848:	200004f8 	.word	0x200004f8
 800484c:	200009e0 	.word	0x200009e0
 8004850:	200009dc 	.word	0x200009dc
 8004854:	e000ed04 	.word	0xe000ed04

08004858 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800485e:	4b04      	ldr	r3, [pc, #16]	; (8004870 <xTaskGetTickCount+0x18>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004864:	687b      	ldr	r3, [r7, #4]
}
 8004866:	4618      	mov	r0, r3
 8004868:	370c      	adds	r7, #12
 800486a:	46bd      	mov	sp, r7
 800486c:	bc80      	pop	{r7}
 800486e:	4770      	bx	lr
 8004870:	200009d0 	.word	0x200009d0

08004874 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b086      	sub	sp, #24
 8004878:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800487a:	2300      	movs	r3, #0
 800487c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800487e:	4b51      	ldr	r3, [pc, #324]	; (80049c4 <xTaskIncrementTick+0x150>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	f040 808e 	bne.w	80049a4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004888:	4b4f      	ldr	r3, [pc, #316]	; (80049c8 <xTaskIncrementTick+0x154>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	3301      	adds	r3, #1
 800488e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004890:	4a4d      	ldr	r2, [pc, #308]	; (80049c8 <xTaskIncrementTick+0x154>)
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d120      	bne.n	80048de <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800489c:	4b4b      	ldr	r3, [pc, #300]	; (80049cc <xTaskIncrementTick+0x158>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00a      	beq.n	80048bc <xTaskIncrementTick+0x48>
	__asm volatile
 80048a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048aa:	f383 8811 	msr	BASEPRI, r3
 80048ae:	f3bf 8f6f 	isb	sy
 80048b2:	f3bf 8f4f 	dsb	sy
 80048b6:	603b      	str	r3, [r7, #0]
}
 80048b8:	bf00      	nop
 80048ba:	e7fe      	b.n	80048ba <xTaskIncrementTick+0x46>
 80048bc:	4b43      	ldr	r3, [pc, #268]	; (80049cc <xTaskIncrementTick+0x158>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	60fb      	str	r3, [r7, #12]
 80048c2:	4b43      	ldr	r3, [pc, #268]	; (80049d0 <xTaskIncrementTick+0x15c>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a41      	ldr	r2, [pc, #260]	; (80049cc <xTaskIncrementTick+0x158>)
 80048c8:	6013      	str	r3, [r2, #0]
 80048ca:	4a41      	ldr	r2, [pc, #260]	; (80049d0 <xTaskIncrementTick+0x15c>)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6013      	str	r3, [r2, #0]
 80048d0:	4b40      	ldr	r3, [pc, #256]	; (80049d4 <xTaskIncrementTick+0x160>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	3301      	adds	r3, #1
 80048d6:	4a3f      	ldr	r2, [pc, #252]	; (80049d4 <xTaskIncrementTick+0x160>)
 80048d8:	6013      	str	r3, [r2, #0]
 80048da:	f000 fad3 	bl	8004e84 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80048de:	4b3e      	ldr	r3, [pc, #248]	; (80049d8 <xTaskIncrementTick+0x164>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d34e      	bcc.n	8004986 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048e8:	4b38      	ldr	r3, [pc, #224]	; (80049cc <xTaskIncrementTick+0x158>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d101      	bne.n	80048f6 <xTaskIncrementTick+0x82>
 80048f2:	2301      	movs	r3, #1
 80048f4:	e000      	b.n	80048f8 <xTaskIncrementTick+0x84>
 80048f6:	2300      	movs	r3, #0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d004      	beq.n	8004906 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048fc:	4b36      	ldr	r3, [pc, #216]	; (80049d8 <xTaskIncrementTick+0x164>)
 80048fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004902:	601a      	str	r2, [r3, #0]
					break;
 8004904:	e03f      	b.n	8004986 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004906:	4b31      	ldr	r3, [pc, #196]	; (80049cc <xTaskIncrementTick+0x158>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	429a      	cmp	r2, r3
 800491c:	d203      	bcs.n	8004926 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800491e:	4a2e      	ldr	r2, [pc, #184]	; (80049d8 <xTaskIncrementTick+0x164>)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6013      	str	r3, [r2, #0]
						break;
 8004924:	e02f      	b.n	8004986 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	3304      	adds	r3, #4
 800492a:	4618      	mov	r0, r3
 800492c:	f7fe ff4c 	bl	80037c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004934:	2b00      	cmp	r3, #0
 8004936:	d004      	beq.n	8004942 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	3318      	adds	r3, #24
 800493c:	4618      	mov	r0, r3
 800493e:	f7fe ff43 	bl	80037c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004946:	4b25      	ldr	r3, [pc, #148]	; (80049dc <xTaskIncrementTick+0x168>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	429a      	cmp	r2, r3
 800494c:	d903      	bls.n	8004956 <xTaskIncrementTick+0xe2>
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004952:	4a22      	ldr	r2, [pc, #136]	; (80049dc <xTaskIncrementTick+0x168>)
 8004954:	6013      	str	r3, [r2, #0]
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800495a:	4613      	mov	r3, r2
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	4413      	add	r3, r2
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	4a1f      	ldr	r2, [pc, #124]	; (80049e0 <xTaskIncrementTick+0x16c>)
 8004964:	441a      	add	r2, r3
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	3304      	adds	r3, #4
 800496a:	4619      	mov	r1, r3
 800496c:	4610      	mov	r0, r2
 800496e:	f7fe fed0 	bl	8003712 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004976:	4b1b      	ldr	r3, [pc, #108]	; (80049e4 <xTaskIncrementTick+0x170>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497c:	429a      	cmp	r2, r3
 800497e:	d3b3      	bcc.n	80048e8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004980:	2301      	movs	r3, #1
 8004982:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004984:	e7b0      	b.n	80048e8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004986:	4b17      	ldr	r3, [pc, #92]	; (80049e4 <xTaskIncrementTick+0x170>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800498c:	4914      	ldr	r1, [pc, #80]	; (80049e0 <xTaskIncrementTick+0x16c>)
 800498e:	4613      	mov	r3, r2
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	4413      	add	r3, r2
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	440b      	add	r3, r1
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d907      	bls.n	80049ae <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800499e:	2301      	movs	r3, #1
 80049a0:	617b      	str	r3, [r7, #20]
 80049a2:	e004      	b.n	80049ae <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80049a4:	4b10      	ldr	r3, [pc, #64]	; (80049e8 <xTaskIncrementTick+0x174>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	3301      	adds	r3, #1
 80049aa:	4a0f      	ldr	r2, [pc, #60]	; (80049e8 <xTaskIncrementTick+0x174>)
 80049ac:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80049ae:	4b0f      	ldr	r3, [pc, #60]	; (80049ec <xTaskIncrementTick+0x178>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d001      	beq.n	80049ba <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80049b6:	2301      	movs	r3, #1
 80049b8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80049ba:	697b      	ldr	r3, [r7, #20]
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3718      	adds	r7, #24
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	200009f4 	.word	0x200009f4
 80049c8:	200009d0 	.word	0x200009d0
 80049cc:	20000984 	.word	0x20000984
 80049d0:	20000988 	.word	0x20000988
 80049d4:	200009e4 	.word	0x200009e4
 80049d8:	200009ec 	.word	0x200009ec
 80049dc:	200009d4 	.word	0x200009d4
 80049e0:	200004fc 	.word	0x200004fc
 80049e4:	200004f8 	.word	0x200004f8
 80049e8:	200009dc 	.word	0x200009dc
 80049ec:	200009e0 	.word	0x200009e0

080049f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80049f6:	4b27      	ldr	r3, [pc, #156]	; (8004a94 <vTaskSwitchContext+0xa4>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d003      	beq.n	8004a06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80049fe:	4b26      	ldr	r3, [pc, #152]	; (8004a98 <vTaskSwitchContext+0xa8>)
 8004a00:	2201      	movs	r2, #1
 8004a02:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004a04:	e041      	b.n	8004a8a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004a06:	4b24      	ldr	r3, [pc, #144]	; (8004a98 <vTaskSwitchContext+0xa8>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004a0c:	4b23      	ldr	r3, [pc, #140]	; (8004a9c <vTaskSwitchContext+0xac>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	60fb      	str	r3, [r7, #12]
 8004a12:	e010      	b.n	8004a36 <vTaskSwitchContext+0x46>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d10a      	bne.n	8004a30 <vTaskSwitchContext+0x40>
	__asm volatile
 8004a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1e:	f383 8811 	msr	BASEPRI, r3
 8004a22:	f3bf 8f6f 	isb	sy
 8004a26:	f3bf 8f4f 	dsb	sy
 8004a2a:	607b      	str	r3, [r7, #4]
}
 8004a2c:	bf00      	nop
 8004a2e:	e7fe      	b.n	8004a2e <vTaskSwitchContext+0x3e>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	3b01      	subs	r3, #1
 8004a34:	60fb      	str	r3, [r7, #12]
 8004a36:	491a      	ldr	r1, [pc, #104]	; (8004aa0 <vTaskSwitchContext+0xb0>)
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	4413      	add	r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	440b      	add	r3, r1
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d0e4      	beq.n	8004a14 <vTaskSwitchContext+0x24>
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	4413      	add	r3, r2
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	4a12      	ldr	r2, [pc, #72]	; (8004aa0 <vTaskSwitchContext+0xb0>)
 8004a56:	4413      	add	r3, r2
 8004a58:	60bb      	str	r3, [r7, #8]
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	605a      	str	r2, [r3, #4]
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	685a      	ldr	r2, [r3, #4]
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	3308      	adds	r3, #8
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d104      	bne.n	8004a7a <vTaskSwitchContext+0x8a>
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	685a      	ldr	r2, [r3, #4]
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	605a      	str	r2, [r3, #4]
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	4a08      	ldr	r2, [pc, #32]	; (8004aa4 <vTaskSwitchContext+0xb4>)
 8004a82:	6013      	str	r3, [r2, #0]
 8004a84:	4a05      	ldr	r2, [pc, #20]	; (8004a9c <vTaskSwitchContext+0xac>)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6013      	str	r3, [r2, #0]
}
 8004a8a:	bf00      	nop
 8004a8c:	3714      	adds	r7, #20
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bc80      	pop	{r7}
 8004a92:	4770      	bx	lr
 8004a94:	200009f4 	.word	0x200009f4
 8004a98:	200009e0 	.word	0x200009e0
 8004a9c:	200009d4 	.word	0x200009d4
 8004aa0:	200004fc 	.word	0x200004fc
 8004aa4:	200004f8 	.word	0x200004f8

08004aa8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d10a      	bne.n	8004ace <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004abc:	f383 8811 	msr	BASEPRI, r3
 8004ac0:	f3bf 8f6f 	isb	sy
 8004ac4:	f3bf 8f4f 	dsb	sy
 8004ac8:	60fb      	str	r3, [r7, #12]
}
 8004aca:	bf00      	nop
 8004acc:	e7fe      	b.n	8004acc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ace:	4b07      	ldr	r3, [pc, #28]	; (8004aec <vTaskPlaceOnEventList+0x44>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	3318      	adds	r3, #24
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f7fe fe3e 	bl	8003758 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004adc:	2101      	movs	r1, #1
 8004ade:	6838      	ldr	r0, [r7, #0]
 8004ae0:	f000 fa80 	bl	8004fe4 <prvAddCurrentTaskToDelayedList>
}
 8004ae4:	bf00      	nop
 8004ae6:	3710      	adds	r7, #16
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	200004f8 	.word	0x200004f8

08004af0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b086      	sub	sp, #24
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10a      	bne.n	8004b18 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b06:	f383 8811 	msr	BASEPRI, r3
 8004b0a:	f3bf 8f6f 	isb	sy
 8004b0e:	f3bf 8f4f 	dsb	sy
 8004b12:	617b      	str	r3, [r7, #20]
}
 8004b14:	bf00      	nop
 8004b16:	e7fe      	b.n	8004b16 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b18:	4b0a      	ldr	r3, [pc, #40]	; (8004b44 <vTaskPlaceOnEventListRestricted+0x54>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	3318      	adds	r3, #24
 8004b1e:	4619      	mov	r1, r3
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f7fe fdf6 	bl	8003712 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d002      	beq.n	8004b32 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004b2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b30:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004b32:	6879      	ldr	r1, [r7, #4]
 8004b34:	68b8      	ldr	r0, [r7, #8]
 8004b36:	f000 fa55 	bl	8004fe4 <prvAddCurrentTaskToDelayedList>
	}
 8004b3a:	bf00      	nop
 8004b3c:	3718      	adds	r7, #24
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	200004f8 	.word	0x200004f8

08004b48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b086      	sub	sp, #24
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10a      	bne.n	8004b74 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b62:	f383 8811 	msr	BASEPRI, r3
 8004b66:	f3bf 8f6f 	isb	sy
 8004b6a:	f3bf 8f4f 	dsb	sy
 8004b6e:	60fb      	str	r3, [r7, #12]
}
 8004b70:	bf00      	nop
 8004b72:	e7fe      	b.n	8004b72 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	3318      	adds	r3, #24
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7fe fe25 	bl	80037c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b7e:	4b1e      	ldr	r3, [pc, #120]	; (8004bf8 <xTaskRemoveFromEventList+0xb0>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d11d      	bne.n	8004bc2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	3304      	adds	r3, #4
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7fe fe1c 	bl	80037c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b94:	4b19      	ldr	r3, [pc, #100]	; (8004bfc <xTaskRemoveFromEventList+0xb4>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d903      	bls.n	8004ba4 <xTaskRemoveFromEventList+0x5c>
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba0:	4a16      	ldr	r2, [pc, #88]	; (8004bfc <xTaskRemoveFromEventList+0xb4>)
 8004ba2:	6013      	str	r3, [r2, #0]
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ba8:	4613      	mov	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4413      	add	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4a13      	ldr	r2, [pc, #76]	; (8004c00 <xTaskRemoveFromEventList+0xb8>)
 8004bb2:	441a      	add	r2, r3
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	3304      	adds	r3, #4
 8004bb8:	4619      	mov	r1, r3
 8004bba:	4610      	mov	r0, r2
 8004bbc:	f7fe fda9 	bl	8003712 <vListInsertEnd>
 8004bc0:	e005      	b.n	8004bce <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	3318      	adds	r3, #24
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	480e      	ldr	r0, [pc, #56]	; (8004c04 <xTaskRemoveFromEventList+0xbc>)
 8004bca:	f7fe fda2 	bl	8003712 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bd2:	4b0d      	ldr	r3, [pc, #52]	; (8004c08 <xTaskRemoveFromEventList+0xc0>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d905      	bls.n	8004be8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004be0:	4b0a      	ldr	r3, [pc, #40]	; (8004c0c <xTaskRemoveFromEventList+0xc4>)
 8004be2:	2201      	movs	r2, #1
 8004be4:	601a      	str	r2, [r3, #0]
 8004be6:	e001      	b.n	8004bec <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004be8:	2300      	movs	r3, #0
 8004bea:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004bec:	697b      	ldr	r3, [r7, #20]
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3718      	adds	r7, #24
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	200009f4 	.word	0x200009f4
 8004bfc:	200009d4 	.word	0x200009d4
 8004c00:	200004fc 	.word	0x200004fc
 8004c04:	2000098c 	.word	0x2000098c
 8004c08:	200004f8 	.word	0x200004f8
 8004c0c:	200009e0 	.word	0x200009e0

08004c10 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004c18:	4b06      	ldr	r3, [pc, #24]	; (8004c34 <vTaskInternalSetTimeOutState+0x24>)
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004c20:	4b05      	ldr	r3, [pc, #20]	; (8004c38 <vTaskInternalSetTimeOutState+0x28>)
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	605a      	str	r2, [r3, #4]
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bc80      	pop	{r7}
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	200009e4 	.word	0x200009e4
 8004c38:	200009d0 	.word	0x200009d0

08004c3c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b088      	sub	sp, #32
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d10a      	bne.n	8004c62 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c50:	f383 8811 	msr	BASEPRI, r3
 8004c54:	f3bf 8f6f 	isb	sy
 8004c58:	f3bf 8f4f 	dsb	sy
 8004c5c:	613b      	str	r3, [r7, #16]
}
 8004c5e:	bf00      	nop
 8004c60:	e7fe      	b.n	8004c60 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d10a      	bne.n	8004c7e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6c:	f383 8811 	msr	BASEPRI, r3
 8004c70:	f3bf 8f6f 	isb	sy
 8004c74:	f3bf 8f4f 	dsb	sy
 8004c78:	60fb      	str	r3, [r7, #12]
}
 8004c7a:	bf00      	nop
 8004c7c:	e7fe      	b.n	8004c7c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004c7e:	f000 fe05 	bl	800588c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004c82:	4b1d      	ldr	r3, [pc, #116]	; (8004cf8 <xTaskCheckForTimeOut+0xbc>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	69ba      	ldr	r2, [r7, #24]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c9a:	d102      	bne.n	8004ca2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	61fb      	str	r3, [r7, #28]
 8004ca0:	e023      	b.n	8004cea <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	4b15      	ldr	r3, [pc, #84]	; (8004cfc <xTaskCheckForTimeOut+0xc0>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d007      	beq.n	8004cbe <xTaskCheckForTimeOut+0x82>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	69ba      	ldr	r2, [r7, #24]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d302      	bcc.n	8004cbe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	61fb      	str	r3, [r7, #28]
 8004cbc:	e015      	b.n	8004cea <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d20b      	bcs.n	8004ce0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	1ad2      	subs	r2, r2, r3
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f7ff ff9b 	bl	8004c10 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	61fb      	str	r3, [r7, #28]
 8004cde:	e004      	b.n	8004cea <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004cea:	f000 fdff 	bl	80058ec <vPortExitCritical>

	return xReturn;
 8004cee:	69fb      	ldr	r3, [r7, #28]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3720      	adds	r7, #32
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	200009d0 	.word	0x200009d0
 8004cfc:	200009e4 	.word	0x200009e4

08004d00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004d00:	b480      	push	{r7}
 8004d02:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004d04:	4b03      	ldr	r3, [pc, #12]	; (8004d14 <vTaskMissedYield+0x14>)
 8004d06:	2201      	movs	r2, #1
 8004d08:	601a      	str	r2, [r3, #0]
}
 8004d0a:	bf00      	nop
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bc80      	pop	{r7}
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	200009e0 	.word	0x200009e0

08004d18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004d20:	f000 f852 	bl	8004dc8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004d24:	4b06      	ldr	r3, [pc, #24]	; (8004d40 <prvIdleTask+0x28>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d9f9      	bls.n	8004d20 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004d2c:	4b05      	ldr	r3, [pc, #20]	; (8004d44 <prvIdleTask+0x2c>)
 8004d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d32:	601a      	str	r2, [r3, #0]
 8004d34:	f3bf 8f4f 	dsb	sy
 8004d38:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004d3c:	e7f0      	b.n	8004d20 <prvIdleTask+0x8>
 8004d3e:	bf00      	nop
 8004d40:	200004fc 	.word	0x200004fc
 8004d44:	e000ed04 	.word	0xe000ed04

08004d48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d4e:	2300      	movs	r3, #0
 8004d50:	607b      	str	r3, [r7, #4]
 8004d52:	e00c      	b.n	8004d6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	4613      	mov	r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	4413      	add	r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	4a12      	ldr	r2, [pc, #72]	; (8004da8 <prvInitialiseTaskLists+0x60>)
 8004d60:	4413      	add	r3, r2
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7fe fcaa 	bl	80036bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	607b      	str	r3, [r7, #4]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2b37      	cmp	r3, #55	; 0x37
 8004d72:	d9ef      	bls.n	8004d54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004d74:	480d      	ldr	r0, [pc, #52]	; (8004dac <prvInitialiseTaskLists+0x64>)
 8004d76:	f7fe fca1 	bl	80036bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004d7a:	480d      	ldr	r0, [pc, #52]	; (8004db0 <prvInitialiseTaskLists+0x68>)
 8004d7c:	f7fe fc9e 	bl	80036bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004d80:	480c      	ldr	r0, [pc, #48]	; (8004db4 <prvInitialiseTaskLists+0x6c>)
 8004d82:	f7fe fc9b 	bl	80036bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004d86:	480c      	ldr	r0, [pc, #48]	; (8004db8 <prvInitialiseTaskLists+0x70>)
 8004d88:	f7fe fc98 	bl	80036bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004d8c:	480b      	ldr	r0, [pc, #44]	; (8004dbc <prvInitialiseTaskLists+0x74>)
 8004d8e:	f7fe fc95 	bl	80036bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004d92:	4b0b      	ldr	r3, [pc, #44]	; (8004dc0 <prvInitialiseTaskLists+0x78>)
 8004d94:	4a05      	ldr	r2, [pc, #20]	; (8004dac <prvInitialiseTaskLists+0x64>)
 8004d96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004d98:	4b0a      	ldr	r3, [pc, #40]	; (8004dc4 <prvInitialiseTaskLists+0x7c>)
 8004d9a:	4a05      	ldr	r2, [pc, #20]	; (8004db0 <prvInitialiseTaskLists+0x68>)
 8004d9c:	601a      	str	r2, [r3, #0]
}
 8004d9e:	bf00      	nop
 8004da0:	3708      	adds	r7, #8
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	200004fc 	.word	0x200004fc
 8004dac:	2000095c 	.word	0x2000095c
 8004db0:	20000970 	.word	0x20000970
 8004db4:	2000098c 	.word	0x2000098c
 8004db8:	200009a0 	.word	0x200009a0
 8004dbc:	200009b8 	.word	0x200009b8
 8004dc0:	20000984 	.word	0x20000984
 8004dc4:	20000988 	.word	0x20000988

08004dc8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004dce:	e019      	b.n	8004e04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004dd0:	f000 fd5c 	bl	800588c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004dd4:	4b10      	ldr	r3, [pc, #64]	; (8004e18 <prvCheckTasksWaitingTermination+0x50>)
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	3304      	adds	r3, #4
 8004de0:	4618      	mov	r0, r3
 8004de2:	f7fe fcf1 	bl	80037c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004de6:	4b0d      	ldr	r3, [pc, #52]	; (8004e1c <prvCheckTasksWaitingTermination+0x54>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	3b01      	subs	r3, #1
 8004dec:	4a0b      	ldr	r2, [pc, #44]	; (8004e1c <prvCheckTasksWaitingTermination+0x54>)
 8004dee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004df0:	4b0b      	ldr	r3, [pc, #44]	; (8004e20 <prvCheckTasksWaitingTermination+0x58>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	3b01      	subs	r3, #1
 8004df6:	4a0a      	ldr	r2, [pc, #40]	; (8004e20 <prvCheckTasksWaitingTermination+0x58>)
 8004df8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004dfa:	f000 fd77 	bl	80058ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 f810 	bl	8004e24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e04:	4b06      	ldr	r3, [pc, #24]	; (8004e20 <prvCheckTasksWaitingTermination+0x58>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1e1      	bne.n	8004dd0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004e0c:	bf00      	nop
 8004e0e:	bf00      	nop
 8004e10:	3708      	adds	r7, #8
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	200009a0 	.word	0x200009a0
 8004e1c:	200009cc 	.word	0x200009cc
 8004e20:	200009b4 	.word	0x200009b4

08004e24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d108      	bne.n	8004e48 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f000 feea 	bl	8005c14 <vPortFree>
				vPortFree( pxTCB );
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 fee7 	bl	8005c14 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004e46:	e018      	b.n	8004e7a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d103      	bne.n	8004e5a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 fede 	bl	8005c14 <vPortFree>
	}
 8004e58:	e00f      	b.n	8004e7a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d00a      	beq.n	8004e7a <prvDeleteTCB+0x56>
	__asm volatile
 8004e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e68:	f383 8811 	msr	BASEPRI, r3
 8004e6c:	f3bf 8f6f 	isb	sy
 8004e70:	f3bf 8f4f 	dsb	sy
 8004e74:	60fb      	str	r3, [r7, #12]
}
 8004e76:	bf00      	nop
 8004e78:	e7fe      	b.n	8004e78 <prvDeleteTCB+0x54>
	}
 8004e7a:	bf00      	nop
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
	...

08004e84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e8a:	4b0e      	ldr	r3, [pc, #56]	; (8004ec4 <prvResetNextTaskUnblockTime+0x40>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d101      	bne.n	8004e98 <prvResetNextTaskUnblockTime+0x14>
 8004e94:	2301      	movs	r3, #1
 8004e96:	e000      	b.n	8004e9a <prvResetNextTaskUnblockTime+0x16>
 8004e98:	2300      	movs	r3, #0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d004      	beq.n	8004ea8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004e9e:	4b0a      	ldr	r3, [pc, #40]	; (8004ec8 <prvResetNextTaskUnblockTime+0x44>)
 8004ea0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ea4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004ea6:	e008      	b.n	8004eba <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004ea8:	4b06      	ldr	r3, [pc, #24]	; (8004ec4 <prvResetNextTaskUnblockTime+0x40>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	4a04      	ldr	r2, [pc, #16]	; (8004ec8 <prvResetNextTaskUnblockTime+0x44>)
 8004eb8:	6013      	str	r3, [r2, #0]
}
 8004eba:	bf00      	nop
 8004ebc:	370c      	adds	r7, #12
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bc80      	pop	{r7}
 8004ec2:	4770      	bx	lr
 8004ec4:	20000984 	.word	0x20000984
 8004ec8:	200009ec 	.word	0x200009ec

08004ecc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004ed2:	4b0b      	ldr	r3, [pc, #44]	; (8004f00 <xTaskGetSchedulerState+0x34>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d102      	bne.n	8004ee0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004eda:	2301      	movs	r3, #1
 8004edc:	607b      	str	r3, [r7, #4]
 8004ede:	e008      	b.n	8004ef2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ee0:	4b08      	ldr	r3, [pc, #32]	; (8004f04 <xTaskGetSchedulerState+0x38>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d102      	bne.n	8004eee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004ee8:	2302      	movs	r3, #2
 8004eea:	607b      	str	r3, [r7, #4]
 8004eec:	e001      	b.n	8004ef2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004ef2:	687b      	ldr	r3, [r7, #4]
	}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bc80      	pop	{r7}
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	200009d8 	.word	0x200009d8
 8004f04:	200009f4 	.word	0x200009f4

08004f08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b086      	sub	sp, #24
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004f14:	2300      	movs	r3, #0
 8004f16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d056      	beq.n	8004fcc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004f1e:	4b2e      	ldr	r3, [pc, #184]	; (8004fd8 <xTaskPriorityDisinherit+0xd0>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	693a      	ldr	r2, [r7, #16]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d00a      	beq.n	8004f3e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2c:	f383 8811 	msr	BASEPRI, r3
 8004f30:	f3bf 8f6f 	isb	sy
 8004f34:	f3bf 8f4f 	dsb	sy
 8004f38:	60fb      	str	r3, [r7, #12]
}
 8004f3a:	bf00      	nop
 8004f3c:	e7fe      	b.n	8004f3c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d10a      	bne.n	8004f5c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4a:	f383 8811 	msr	BASEPRI, r3
 8004f4e:	f3bf 8f6f 	isb	sy
 8004f52:	f3bf 8f4f 	dsb	sy
 8004f56:	60bb      	str	r3, [r7, #8]
}
 8004f58:	bf00      	nop
 8004f5a:	e7fe      	b.n	8004f5a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f60:	1e5a      	subs	r2, r3, #1
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d02c      	beq.n	8004fcc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d128      	bne.n	8004fcc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	3304      	adds	r3, #4
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7fe fc22 	bl	80037c8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f90:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f9c:	4b0f      	ldr	r3, [pc, #60]	; (8004fdc <xTaskPriorityDisinherit+0xd4>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d903      	bls.n	8004fac <xTaskPriorityDisinherit+0xa4>
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa8:	4a0c      	ldr	r2, [pc, #48]	; (8004fdc <xTaskPriorityDisinherit+0xd4>)
 8004faa:	6013      	str	r3, [r2, #0]
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	4413      	add	r3, r2
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	4a09      	ldr	r2, [pc, #36]	; (8004fe0 <xTaskPriorityDisinherit+0xd8>)
 8004fba:	441a      	add	r2, r3
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	3304      	adds	r3, #4
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	4610      	mov	r0, r2
 8004fc4:	f7fe fba5 	bl	8003712 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004fcc:	697b      	ldr	r3, [r7, #20]
	}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3718      	adds	r7, #24
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	200004f8 	.word	0x200004f8
 8004fdc:	200009d4 	.word	0x200009d4
 8004fe0:	200004fc 	.word	0x200004fc

08004fe4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004fee:	4b21      	ldr	r3, [pc, #132]	; (8005074 <prvAddCurrentTaskToDelayedList+0x90>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ff4:	4b20      	ldr	r3, [pc, #128]	; (8005078 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	3304      	adds	r3, #4
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7fe fbe4 	bl	80037c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005006:	d10a      	bne.n	800501e <prvAddCurrentTaskToDelayedList+0x3a>
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d007      	beq.n	800501e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800500e:	4b1a      	ldr	r3, [pc, #104]	; (8005078 <prvAddCurrentTaskToDelayedList+0x94>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	3304      	adds	r3, #4
 8005014:	4619      	mov	r1, r3
 8005016:	4819      	ldr	r0, [pc, #100]	; (800507c <prvAddCurrentTaskToDelayedList+0x98>)
 8005018:	f7fe fb7b 	bl	8003712 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800501c:	e026      	b.n	800506c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4413      	add	r3, r2
 8005024:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005026:	4b14      	ldr	r3, [pc, #80]	; (8005078 <prvAddCurrentTaskToDelayedList+0x94>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68ba      	ldr	r2, [r7, #8]
 800502c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800502e:	68ba      	ldr	r2, [r7, #8]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	429a      	cmp	r2, r3
 8005034:	d209      	bcs.n	800504a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005036:	4b12      	ldr	r3, [pc, #72]	; (8005080 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	4b0f      	ldr	r3, [pc, #60]	; (8005078 <prvAddCurrentTaskToDelayedList+0x94>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	3304      	adds	r3, #4
 8005040:	4619      	mov	r1, r3
 8005042:	4610      	mov	r0, r2
 8005044:	f7fe fb88 	bl	8003758 <vListInsert>
}
 8005048:	e010      	b.n	800506c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800504a:	4b0e      	ldr	r3, [pc, #56]	; (8005084 <prvAddCurrentTaskToDelayedList+0xa0>)
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	4b0a      	ldr	r3, [pc, #40]	; (8005078 <prvAddCurrentTaskToDelayedList+0x94>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	3304      	adds	r3, #4
 8005054:	4619      	mov	r1, r3
 8005056:	4610      	mov	r0, r2
 8005058:	f7fe fb7e 	bl	8003758 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800505c:	4b0a      	ldr	r3, [pc, #40]	; (8005088 <prvAddCurrentTaskToDelayedList+0xa4>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68ba      	ldr	r2, [r7, #8]
 8005062:	429a      	cmp	r2, r3
 8005064:	d202      	bcs.n	800506c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005066:	4a08      	ldr	r2, [pc, #32]	; (8005088 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	6013      	str	r3, [r2, #0]
}
 800506c:	bf00      	nop
 800506e:	3710      	adds	r7, #16
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	200009d0 	.word	0x200009d0
 8005078:	200004f8 	.word	0x200004f8
 800507c:	200009b8 	.word	0x200009b8
 8005080:	20000988 	.word	0x20000988
 8005084:	20000984 	.word	0x20000984
 8005088:	200009ec 	.word	0x200009ec

0800508c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b08a      	sub	sp, #40	; 0x28
 8005090:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005092:	2300      	movs	r3, #0
 8005094:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005096:	f000 facb 	bl	8005630 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800509a:	4b1c      	ldr	r3, [pc, #112]	; (800510c <xTimerCreateTimerTask+0x80>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d021      	beq.n	80050e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80050a2:	2300      	movs	r3, #0
 80050a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80050a6:	2300      	movs	r3, #0
 80050a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80050aa:	1d3a      	adds	r2, r7, #4
 80050ac:	f107 0108 	add.w	r1, r7, #8
 80050b0:	f107 030c 	add.w	r3, r7, #12
 80050b4:	4618      	mov	r0, r3
 80050b6:	f7fe fae9 	bl	800368c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80050ba:	6879      	ldr	r1, [r7, #4]
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	9202      	str	r2, [sp, #8]
 80050c2:	9301      	str	r3, [sp, #4]
 80050c4:	2302      	movs	r3, #2
 80050c6:	9300      	str	r3, [sp, #0]
 80050c8:	2300      	movs	r3, #0
 80050ca:	460a      	mov	r2, r1
 80050cc:	4910      	ldr	r1, [pc, #64]	; (8005110 <xTimerCreateTimerTask+0x84>)
 80050ce:	4811      	ldr	r0, [pc, #68]	; (8005114 <xTimerCreateTimerTask+0x88>)
 80050d0:	f7ff f8e4 	bl	800429c <xTaskCreateStatic>
 80050d4:	4603      	mov	r3, r0
 80050d6:	4a10      	ldr	r2, [pc, #64]	; (8005118 <xTimerCreateTimerTask+0x8c>)
 80050d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80050da:	4b0f      	ldr	r3, [pc, #60]	; (8005118 <xTimerCreateTimerTask+0x8c>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d001      	beq.n	80050e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80050e2:	2301      	movs	r3, #1
 80050e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10a      	bne.n	8005102 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80050ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f0:	f383 8811 	msr	BASEPRI, r3
 80050f4:	f3bf 8f6f 	isb	sy
 80050f8:	f3bf 8f4f 	dsb	sy
 80050fc:	613b      	str	r3, [r7, #16]
}
 80050fe:	bf00      	nop
 8005100:	e7fe      	b.n	8005100 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005102:	697b      	ldr	r3, [r7, #20]
}
 8005104:	4618      	mov	r0, r3
 8005106:	3718      	adds	r7, #24
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	20000a28 	.word	0x20000a28
 8005110:	08005f88 	.word	0x08005f88
 8005114:	08005239 	.word	0x08005239
 8005118:	20000a2c 	.word	0x20000a2c

0800511c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b08a      	sub	sp, #40	; 0x28
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
 8005128:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800512a:	2300      	movs	r3, #0
 800512c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d10a      	bne.n	800514a <xTimerGenericCommand+0x2e>
	__asm volatile
 8005134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005138:	f383 8811 	msr	BASEPRI, r3
 800513c:	f3bf 8f6f 	isb	sy
 8005140:	f3bf 8f4f 	dsb	sy
 8005144:	623b      	str	r3, [r7, #32]
}
 8005146:	bf00      	nop
 8005148:	e7fe      	b.n	8005148 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800514a:	4b1a      	ldr	r3, [pc, #104]	; (80051b4 <xTimerGenericCommand+0x98>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d02a      	beq.n	80051a8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	2b05      	cmp	r3, #5
 8005162:	dc18      	bgt.n	8005196 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005164:	f7ff feb2 	bl	8004ecc <xTaskGetSchedulerState>
 8005168:	4603      	mov	r3, r0
 800516a:	2b02      	cmp	r3, #2
 800516c:	d109      	bne.n	8005182 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800516e:	4b11      	ldr	r3, [pc, #68]	; (80051b4 <xTimerGenericCommand+0x98>)
 8005170:	6818      	ldr	r0, [r3, #0]
 8005172:	f107 0110 	add.w	r1, r7, #16
 8005176:	2300      	movs	r3, #0
 8005178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800517a:	f7fe fc8f 	bl	8003a9c <xQueueGenericSend>
 800517e:	6278      	str	r0, [r7, #36]	; 0x24
 8005180:	e012      	b.n	80051a8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005182:	4b0c      	ldr	r3, [pc, #48]	; (80051b4 <xTimerGenericCommand+0x98>)
 8005184:	6818      	ldr	r0, [r3, #0]
 8005186:	f107 0110 	add.w	r1, r7, #16
 800518a:	2300      	movs	r3, #0
 800518c:	2200      	movs	r2, #0
 800518e:	f7fe fc85 	bl	8003a9c <xQueueGenericSend>
 8005192:	6278      	str	r0, [r7, #36]	; 0x24
 8005194:	e008      	b.n	80051a8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005196:	4b07      	ldr	r3, [pc, #28]	; (80051b4 <xTimerGenericCommand+0x98>)
 8005198:	6818      	ldr	r0, [r3, #0]
 800519a:	f107 0110 	add.w	r1, r7, #16
 800519e:	2300      	movs	r3, #0
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	f7fe fd79 	bl	8003c98 <xQueueGenericSendFromISR>
 80051a6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80051a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3728      	adds	r7, #40	; 0x28
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	20000a28 	.word	0x20000a28

080051b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b088      	sub	sp, #32
 80051bc:	af02      	add	r7, sp, #8
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80051c2:	4b1c      	ldr	r3, [pc, #112]	; (8005234 <prvProcessExpiredTimer+0x7c>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	3304      	adds	r3, #4
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7fe faf9 	bl	80037c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	69db      	ldr	r3, [r3, #28]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d122      	bne.n	8005224 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	699a      	ldr	r2, [r3, #24]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	18d1      	adds	r1, r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	683a      	ldr	r2, [r7, #0]
 80051ea:	6978      	ldr	r0, [r7, #20]
 80051ec:	f000 f8c8 	bl	8005380 <prvInsertTimerInActiveList>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d016      	beq.n	8005224 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80051f6:	2300      	movs	r3, #0
 80051f8:	9300      	str	r3, [sp, #0]
 80051fa:	2300      	movs	r3, #0
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	2100      	movs	r1, #0
 8005200:	6978      	ldr	r0, [r7, #20]
 8005202:	f7ff ff8b 	bl	800511c <xTimerGenericCommand>
 8005206:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d10a      	bne.n	8005224 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800520e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005212:	f383 8811 	msr	BASEPRI, r3
 8005216:	f3bf 8f6f 	isb	sy
 800521a:	f3bf 8f4f 	dsb	sy
 800521e:	60fb      	str	r3, [r7, #12]
}
 8005220:	bf00      	nop
 8005222:	e7fe      	b.n	8005222 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005228:	6978      	ldr	r0, [r7, #20]
 800522a:	4798      	blx	r3
}
 800522c:	bf00      	nop
 800522e:	3718      	adds	r7, #24
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	20000a20 	.word	0x20000a20

08005238 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005240:	f107 0308 	add.w	r3, r7, #8
 8005244:	4618      	mov	r0, r3
 8005246:	f000 f857 	bl	80052f8 <prvGetNextExpireTime>
 800524a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	4619      	mov	r1, r3
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f000 f803 	bl	800525c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005256:	f000 f8d5 	bl	8005404 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800525a:	e7f1      	b.n	8005240 <prvTimerTask+0x8>

0800525c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005266:	f7ff fa4b 	bl	8004700 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800526a:	f107 0308 	add.w	r3, r7, #8
 800526e:	4618      	mov	r0, r3
 8005270:	f000 f866 	bl	8005340 <prvSampleTimeNow>
 8005274:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d130      	bne.n	80052de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10a      	bne.n	8005298 <prvProcessTimerOrBlockTask+0x3c>
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	429a      	cmp	r2, r3
 8005288:	d806      	bhi.n	8005298 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800528a:	f7ff fa47 	bl	800471c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800528e:	68f9      	ldr	r1, [r7, #12]
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f7ff ff91 	bl	80051b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005296:	e024      	b.n	80052e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d008      	beq.n	80052b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800529e:	4b13      	ldr	r3, [pc, #76]	; (80052ec <prvProcessTimerOrBlockTask+0x90>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	bf0c      	ite	eq
 80052a8:	2301      	moveq	r3, #1
 80052aa:	2300      	movne	r3, #0
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80052b0:	4b0f      	ldr	r3, [pc, #60]	; (80052f0 <prvProcessTimerOrBlockTask+0x94>)
 80052b2:	6818      	ldr	r0, [r3, #0]
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	4619      	mov	r1, r3
 80052be:	f7fe ffb9 	bl	8004234 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80052c2:	f7ff fa2b 	bl	800471c <xTaskResumeAll>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d10a      	bne.n	80052e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80052cc:	4b09      	ldr	r3, [pc, #36]	; (80052f4 <prvProcessTimerOrBlockTask+0x98>)
 80052ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052d2:	601a      	str	r2, [r3, #0]
 80052d4:	f3bf 8f4f 	dsb	sy
 80052d8:	f3bf 8f6f 	isb	sy
}
 80052dc:	e001      	b.n	80052e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80052de:	f7ff fa1d 	bl	800471c <xTaskResumeAll>
}
 80052e2:	bf00      	nop
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	20000a24 	.word	0x20000a24
 80052f0:	20000a28 	.word	0x20000a28
 80052f4:	e000ed04 	.word	0xe000ed04

080052f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005300:	4b0e      	ldr	r3, [pc, #56]	; (800533c <prvGetNextExpireTime+0x44>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	bf0c      	ite	eq
 800530a:	2301      	moveq	r3, #1
 800530c:	2300      	movne	r3, #0
 800530e:	b2db      	uxtb	r3, r3
 8005310:	461a      	mov	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d105      	bne.n	800532a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800531e:	4b07      	ldr	r3, [pc, #28]	; (800533c <prvGetNextExpireTime+0x44>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	60fb      	str	r3, [r7, #12]
 8005328:	e001      	b.n	800532e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800532a:	2300      	movs	r3, #0
 800532c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800532e:	68fb      	ldr	r3, [r7, #12]
}
 8005330:	4618      	mov	r0, r3
 8005332:	3714      	adds	r7, #20
 8005334:	46bd      	mov	sp, r7
 8005336:	bc80      	pop	{r7}
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	20000a20 	.word	0x20000a20

08005340 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005348:	f7ff fa86 	bl	8004858 <xTaskGetTickCount>
 800534c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800534e:	4b0b      	ldr	r3, [pc, #44]	; (800537c <prvSampleTimeNow+0x3c>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	429a      	cmp	r2, r3
 8005356:	d205      	bcs.n	8005364 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005358:	f000 f908 	bl	800556c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	601a      	str	r2, [r3, #0]
 8005362:	e002      	b.n	800536a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800536a:	4a04      	ldr	r2, [pc, #16]	; (800537c <prvSampleTimeNow+0x3c>)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005370:	68fb      	ldr	r3, [r7, #12]
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	20000a30 	.word	0x20000a30

08005380 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b086      	sub	sp, #24
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
 800538c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800538e:	2300      	movs	r3, #0
 8005390:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	68ba      	ldr	r2, [r7, #8]
 8005396:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800539e:	68ba      	ldr	r2, [r7, #8]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d812      	bhi.n	80053cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	1ad2      	subs	r2, r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d302      	bcc.n	80053ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80053b4:	2301      	movs	r3, #1
 80053b6:	617b      	str	r3, [r7, #20]
 80053b8:	e01b      	b.n	80053f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80053ba:	4b10      	ldr	r3, [pc, #64]	; (80053fc <prvInsertTimerInActiveList+0x7c>)
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	3304      	adds	r3, #4
 80053c2:	4619      	mov	r1, r3
 80053c4:	4610      	mov	r0, r2
 80053c6:	f7fe f9c7 	bl	8003758 <vListInsert>
 80053ca:	e012      	b.n	80053f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d206      	bcs.n	80053e2 <prvInsertTimerInActiveList+0x62>
 80053d4:	68ba      	ldr	r2, [r7, #8]
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d302      	bcc.n	80053e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80053dc:	2301      	movs	r3, #1
 80053de:	617b      	str	r3, [r7, #20]
 80053e0:	e007      	b.n	80053f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80053e2:	4b07      	ldr	r3, [pc, #28]	; (8005400 <prvInsertTimerInActiveList+0x80>)
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	3304      	adds	r3, #4
 80053ea:	4619      	mov	r1, r3
 80053ec:	4610      	mov	r0, r2
 80053ee:	f7fe f9b3 	bl	8003758 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80053f2:	697b      	ldr	r3, [r7, #20]
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3718      	adds	r7, #24
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	20000a24 	.word	0x20000a24
 8005400:	20000a20 	.word	0x20000a20

08005404 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b08e      	sub	sp, #56	; 0x38
 8005408:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800540a:	e09d      	b.n	8005548 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2b00      	cmp	r3, #0
 8005410:	da18      	bge.n	8005444 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005412:	1d3b      	adds	r3, r7, #4
 8005414:	3304      	adds	r3, #4
 8005416:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10a      	bne.n	8005434 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800541e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005422:	f383 8811 	msr	BASEPRI, r3
 8005426:	f3bf 8f6f 	isb	sy
 800542a:	f3bf 8f4f 	dsb	sy
 800542e:	61fb      	str	r3, [r7, #28]
}
 8005430:	bf00      	nop
 8005432:	e7fe      	b.n	8005432 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800543a:	6850      	ldr	r0, [r2, #4]
 800543c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800543e:	6892      	ldr	r2, [r2, #8]
 8005440:	4611      	mov	r1, r2
 8005442:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	db7d      	blt.n	8005546 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800544e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d004      	beq.n	8005460 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005458:	3304      	adds	r3, #4
 800545a:	4618      	mov	r0, r3
 800545c:	f7fe f9b4 	bl	80037c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005460:	463b      	mov	r3, r7
 8005462:	4618      	mov	r0, r3
 8005464:	f7ff ff6c 	bl	8005340 <prvSampleTimeNow>
 8005468:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2b09      	cmp	r3, #9
 800546e:	d86b      	bhi.n	8005548 <prvProcessReceivedCommands+0x144>
 8005470:	a201      	add	r2, pc, #4	; (adr r2, 8005478 <prvProcessReceivedCommands+0x74>)
 8005472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005476:	bf00      	nop
 8005478:	080054a1 	.word	0x080054a1
 800547c:	080054a1 	.word	0x080054a1
 8005480:	080054a1 	.word	0x080054a1
 8005484:	08005549 	.word	0x08005549
 8005488:	080054fd 	.word	0x080054fd
 800548c:	08005535 	.word	0x08005535
 8005490:	080054a1 	.word	0x080054a1
 8005494:	080054a1 	.word	0x080054a1
 8005498:	08005549 	.word	0x08005549
 800549c:	080054fd 	.word	0x080054fd
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	18d1      	adds	r1, r2, r3
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054ae:	f7ff ff67 	bl	8005380 <prvInsertTimerInActiveList>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d047      	beq.n	8005548 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80054b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054be:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80054c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c2:	69db      	ldr	r3, [r3, #28]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d13f      	bne.n	8005548 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	441a      	add	r2, r3
 80054d0:	2300      	movs	r3, #0
 80054d2:	9300      	str	r3, [sp, #0]
 80054d4:	2300      	movs	r3, #0
 80054d6:	2100      	movs	r1, #0
 80054d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054da:	f7ff fe1f 	bl	800511c <xTimerGenericCommand>
 80054de:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80054e0:	6a3b      	ldr	r3, [r7, #32]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d130      	bne.n	8005548 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80054e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ea:	f383 8811 	msr	BASEPRI, r3
 80054ee:	f3bf 8f6f 	isb	sy
 80054f2:	f3bf 8f4f 	dsb	sy
 80054f6:	61bb      	str	r3, [r7, #24]
}
 80054f8:	bf00      	nop
 80054fa:	e7fe      	b.n	80054fa <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80054fc:	68ba      	ldr	r2, [r7, #8]
 80054fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005500:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d10a      	bne.n	8005520 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800550a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800550e:	f383 8811 	msr	BASEPRI, r3
 8005512:	f3bf 8f6f 	isb	sy
 8005516:	f3bf 8f4f 	dsb	sy
 800551a:	617b      	str	r3, [r7, #20]
}
 800551c:	bf00      	nop
 800551e:	e7fe      	b.n	800551e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005522:	699a      	ldr	r2, [r3, #24]
 8005524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005526:	18d1      	adds	r1, r2, r3
 8005528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800552c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800552e:	f7ff ff27 	bl	8005380 <prvInsertTimerInActiveList>
					break;
 8005532:	e009      	b.n	8005548 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005536:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800553a:	2b00      	cmp	r3, #0
 800553c:	d104      	bne.n	8005548 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800553e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005540:	f000 fb68 	bl	8005c14 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005544:	e000      	b.n	8005548 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005546:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005548:	4b07      	ldr	r3, [pc, #28]	; (8005568 <prvProcessReceivedCommands+0x164>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	1d39      	adds	r1, r7, #4
 800554e:	2200      	movs	r2, #0
 8005550:	4618      	mov	r0, r3
 8005552:	f7fe fc39 	bl	8003dc8 <xQueueReceive>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	f47f af57 	bne.w	800540c <prvProcessReceivedCommands+0x8>
	}
}
 800555e:	bf00      	nop
 8005560:	bf00      	nop
 8005562:	3730      	adds	r7, #48	; 0x30
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	20000a28 	.word	0x20000a28

0800556c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b088      	sub	sp, #32
 8005570:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005572:	e045      	b.n	8005600 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005574:	4b2c      	ldr	r3, [pc, #176]	; (8005628 <prvSwitchTimerLists+0xbc>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800557e:	4b2a      	ldr	r3, [pc, #168]	; (8005628 <prvSwitchTimerLists+0xbc>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	3304      	adds	r3, #4
 800558c:	4618      	mov	r0, r3
 800558e:	f7fe f91b 	bl	80037c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	69db      	ldr	r3, [r3, #28]
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d12e      	bne.n	8005600 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	693a      	ldr	r2, [r7, #16]
 80055a8:	4413      	add	r3, r2
 80055aa:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d90e      	bls.n	80055d2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	68ba      	ldr	r2, [r7, #8]
 80055b8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80055c0:	4b19      	ldr	r3, [pc, #100]	; (8005628 <prvSwitchTimerLists+0xbc>)
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	3304      	adds	r3, #4
 80055c8:	4619      	mov	r1, r3
 80055ca:	4610      	mov	r0, r2
 80055cc:	f7fe f8c4 	bl	8003758 <vListInsert>
 80055d0:	e016      	b.n	8005600 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80055d2:	2300      	movs	r3, #0
 80055d4:	9300      	str	r3, [sp, #0]
 80055d6:	2300      	movs	r3, #0
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	2100      	movs	r1, #0
 80055dc:	68f8      	ldr	r0, [r7, #12]
 80055de:	f7ff fd9d 	bl	800511c <xTimerGenericCommand>
 80055e2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d10a      	bne.n	8005600 <prvSwitchTimerLists+0x94>
	__asm volatile
 80055ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ee:	f383 8811 	msr	BASEPRI, r3
 80055f2:	f3bf 8f6f 	isb	sy
 80055f6:	f3bf 8f4f 	dsb	sy
 80055fa:	603b      	str	r3, [r7, #0]
}
 80055fc:	bf00      	nop
 80055fe:	e7fe      	b.n	80055fe <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005600:	4b09      	ldr	r3, [pc, #36]	; (8005628 <prvSwitchTimerLists+0xbc>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1b4      	bne.n	8005574 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800560a:	4b07      	ldr	r3, [pc, #28]	; (8005628 <prvSwitchTimerLists+0xbc>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005610:	4b06      	ldr	r3, [pc, #24]	; (800562c <prvSwitchTimerLists+0xc0>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a04      	ldr	r2, [pc, #16]	; (8005628 <prvSwitchTimerLists+0xbc>)
 8005616:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005618:	4a04      	ldr	r2, [pc, #16]	; (800562c <prvSwitchTimerLists+0xc0>)
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	6013      	str	r3, [r2, #0]
}
 800561e:	bf00      	nop
 8005620:	3718      	adds	r7, #24
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	20000a20 	.word	0x20000a20
 800562c:	20000a24 	.word	0x20000a24

08005630 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005636:	f000 f929 	bl	800588c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800563a:	4b15      	ldr	r3, [pc, #84]	; (8005690 <prvCheckForValidListAndQueue+0x60>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d120      	bne.n	8005684 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005642:	4814      	ldr	r0, [pc, #80]	; (8005694 <prvCheckForValidListAndQueue+0x64>)
 8005644:	f7fe f83a 	bl	80036bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005648:	4813      	ldr	r0, [pc, #76]	; (8005698 <prvCheckForValidListAndQueue+0x68>)
 800564a:	f7fe f837 	bl	80036bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800564e:	4b13      	ldr	r3, [pc, #76]	; (800569c <prvCheckForValidListAndQueue+0x6c>)
 8005650:	4a10      	ldr	r2, [pc, #64]	; (8005694 <prvCheckForValidListAndQueue+0x64>)
 8005652:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005654:	4b12      	ldr	r3, [pc, #72]	; (80056a0 <prvCheckForValidListAndQueue+0x70>)
 8005656:	4a10      	ldr	r2, [pc, #64]	; (8005698 <prvCheckForValidListAndQueue+0x68>)
 8005658:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800565a:	2300      	movs	r3, #0
 800565c:	9300      	str	r3, [sp, #0]
 800565e:	4b11      	ldr	r3, [pc, #68]	; (80056a4 <prvCheckForValidListAndQueue+0x74>)
 8005660:	4a11      	ldr	r2, [pc, #68]	; (80056a8 <prvCheckForValidListAndQueue+0x78>)
 8005662:	2110      	movs	r1, #16
 8005664:	200a      	movs	r0, #10
 8005666:	f7fe f941 	bl	80038ec <xQueueGenericCreateStatic>
 800566a:	4603      	mov	r3, r0
 800566c:	4a08      	ldr	r2, [pc, #32]	; (8005690 <prvCheckForValidListAndQueue+0x60>)
 800566e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005670:	4b07      	ldr	r3, [pc, #28]	; (8005690 <prvCheckForValidListAndQueue+0x60>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d005      	beq.n	8005684 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005678:	4b05      	ldr	r3, [pc, #20]	; (8005690 <prvCheckForValidListAndQueue+0x60>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	490b      	ldr	r1, [pc, #44]	; (80056ac <prvCheckForValidListAndQueue+0x7c>)
 800567e:	4618      	mov	r0, r3
 8005680:	f7fe fdb0 	bl	80041e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005684:	f000 f932 	bl	80058ec <vPortExitCritical>
}
 8005688:	bf00      	nop
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	20000a28 	.word	0x20000a28
 8005694:	200009f8 	.word	0x200009f8
 8005698:	20000a0c 	.word	0x20000a0c
 800569c:	20000a20 	.word	0x20000a20
 80056a0:	20000a24 	.word	0x20000a24
 80056a4:	20000ad4 	.word	0x20000ad4
 80056a8:	20000a34 	.word	0x20000a34
 80056ac:	08005f90 	.word	0x08005f90

080056b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80056b0:	b480      	push	{r7}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	3b04      	subs	r3, #4
 80056c0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80056c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	3b04      	subs	r3, #4
 80056ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	f023 0201 	bic.w	r2, r3, #1
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	3b04      	subs	r3, #4
 80056de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80056e0:	4a08      	ldr	r2, [pc, #32]	; (8005704 <pxPortInitialiseStack+0x54>)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	3b14      	subs	r3, #20
 80056ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	3b20      	subs	r3, #32
 80056f6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80056f8:	68fb      	ldr	r3, [r7, #12]
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3714      	adds	r7, #20
 80056fe:	46bd      	mov	sp, r7
 8005700:	bc80      	pop	{r7}
 8005702:	4770      	bx	lr
 8005704:	08005709 	.word	0x08005709

08005708 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800570e:	2300      	movs	r3, #0
 8005710:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005712:	4b12      	ldr	r3, [pc, #72]	; (800575c <prvTaskExitError+0x54>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800571a:	d00a      	beq.n	8005732 <prvTaskExitError+0x2a>
	__asm volatile
 800571c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005720:	f383 8811 	msr	BASEPRI, r3
 8005724:	f3bf 8f6f 	isb	sy
 8005728:	f3bf 8f4f 	dsb	sy
 800572c:	60fb      	str	r3, [r7, #12]
}
 800572e:	bf00      	nop
 8005730:	e7fe      	b.n	8005730 <prvTaskExitError+0x28>
	__asm volatile
 8005732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005736:	f383 8811 	msr	BASEPRI, r3
 800573a:	f3bf 8f6f 	isb	sy
 800573e:	f3bf 8f4f 	dsb	sy
 8005742:	60bb      	str	r3, [r7, #8]
}
 8005744:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005746:	bf00      	nop
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d0fc      	beq.n	8005748 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800574e:	bf00      	nop
 8005750:	bf00      	nop
 8005752:	3714      	adds	r7, #20
 8005754:	46bd      	mov	sp, r7
 8005756:	bc80      	pop	{r7}
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	2000000c 	.word	0x2000000c

08005760 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005760:	4b07      	ldr	r3, [pc, #28]	; (8005780 <pxCurrentTCBConst2>)
 8005762:	6819      	ldr	r1, [r3, #0]
 8005764:	6808      	ldr	r0, [r1, #0]
 8005766:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800576a:	f380 8809 	msr	PSP, r0
 800576e:	f3bf 8f6f 	isb	sy
 8005772:	f04f 0000 	mov.w	r0, #0
 8005776:	f380 8811 	msr	BASEPRI, r0
 800577a:	f04e 0e0d 	orr.w	lr, lr, #13
 800577e:	4770      	bx	lr

08005780 <pxCurrentTCBConst2>:
 8005780:	200004f8 	.word	0x200004f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005784:	bf00      	nop
 8005786:	bf00      	nop

08005788 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005788:	4806      	ldr	r0, [pc, #24]	; (80057a4 <prvPortStartFirstTask+0x1c>)
 800578a:	6800      	ldr	r0, [r0, #0]
 800578c:	6800      	ldr	r0, [r0, #0]
 800578e:	f380 8808 	msr	MSP, r0
 8005792:	b662      	cpsie	i
 8005794:	b661      	cpsie	f
 8005796:	f3bf 8f4f 	dsb	sy
 800579a:	f3bf 8f6f 	isb	sy
 800579e:	df00      	svc	0
 80057a0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80057a2:	bf00      	nop
 80057a4:	e000ed08 	.word	0xe000ed08

080057a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80057ae:	4b32      	ldr	r3, [pc, #200]	; (8005878 <xPortStartScheduler+0xd0>)
 80057b0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	22ff      	movs	r2, #255	; 0xff
 80057be:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80057c8:	78fb      	ldrb	r3, [r7, #3]
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80057d0:	b2da      	uxtb	r2, r3
 80057d2:	4b2a      	ldr	r3, [pc, #168]	; (800587c <xPortStartScheduler+0xd4>)
 80057d4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80057d6:	4b2a      	ldr	r3, [pc, #168]	; (8005880 <xPortStartScheduler+0xd8>)
 80057d8:	2207      	movs	r2, #7
 80057da:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80057dc:	e009      	b.n	80057f2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80057de:	4b28      	ldr	r3, [pc, #160]	; (8005880 <xPortStartScheduler+0xd8>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	3b01      	subs	r3, #1
 80057e4:	4a26      	ldr	r2, [pc, #152]	; (8005880 <xPortStartScheduler+0xd8>)
 80057e6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80057e8:	78fb      	ldrb	r3, [r7, #3]
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	005b      	lsls	r3, r3, #1
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80057f2:	78fb      	ldrb	r3, [r7, #3]
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057fa:	2b80      	cmp	r3, #128	; 0x80
 80057fc:	d0ef      	beq.n	80057de <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80057fe:	4b20      	ldr	r3, [pc, #128]	; (8005880 <xPortStartScheduler+0xd8>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f1c3 0307 	rsb	r3, r3, #7
 8005806:	2b04      	cmp	r3, #4
 8005808:	d00a      	beq.n	8005820 <xPortStartScheduler+0x78>
	__asm volatile
 800580a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580e:	f383 8811 	msr	BASEPRI, r3
 8005812:	f3bf 8f6f 	isb	sy
 8005816:	f3bf 8f4f 	dsb	sy
 800581a:	60bb      	str	r3, [r7, #8]
}
 800581c:	bf00      	nop
 800581e:	e7fe      	b.n	800581e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005820:	4b17      	ldr	r3, [pc, #92]	; (8005880 <xPortStartScheduler+0xd8>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	021b      	lsls	r3, r3, #8
 8005826:	4a16      	ldr	r2, [pc, #88]	; (8005880 <xPortStartScheduler+0xd8>)
 8005828:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800582a:	4b15      	ldr	r3, [pc, #84]	; (8005880 <xPortStartScheduler+0xd8>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005832:	4a13      	ldr	r2, [pc, #76]	; (8005880 <xPortStartScheduler+0xd8>)
 8005834:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	b2da      	uxtb	r2, r3
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800583e:	4b11      	ldr	r3, [pc, #68]	; (8005884 <xPortStartScheduler+0xdc>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a10      	ldr	r2, [pc, #64]	; (8005884 <xPortStartScheduler+0xdc>)
 8005844:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005848:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800584a:	4b0e      	ldr	r3, [pc, #56]	; (8005884 <xPortStartScheduler+0xdc>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a0d      	ldr	r2, [pc, #52]	; (8005884 <xPortStartScheduler+0xdc>)
 8005850:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005854:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005856:	f000 f8b9 	bl	80059cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800585a:	4b0b      	ldr	r3, [pc, #44]	; (8005888 <xPortStartScheduler+0xe0>)
 800585c:	2200      	movs	r2, #0
 800585e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005860:	f7ff ff92 	bl	8005788 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005864:	f7ff f8c4 	bl	80049f0 <vTaskSwitchContext>
	prvTaskExitError();
 8005868:	f7ff ff4e 	bl	8005708 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3710      	adds	r7, #16
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	e000e400 	.word	0xe000e400
 800587c:	20000b24 	.word	0x20000b24
 8005880:	20000b28 	.word	0x20000b28
 8005884:	e000ed20 	.word	0xe000ed20
 8005888:	2000000c 	.word	0x2000000c

0800588c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
	__asm volatile
 8005892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005896:	f383 8811 	msr	BASEPRI, r3
 800589a:	f3bf 8f6f 	isb	sy
 800589e:	f3bf 8f4f 	dsb	sy
 80058a2:	607b      	str	r3, [r7, #4]
}
 80058a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80058a6:	4b0f      	ldr	r3, [pc, #60]	; (80058e4 <vPortEnterCritical+0x58>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	3301      	adds	r3, #1
 80058ac:	4a0d      	ldr	r2, [pc, #52]	; (80058e4 <vPortEnterCritical+0x58>)
 80058ae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80058b0:	4b0c      	ldr	r3, [pc, #48]	; (80058e4 <vPortEnterCritical+0x58>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d10f      	bne.n	80058d8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80058b8:	4b0b      	ldr	r3, [pc, #44]	; (80058e8 <vPortEnterCritical+0x5c>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00a      	beq.n	80058d8 <vPortEnterCritical+0x4c>
	__asm volatile
 80058c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c6:	f383 8811 	msr	BASEPRI, r3
 80058ca:	f3bf 8f6f 	isb	sy
 80058ce:	f3bf 8f4f 	dsb	sy
 80058d2:	603b      	str	r3, [r7, #0]
}
 80058d4:	bf00      	nop
 80058d6:	e7fe      	b.n	80058d6 <vPortEnterCritical+0x4a>
	}
}
 80058d8:	bf00      	nop
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	bc80      	pop	{r7}
 80058e0:	4770      	bx	lr
 80058e2:	bf00      	nop
 80058e4:	2000000c 	.word	0x2000000c
 80058e8:	e000ed04 	.word	0xe000ed04

080058ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80058f2:	4b11      	ldr	r3, [pc, #68]	; (8005938 <vPortExitCritical+0x4c>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d10a      	bne.n	8005910 <vPortExitCritical+0x24>
	__asm volatile
 80058fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058fe:	f383 8811 	msr	BASEPRI, r3
 8005902:	f3bf 8f6f 	isb	sy
 8005906:	f3bf 8f4f 	dsb	sy
 800590a:	607b      	str	r3, [r7, #4]
}
 800590c:	bf00      	nop
 800590e:	e7fe      	b.n	800590e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005910:	4b09      	ldr	r3, [pc, #36]	; (8005938 <vPortExitCritical+0x4c>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	3b01      	subs	r3, #1
 8005916:	4a08      	ldr	r2, [pc, #32]	; (8005938 <vPortExitCritical+0x4c>)
 8005918:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800591a:	4b07      	ldr	r3, [pc, #28]	; (8005938 <vPortExitCritical+0x4c>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d105      	bne.n	800592e <vPortExitCritical+0x42>
 8005922:	2300      	movs	r3, #0
 8005924:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	f383 8811 	msr	BASEPRI, r3
}
 800592c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800592e:	bf00      	nop
 8005930:	370c      	adds	r7, #12
 8005932:	46bd      	mov	sp, r7
 8005934:	bc80      	pop	{r7}
 8005936:	4770      	bx	lr
 8005938:	2000000c 	.word	0x2000000c
 800593c:	00000000 	.word	0x00000000

08005940 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005940:	f3ef 8009 	mrs	r0, PSP
 8005944:	f3bf 8f6f 	isb	sy
 8005948:	4b0d      	ldr	r3, [pc, #52]	; (8005980 <pxCurrentTCBConst>)
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005950:	6010      	str	r0, [r2, #0]
 8005952:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005956:	f04f 0050 	mov.w	r0, #80	; 0x50
 800595a:	f380 8811 	msr	BASEPRI, r0
 800595e:	f7ff f847 	bl	80049f0 <vTaskSwitchContext>
 8005962:	f04f 0000 	mov.w	r0, #0
 8005966:	f380 8811 	msr	BASEPRI, r0
 800596a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800596e:	6819      	ldr	r1, [r3, #0]
 8005970:	6808      	ldr	r0, [r1, #0]
 8005972:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005976:	f380 8809 	msr	PSP, r0
 800597a:	f3bf 8f6f 	isb	sy
 800597e:	4770      	bx	lr

08005980 <pxCurrentTCBConst>:
 8005980:	200004f8 	.word	0x200004f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005984:	bf00      	nop
 8005986:	bf00      	nop

08005988 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
	__asm volatile
 800598e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005992:	f383 8811 	msr	BASEPRI, r3
 8005996:	f3bf 8f6f 	isb	sy
 800599a:	f3bf 8f4f 	dsb	sy
 800599e:	607b      	str	r3, [r7, #4]
}
 80059a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80059a2:	f7fe ff67 	bl	8004874 <xTaskIncrementTick>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d003      	beq.n	80059b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80059ac:	4b06      	ldr	r3, [pc, #24]	; (80059c8 <SysTick_Handler+0x40>)
 80059ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059b2:	601a      	str	r2, [r3, #0]
 80059b4:	2300      	movs	r3, #0
 80059b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	f383 8811 	msr	BASEPRI, r3
}
 80059be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80059c0:	bf00      	nop
 80059c2:	3708      	adds	r7, #8
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	e000ed04 	.word	0xe000ed04

080059cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80059cc:	b480      	push	{r7}
 80059ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80059d0:	4b0a      	ldr	r3, [pc, #40]	; (80059fc <vPortSetupTimerInterrupt+0x30>)
 80059d2:	2200      	movs	r2, #0
 80059d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80059d6:	4b0a      	ldr	r3, [pc, #40]	; (8005a00 <vPortSetupTimerInterrupt+0x34>)
 80059d8:	2200      	movs	r2, #0
 80059da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80059dc:	4b09      	ldr	r3, [pc, #36]	; (8005a04 <vPortSetupTimerInterrupt+0x38>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a09      	ldr	r2, [pc, #36]	; (8005a08 <vPortSetupTimerInterrupt+0x3c>)
 80059e2:	fba2 2303 	umull	r2, r3, r2, r3
 80059e6:	099b      	lsrs	r3, r3, #6
 80059e8:	4a08      	ldr	r2, [pc, #32]	; (8005a0c <vPortSetupTimerInterrupt+0x40>)
 80059ea:	3b01      	subs	r3, #1
 80059ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80059ee:	4b03      	ldr	r3, [pc, #12]	; (80059fc <vPortSetupTimerInterrupt+0x30>)
 80059f0:	2207      	movs	r2, #7
 80059f2:	601a      	str	r2, [r3, #0]
}
 80059f4:	bf00      	nop
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bc80      	pop	{r7}
 80059fa:	4770      	bx	lr
 80059fc:	e000e010 	.word	0xe000e010
 8005a00:	e000e018 	.word	0xe000e018
 8005a04:	20000000 	.word	0x20000000
 8005a08:	10624dd3 	.word	0x10624dd3
 8005a0c:	e000e014 	.word	0xe000e014

08005a10 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005a16:	f3ef 8305 	mrs	r3, IPSR
 8005a1a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2b0f      	cmp	r3, #15
 8005a20:	d914      	bls.n	8005a4c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005a22:	4a16      	ldr	r2, [pc, #88]	; (8005a7c <vPortValidateInterruptPriority+0x6c>)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	4413      	add	r3, r2
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005a2c:	4b14      	ldr	r3, [pc, #80]	; (8005a80 <vPortValidateInterruptPriority+0x70>)
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	7afa      	ldrb	r2, [r7, #11]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d20a      	bcs.n	8005a4c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a3a:	f383 8811 	msr	BASEPRI, r3
 8005a3e:	f3bf 8f6f 	isb	sy
 8005a42:	f3bf 8f4f 	dsb	sy
 8005a46:	607b      	str	r3, [r7, #4]
}
 8005a48:	bf00      	nop
 8005a4a:	e7fe      	b.n	8005a4a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005a4c:	4b0d      	ldr	r3, [pc, #52]	; (8005a84 <vPortValidateInterruptPriority+0x74>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005a54:	4b0c      	ldr	r3, [pc, #48]	; (8005a88 <vPortValidateInterruptPriority+0x78>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d90a      	bls.n	8005a72 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a60:	f383 8811 	msr	BASEPRI, r3
 8005a64:	f3bf 8f6f 	isb	sy
 8005a68:	f3bf 8f4f 	dsb	sy
 8005a6c:	603b      	str	r3, [r7, #0]
}
 8005a6e:	bf00      	nop
 8005a70:	e7fe      	b.n	8005a70 <vPortValidateInterruptPriority+0x60>
	}
 8005a72:	bf00      	nop
 8005a74:	3714      	adds	r7, #20
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bc80      	pop	{r7}
 8005a7a:	4770      	bx	lr
 8005a7c:	e000e3f0 	.word	0xe000e3f0
 8005a80:	20000b24 	.word	0x20000b24
 8005a84:	e000ed0c 	.word	0xe000ed0c
 8005a88:	20000b28 	.word	0x20000b28

08005a8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b08a      	sub	sp, #40	; 0x28
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005a94:	2300      	movs	r3, #0
 8005a96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005a98:	f7fe fe32 	bl	8004700 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005a9c:	4b58      	ldr	r3, [pc, #352]	; (8005c00 <pvPortMalloc+0x174>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d101      	bne.n	8005aa8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005aa4:	f000 f910 	bl	8005cc8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005aa8:	4b56      	ldr	r3, [pc, #344]	; (8005c04 <pvPortMalloc+0x178>)
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4013      	ands	r3, r2
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	f040 808e 	bne.w	8005bd2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d01d      	beq.n	8005af8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005abc:	2208      	movs	r2, #8
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f003 0307 	and.w	r3, r3, #7
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d014      	beq.n	8005af8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f023 0307 	bic.w	r3, r3, #7
 8005ad4:	3308      	adds	r3, #8
 8005ad6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f003 0307 	and.w	r3, r3, #7
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00a      	beq.n	8005af8 <pvPortMalloc+0x6c>
	__asm volatile
 8005ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae6:	f383 8811 	msr	BASEPRI, r3
 8005aea:	f3bf 8f6f 	isb	sy
 8005aee:	f3bf 8f4f 	dsb	sy
 8005af2:	617b      	str	r3, [r7, #20]
}
 8005af4:	bf00      	nop
 8005af6:	e7fe      	b.n	8005af6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d069      	beq.n	8005bd2 <pvPortMalloc+0x146>
 8005afe:	4b42      	ldr	r3, [pc, #264]	; (8005c08 <pvPortMalloc+0x17c>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d864      	bhi.n	8005bd2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005b08:	4b40      	ldr	r3, [pc, #256]	; (8005c0c <pvPortMalloc+0x180>)
 8005b0a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005b0c:	4b3f      	ldr	r3, [pc, #252]	; (8005c0c <pvPortMalloc+0x180>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b12:	e004      	b.n	8005b1e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b16:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d903      	bls.n	8005b30 <pvPortMalloc+0xa4>
 8005b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d1f1      	bne.n	8005b14 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005b30:	4b33      	ldr	r3, [pc, #204]	; (8005c00 <pvPortMalloc+0x174>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d04b      	beq.n	8005bd2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005b3a:	6a3b      	ldr	r3, [r7, #32]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2208      	movs	r2, #8
 8005b40:	4413      	add	r3, r2
 8005b42:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	6a3b      	ldr	r3, [r7, #32]
 8005b4a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4e:	685a      	ldr	r2, [r3, #4]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	1ad2      	subs	r2, r2, r3
 8005b54:	2308      	movs	r3, #8
 8005b56:	005b      	lsls	r3, r3, #1
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d91f      	bls.n	8005b9c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4413      	add	r3, r2
 8005b62:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	f003 0307 	and.w	r3, r3, #7
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00a      	beq.n	8005b84 <pvPortMalloc+0xf8>
	__asm volatile
 8005b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b72:	f383 8811 	msr	BASEPRI, r3
 8005b76:	f3bf 8f6f 	isb	sy
 8005b7a:	f3bf 8f4f 	dsb	sy
 8005b7e:	613b      	str	r3, [r7, #16]
}
 8005b80:	bf00      	nop
 8005b82:	e7fe      	b.n	8005b82 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b86:	685a      	ldr	r2, [r3, #4]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	1ad2      	subs	r2, r2, r3
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005b96:	69b8      	ldr	r0, [r7, #24]
 8005b98:	f000 f8f8 	bl	8005d8c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b9c:	4b1a      	ldr	r3, [pc, #104]	; (8005c08 <pvPortMalloc+0x17c>)
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	4a18      	ldr	r2, [pc, #96]	; (8005c08 <pvPortMalloc+0x17c>)
 8005ba8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005baa:	4b17      	ldr	r3, [pc, #92]	; (8005c08 <pvPortMalloc+0x17c>)
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	4b18      	ldr	r3, [pc, #96]	; (8005c10 <pvPortMalloc+0x184>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d203      	bcs.n	8005bbe <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005bb6:	4b14      	ldr	r3, [pc, #80]	; (8005c08 <pvPortMalloc+0x17c>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a15      	ldr	r2, [pc, #84]	; (8005c10 <pvPortMalloc+0x184>)
 8005bbc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc0:	685a      	ldr	r2, [r3, #4]
 8005bc2:	4b10      	ldr	r3, [pc, #64]	; (8005c04 <pvPortMalloc+0x178>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	431a      	orrs	r2, r3
 8005bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bce:	2200      	movs	r2, #0
 8005bd0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005bd2:	f7fe fda3 	bl	800471c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	f003 0307 	and.w	r3, r3, #7
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00a      	beq.n	8005bf6 <pvPortMalloc+0x16a>
	__asm volatile
 8005be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be4:	f383 8811 	msr	BASEPRI, r3
 8005be8:	f3bf 8f6f 	isb	sy
 8005bec:	f3bf 8f4f 	dsb	sy
 8005bf0:	60fb      	str	r3, [r7, #12]
}
 8005bf2:	bf00      	nop
 8005bf4:	e7fe      	b.n	8005bf4 <pvPortMalloc+0x168>
	return pvReturn;
 8005bf6:	69fb      	ldr	r3, [r7, #28]
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3728      	adds	r7, #40	; 0x28
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	20001734 	.word	0x20001734
 8005c04:	20001740 	.word	0x20001740
 8005c08:	20001738 	.word	0x20001738
 8005c0c:	2000172c 	.word	0x2000172c
 8005c10:	2000173c 	.word	0x2000173c

08005c14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b086      	sub	sp, #24
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d048      	beq.n	8005cb8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005c26:	2308      	movs	r3, #8
 8005c28:	425b      	negs	r3, r3
 8005c2a:	697a      	ldr	r2, [r7, #20]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	685a      	ldr	r2, [r3, #4]
 8005c38:	4b21      	ldr	r3, [pc, #132]	; (8005cc0 <vPortFree+0xac>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d10a      	bne.n	8005c58 <vPortFree+0x44>
	__asm volatile
 8005c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c46:	f383 8811 	msr	BASEPRI, r3
 8005c4a:	f3bf 8f6f 	isb	sy
 8005c4e:	f3bf 8f4f 	dsb	sy
 8005c52:	60fb      	str	r3, [r7, #12]
}
 8005c54:	bf00      	nop
 8005c56:	e7fe      	b.n	8005c56 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00a      	beq.n	8005c76 <vPortFree+0x62>
	__asm volatile
 8005c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c64:	f383 8811 	msr	BASEPRI, r3
 8005c68:	f3bf 8f6f 	isb	sy
 8005c6c:	f3bf 8f4f 	dsb	sy
 8005c70:	60bb      	str	r3, [r7, #8]
}
 8005c72:	bf00      	nop
 8005c74:	e7fe      	b.n	8005c74 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	685a      	ldr	r2, [r3, #4]
 8005c7a:	4b11      	ldr	r3, [pc, #68]	; (8005cc0 <vPortFree+0xac>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4013      	ands	r3, r2
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d019      	beq.n	8005cb8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d115      	bne.n	8005cb8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	685a      	ldr	r2, [r3, #4]
 8005c90:	4b0b      	ldr	r3, [pc, #44]	; (8005cc0 <vPortFree+0xac>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	43db      	mvns	r3, r3
 8005c96:	401a      	ands	r2, r3
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005c9c:	f7fe fd30 	bl	8004700 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	685a      	ldr	r2, [r3, #4]
 8005ca4:	4b07      	ldr	r3, [pc, #28]	; (8005cc4 <vPortFree+0xb0>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4413      	add	r3, r2
 8005caa:	4a06      	ldr	r2, [pc, #24]	; (8005cc4 <vPortFree+0xb0>)
 8005cac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005cae:	6938      	ldr	r0, [r7, #16]
 8005cb0:	f000 f86c 	bl	8005d8c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005cb4:	f7fe fd32 	bl	800471c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005cb8:	bf00      	nop
 8005cba:	3718      	adds	r7, #24
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}
 8005cc0:	20001740 	.word	0x20001740
 8005cc4:	20001738 	.word	0x20001738

08005cc8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b085      	sub	sp, #20
 8005ccc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005cce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005cd2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005cd4:	4b27      	ldr	r3, [pc, #156]	; (8005d74 <prvHeapInit+0xac>)
 8005cd6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f003 0307 	and.w	r3, r3, #7
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00c      	beq.n	8005cfc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	3307      	adds	r3, #7
 8005ce6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f023 0307 	bic.w	r3, r3, #7
 8005cee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	4a1f      	ldr	r2, [pc, #124]	; (8005d74 <prvHeapInit+0xac>)
 8005cf8:	4413      	add	r3, r2
 8005cfa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005d00:	4a1d      	ldr	r2, [pc, #116]	; (8005d78 <prvHeapInit+0xb0>)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005d06:	4b1c      	ldr	r3, [pc, #112]	; (8005d78 <prvHeapInit+0xb0>)
 8005d08:	2200      	movs	r2, #0
 8005d0a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	68ba      	ldr	r2, [r7, #8]
 8005d10:	4413      	add	r3, r2
 8005d12:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005d14:	2208      	movs	r2, #8
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	1a9b      	subs	r3, r3, r2
 8005d1a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f023 0307 	bic.w	r3, r3, #7
 8005d22:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	4a15      	ldr	r2, [pc, #84]	; (8005d7c <prvHeapInit+0xb4>)
 8005d28:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005d2a:	4b14      	ldr	r3, [pc, #80]	; (8005d7c <prvHeapInit+0xb4>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005d32:	4b12      	ldr	r3, [pc, #72]	; (8005d7c <prvHeapInit+0xb4>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2200      	movs	r2, #0
 8005d38:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	1ad2      	subs	r2, r2, r3
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005d48:	4b0c      	ldr	r3, [pc, #48]	; (8005d7c <prvHeapInit+0xb4>)
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	4a0a      	ldr	r2, [pc, #40]	; (8005d80 <prvHeapInit+0xb8>)
 8005d56:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	4a09      	ldr	r2, [pc, #36]	; (8005d84 <prvHeapInit+0xbc>)
 8005d5e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005d60:	4b09      	ldr	r3, [pc, #36]	; (8005d88 <prvHeapInit+0xc0>)
 8005d62:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005d66:	601a      	str	r2, [r3, #0]
}
 8005d68:	bf00      	nop
 8005d6a:	3714      	adds	r7, #20
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bc80      	pop	{r7}
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	20000b2c 	.word	0x20000b2c
 8005d78:	2000172c 	.word	0x2000172c
 8005d7c:	20001734 	.word	0x20001734
 8005d80:	2000173c 	.word	0x2000173c
 8005d84:	20001738 	.word	0x20001738
 8005d88:	20001740 	.word	0x20001740

08005d8c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005d94:	4b27      	ldr	r3, [pc, #156]	; (8005e34 <prvInsertBlockIntoFreeList+0xa8>)
 8005d96:	60fb      	str	r3, [r7, #12]
 8005d98:	e002      	b.n	8005da0 <prvInsertBlockIntoFreeList+0x14>
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	60fb      	str	r3, [r7, #12]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d8f7      	bhi.n	8005d9a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	68ba      	ldr	r2, [r7, #8]
 8005db4:	4413      	add	r3, r2
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d108      	bne.n	8005dce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	685a      	ldr	r2, [r3, #4]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	441a      	add	r2, r3
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	68ba      	ldr	r2, [r7, #8]
 8005dd8:	441a      	add	r2, r3
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d118      	bne.n	8005e14 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	4b14      	ldr	r3, [pc, #80]	; (8005e38 <prvInsertBlockIntoFreeList+0xac>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d00d      	beq.n	8005e0a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	685a      	ldr	r2, [r3, #4]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	441a      	add	r2, r3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	601a      	str	r2, [r3, #0]
 8005e08:	e008      	b.n	8005e1c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005e0a:	4b0b      	ldr	r3, [pc, #44]	; (8005e38 <prvInsertBlockIntoFreeList+0xac>)
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	601a      	str	r2, [r3, #0]
 8005e12:	e003      	b.n	8005e1c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d002      	beq.n	8005e2a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e2a:	bf00      	nop
 8005e2c:	3714      	adds	r7, #20
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bc80      	pop	{r7}
 8005e32:	4770      	bx	lr
 8005e34:	2000172c 	.word	0x2000172c
 8005e38:	20001734 	.word	0x20001734

08005e3c <__libc_init_array>:
 8005e3c:	b570      	push	{r4, r5, r6, lr}
 8005e3e:	2600      	movs	r6, #0
 8005e40:	4d0c      	ldr	r5, [pc, #48]	; (8005e74 <__libc_init_array+0x38>)
 8005e42:	4c0d      	ldr	r4, [pc, #52]	; (8005e78 <__libc_init_array+0x3c>)
 8005e44:	1b64      	subs	r4, r4, r5
 8005e46:	10a4      	asrs	r4, r4, #2
 8005e48:	42a6      	cmp	r6, r4
 8005e4a:	d109      	bne.n	8005e60 <__libc_init_array+0x24>
 8005e4c:	f000 f830 	bl	8005eb0 <_init>
 8005e50:	2600      	movs	r6, #0
 8005e52:	4d0a      	ldr	r5, [pc, #40]	; (8005e7c <__libc_init_array+0x40>)
 8005e54:	4c0a      	ldr	r4, [pc, #40]	; (8005e80 <__libc_init_array+0x44>)
 8005e56:	1b64      	subs	r4, r4, r5
 8005e58:	10a4      	asrs	r4, r4, #2
 8005e5a:	42a6      	cmp	r6, r4
 8005e5c:	d105      	bne.n	8005e6a <__libc_init_array+0x2e>
 8005e5e:	bd70      	pop	{r4, r5, r6, pc}
 8005e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e64:	4798      	blx	r3
 8005e66:	3601      	adds	r6, #1
 8005e68:	e7ee      	b.n	8005e48 <__libc_init_array+0xc>
 8005e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e6e:	4798      	blx	r3
 8005e70:	3601      	adds	r6, #1
 8005e72:	e7f2      	b.n	8005e5a <__libc_init_array+0x1e>
 8005e74:	080060c4 	.word	0x080060c4
 8005e78:	080060c4 	.word	0x080060c4
 8005e7c:	080060c4 	.word	0x080060c4
 8005e80:	080060c8 	.word	0x080060c8

08005e84 <memcpy>:
 8005e84:	440a      	add	r2, r1
 8005e86:	4291      	cmp	r1, r2
 8005e88:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005e8c:	d100      	bne.n	8005e90 <memcpy+0xc>
 8005e8e:	4770      	bx	lr
 8005e90:	b510      	push	{r4, lr}
 8005e92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e96:	4291      	cmp	r1, r2
 8005e98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e9c:	d1f9      	bne.n	8005e92 <memcpy+0xe>
 8005e9e:	bd10      	pop	{r4, pc}

08005ea0 <memset>:
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	4402      	add	r2, r0
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d100      	bne.n	8005eaa <memset+0xa>
 8005ea8:	4770      	bx	lr
 8005eaa:	f803 1b01 	strb.w	r1, [r3], #1
 8005eae:	e7f9      	b.n	8005ea4 <memset+0x4>

08005eb0 <_init>:
 8005eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eb2:	bf00      	nop
 8005eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eb6:	bc08      	pop	{r3}
 8005eb8:	469e      	mov	lr, r3
 8005eba:	4770      	bx	lr

08005ebc <_fini>:
 8005ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ebe:	bf00      	nop
 8005ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ec2:	bc08      	pop	{r3}
 8005ec4:	469e      	mov	lr, r3
 8005ec6:	4770      	bx	lr
