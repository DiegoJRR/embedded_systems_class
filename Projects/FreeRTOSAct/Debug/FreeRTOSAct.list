
FreeRTOSAct.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047c8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  080048d8  080048d8  000148d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049a0  080049a0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080049a0  080049a0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080049a0  080049a0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049a0  080049a0  000149a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049a4  080049a4  000149a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080049a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019bc  20000010  080049b8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200019cc  080049b8  000219cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011fc2  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a57  00000000  00000000  00031ffb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a8  00000000  00000000  00034a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f80  00000000  00000000  00035b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000025c4  00000000  00000000  00036a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000119fe  00000000  00000000  00039044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090b00  00000000  00000000  0004aa42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000db542  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045e4  00000000  00000000  000db594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	080048c0 	.word	0x080048c0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	080048c0 	.word	0x080048c0

08000150 <__aeabi_frsub>:
 8000150:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__addsf3>
 8000156:	bf00      	nop

08000158 <__aeabi_fsub>:
 8000158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800015c <__addsf3>:
 800015c:	0042      	lsls	r2, r0, #1
 800015e:	bf1f      	itttt	ne
 8000160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000164:	ea92 0f03 	teqne	r2, r3
 8000168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800016c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000170:	d06a      	beq.n	8000248 <__addsf3+0xec>
 8000172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800017a:	bfc1      	itttt	gt
 800017c:	18d2      	addgt	r2, r2, r3
 800017e:	4041      	eorgt	r1, r0
 8000180:	4048      	eorgt	r0, r1
 8000182:	4041      	eorgt	r1, r0
 8000184:	bfb8      	it	lt
 8000186:	425b      	neglt	r3, r3
 8000188:	2b19      	cmp	r3, #25
 800018a:	bf88      	it	hi
 800018c:	4770      	bxhi	lr
 800018e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000192:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000196:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800019a:	bf18      	it	ne
 800019c:	4240      	negne	r0, r0
 800019e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001a2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4249      	negne	r1, r1
 80001ae:	ea92 0f03 	teq	r2, r3
 80001b2:	d03f      	beq.n	8000234 <__addsf3+0xd8>
 80001b4:	f1a2 0201 	sub.w	r2, r2, #1
 80001b8:	fa41 fc03 	asr.w	ip, r1, r3
 80001bc:	eb10 000c 	adds.w	r0, r0, ip
 80001c0:	f1c3 0320 	rsb	r3, r3, #32
 80001c4:	fa01 f103 	lsl.w	r1, r1, r3
 80001c8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001cc:	d502      	bpl.n	80001d4 <__addsf3+0x78>
 80001ce:	4249      	negs	r1, r1
 80001d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d8:	d313      	bcc.n	8000202 <__addsf3+0xa6>
 80001da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001de:	d306      	bcc.n	80001ee <__addsf3+0x92>
 80001e0:	0840      	lsrs	r0, r0, #1
 80001e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e6:	f102 0201 	add.w	r2, r2, #1
 80001ea:	2afe      	cmp	r2, #254	; 0xfe
 80001ec:	d251      	bcs.n	8000292 <__addsf3+0x136>
 80001ee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f6:	bf08      	it	eq
 80001f8:	f020 0001 	biceq.w	r0, r0, #1
 80001fc:	ea40 0003 	orr.w	r0, r0, r3
 8000200:	4770      	bx	lr
 8000202:	0049      	lsls	r1, r1, #1
 8000204:	eb40 0000 	adc.w	r0, r0, r0
 8000208:	3a01      	subs	r2, #1
 800020a:	bf28      	it	cs
 800020c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000210:	d2ed      	bcs.n	80001ee <__addsf3+0x92>
 8000212:	fab0 fc80 	clz	ip, r0
 8000216:	f1ac 0c08 	sub.w	ip, ip, #8
 800021a:	ebb2 020c 	subs.w	r2, r2, ip
 800021e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000222:	bfaa      	itet	ge
 8000224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000228:	4252      	neglt	r2, r2
 800022a:	4318      	orrge	r0, r3
 800022c:	bfbc      	itt	lt
 800022e:	40d0      	lsrlt	r0, r2
 8000230:	4318      	orrlt	r0, r3
 8000232:	4770      	bx	lr
 8000234:	f092 0f00 	teq	r2, #0
 8000238:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800023c:	bf06      	itte	eq
 800023e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000242:	3201      	addeq	r2, #1
 8000244:	3b01      	subne	r3, #1
 8000246:	e7b5      	b.n	80001b4 <__addsf3+0x58>
 8000248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800024c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000250:	bf18      	it	ne
 8000252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000256:	d021      	beq.n	800029c <__addsf3+0x140>
 8000258:	ea92 0f03 	teq	r2, r3
 800025c:	d004      	beq.n	8000268 <__addsf3+0x10c>
 800025e:	f092 0f00 	teq	r2, #0
 8000262:	bf08      	it	eq
 8000264:	4608      	moveq	r0, r1
 8000266:	4770      	bx	lr
 8000268:	ea90 0f01 	teq	r0, r1
 800026c:	bf1c      	itt	ne
 800026e:	2000      	movne	r0, #0
 8000270:	4770      	bxne	lr
 8000272:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000276:	d104      	bne.n	8000282 <__addsf3+0x126>
 8000278:	0040      	lsls	r0, r0, #1
 800027a:	bf28      	it	cs
 800027c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000280:	4770      	bx	lr
 8000282:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000286:	bf3c      	itt	cc
 8000288:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800028c:	4770      	bxcc	lr
 800028e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000292:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800029a:	4770      	bx	lr
 800029c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002a0:	bf16      	itet	ne
 80002a2:	4608      	movne	r0, r1
 80002a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a8:	4601      	movne	r1, r0
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	bf06      	itte	eq
 80002ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002b2:	ea90 0f01 	teqeq	r0, r1
 80002b6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ba:	4770      	bx	lr

080002bc <__aeabi_ui2f>:
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	e004      	b.n	80002cc <__aeabi_i2f+0x8>
 80002c2:	bf00      	nop

080002c4 <__aeabi_i2f>:
 80002c4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c8:	bf48      	it	mi
 80002ca:	4240      	negmi	r0, r0
 80002cc:	ea5f 0c00 	movs.w	ip, r0
 80002d0:	bf08      	it	eq
 80002d2:	4770      	bxeq	lr
 80002d4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d8:	4601      	mov	r1, r0
 80002da:	f04f 0000 	mov.w	r0, #0
 80002de:	e01c      	b.n	800031a <__aeabi_l2f+0x2a>

080002e0 <__aeabi_ul2f>:
 80002e0:	ea50 0201 	orrs.w	r2, r0, r1
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e00a      	b.n	8000304 <__aeabi_l2f+0x14>
 80002ee:	bf00      	nop

080002f0 <__aeabi_l2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__aeabi_l2f+0x14>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	ea5f 0c01 	movs.w	ip, r1
 8000308:	bf02      	ittt	eq
 800030a:	4684      	moveq	ip, r0
 800030c:	4601      	moveq	r1, r0
 800030e:	2000      	moveq	r0, #0
 8000310:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000314:	bf08      	it	eq
 8000316:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800031a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031e:	fabc f28c 	clz	r2, ip
 8000322:	3a08      	subs	r2, #8
 8000324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000328:	db10      	blt.n	800034c <__aeabi_l2f+0x5c>
 800032a:	fa01 fc02 	lsl.w	ip, r1, r2
 800032e:	4463      	add	r3, ip
 8000330:	fa00 fc02 	lsl.w	ip, r0, r2
 8000334:	f1c2 0220 	rsb	r2, r2, #32
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	fa20 f202 	lsr.w	r2, r0, r2
 8000340:	eb43 0002 	adc.w	r0, r3, r2
 8000344:	bf08      	it	eq
 8000346:	f020 0001 	biceq.w	r0, r0, #1
 800034a:	4770      	bx	lr
 800034c:	f102 0220 	add.w	r2, r2, #32
 8000350:	fa01 fc02 	lsl.w	ip, r1, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800035c:	fa21 f202 	lsr.w	r2, r1, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800036a:	4770      	bx	lr

0800036c <__aeabi_fmul>:
 800036c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000370:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000374:	bf1e      	ittt	ne
 8000376:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800037a:	ea92 0f0c 	teqne	r2, ip
 800037e:	ea93 0f0c 	teqne	r3, ip
 8000382:	d06f      	beq.n	8000464 <__aeabi_fmul+0xf8>
 8000384:	441a      	add	r2, r3
 8000386:	ea80 0c01 	eor.w	ip, r0, r1
 800038a:	0240      	lsls	r0, r0, #9
 800038c:	bf18      	it	ne
 800038e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000392:	d01e      	beq.n	80003d2 <__aeabi_fmul+0x66>
 8000394:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000398:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800039c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003a0:	fba0 3101 	umull	r3, r1, r0, r1
 80003a4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003ac:	bf3e      	ittt	cc
 80003ae:	0049      	lslcc	r1, r1, #1
 80003b0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b4:	005b      	lslcc	r3, r3, #1
 80003b6:	ea40 0001 	orr.w	r0, r0, r1
 80003ba:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003be:	2afd      	cmp	r2, #253	; 0xfd
 80003c0:	d81d      	bhi.n	80003fe <__aeabi_fmul+0x92>
 80003c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ca:	bf08      	it	eq
 80003cc:	f020 0001 	biceq.w	r0, r0, #1
 80003d0:	4770      	bx	lr
 80003d2:	f090 0f00 	teq	r0, #0
 80003d6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003da:	bf08      	it	eq
 80003dc:	0249      	lsleq	r1, r1, #9
 80003de:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003e2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e6:	3a7f      	subs	r2, #127	; 0x7f
 80003e8:	bfc2      	ittt	gt
 80003ea:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003f2:	4770      	bxgt	lr
 80003f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f8:	f04f 0300 	mov.w	r3, #0
 80003fc:	3a01      	subs	r2, #1
 80003fe:	dc5d      	bgt.n	80004bc <__aeabi_fmul+0x150>
 8000400:	f112 0f19 	cmn.w	r2, #25
 8000404:	bfdc      	itt	le
 8000406:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800040a:	4770      	bxle	lr
 800040c:	f1c2 0200 	rsb	r2, r2, #0
 8000410:	0041      	lsls	r1, r0, #1
 8000412:	fa21 f102 	lsr.w	r1, r1, r2
 8000416:	f1c2 0220 	rsb	r2, r2, #32
 800041a:	fa00 fc02 	lsl.w	ip, r0, r2
 800041e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000422:	f140 0000 	adc.w	r0, r0, #0
 8000426:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800042a:	bf08      	it	eq
 800042c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000430:	4770      	bx	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800043a:	bf02      	ittt	eq
 800043c:	0040      	lsleq	r0, r0, #1
 800043e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000442:	3a01      	subeq	r2, #1
 8000444:	d0f9      	beq.n	800043a <__aeabi_fmul+0xce>
 8000446:	ea40 000c 	orr.w	r0, r0, ip
 800044a:	f093 0f00 	teq	r3, #0
 800044e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000452:	bf02      	ittt	eq
 8000454:	0049      	lsleq	r1, r1, #1
 8000456:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800045a:	3b01      	subeq	r3, #1
 800045c:	d0f9      	beq.n	8000452 <__aeabi_fmul+0xe6>
 800045e:	ea41 010c 	orr.w	r1, r1, ip
 8000462:	e78f      	b.n	8000384 <__aeabi_fmul+0x18>
 8000464:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000468:	ea92 0f0c 	teq	r2, ip
 800046c:	bf18      	it	ne
 800046e:	ea93 0f0c 	teqne	r3, ip
 8000472:	d00a      	beq.n	800048a <__aeabi_fmul+0x11e>
 8000474:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000478:	bf18      	it	ne
 800047a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047e:	d1d8      	bne.n	8000432 <__aeabi_fmul+0xc6>
 8000480:	ea80 0001 	eor.w	r0, r0, r1
 8000484:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000488:	4770      	bx	lr
 800048a:	f090 0f00 	teq	r0, #0
 800048e:	bf17      	itett	ne
 8000490:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000494:	4608      	moveq	r0, r1
 8000496:	f091 0f00 	teqne	r1, #0
 800049a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049e:	d014      	beq.n	80004ca <__aeabi_fmul+0x15e>
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	d101      	bne.n	80004aa <__aeabi_fmul+0x13e>
 80004a6:	0242      	lsls	r2, r0, #9
 80004a8:	d10f      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004aa:	ea93 0f0c 	teq	r3, ip
 80004ae:	d103      	bne.n	80004b8 <__aeabi_fmul+0x14c>
 80004b0:	024b      	lsls	r3, r1, #9
 80004b2:	bf18      	it	ne
 80004b4:	4608      	movne	r0, r1
 80004b6:	d108      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c8:	4770      	bx	lr
 80004ca:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ce:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_fdiv>:
 80004d4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004dc:	bf1e      	ittt	ne
 80004de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004e2:	ea92 0f0c 	teqne	r2, ip
 80004e6:	ea93 0f0c 	teqne	r3, ip
 80004ea:	d069      	beq.n	80005c0 <__aeabi_fdiv+0xec>
 80004ec:	eba2 0203 	sub.w	r2, r2, r3
 80004f0:	ea80 0c01 	eor.w	ip, r0, r1
 80004f4:	0249      	lsls	r1, r1, #9
 80004f6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004fa:	d037      	beq.n	800056c <__aeabi_fdiv+0x98>
 80004fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000500:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000504:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000508:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800050c:	428b      	cmp	r3, r1
 800050e:	bf38      	it	cc
 8000510:	005b      	lslcc	r3, r3, #1
 8000512:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000516:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800051a:	428b      	cmp	r3, r1
 800051c:	bf24      	itt	cs
 800051e:	1a5b      	subcs	r3, r3, r1
 8000520:	ea40 000c 	orrcs.w	r0, r0, ip
 8000524:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000528:	bf24      	itt	cs
 800052a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000532:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000536:	bf24      	itt	cs
 8000538:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800053c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000540:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000544:	bf24      	itt	cs
 8000546:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800054a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	bf18      	it	ne
 8000552:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000556:	d1e0      	bne.n	800051a <__aeabi_fdiv+0x46>
 8000558:	2afd      	cmp	r2, #253	; 0xfd
 800055a:	f63f af50 	bhi.w	80003fe <__aeabi_fmul+0x92>
 800055e:	428b      	cmp	r3, r1
 8000560:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000564:	bf08      	it	eq
 8000566:	f020 0001 	biceq.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000570:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000574:	327f      	adds	r2, #127	; 0x7f
 8000576:	bfc2      	ittt	gt
 8000578:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800057c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000580:	4770      	bxgt	lr
 8000582:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000586:	f04f 0300 	mov.w	r3, #0
 800058a:	3a01      	subs	r2, #1
 800058c:	e737      	b.n	80003fe <__aeabi_fmul+0x92>
 800058e:	f092 0f00 	teq	r2, #0
 8000592:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000596:	bf02      	ittt	eq
 8000598:	0040      	lsleq	r0, r0, #1
 800059a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059e:	3a01      	subeq	r2, #1
 80005a0:	d0f9      	beq.n	8000596 <__aeabi_fdiv+0xc2>
 80005a2:	ea40 000c 	orr.w	r0, r0, ip
 80005a6:	f093 0f00 	teq	r3, #0
 80005aa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ae:	bf02      	ittt	eq
 80005b0:	0049      	lsleq	r1, r1, #1
 80005b2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b6:	3b01      	subeq	r3, #1
 80005b8:	d0f9      	beq.n	80005ae <__aeabi_fdiv+0xda>
 80005ba:	ea41 010c 	orr.w	r1, r1, ip
 80005be:	e795      	b.n	80004ec <__aeabi_fdiv+0x18>
 80005c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c4:	ea92 0f0c 	teq	r2, ip
 80005c8:	d108      	bne.n	80005dc <__aeabi_fdiv+0x108>
 80005ca:	0242      	lsls	r2, r0, #9
 80005cc:	f47f af7d 	bne.w	80004ca <__aeabi_fmul+0x15e>
 80005d0:	ea93 0f0c 	teq	r3, ip
 80005d4:	f47f af70 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e776      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	d104      	bne.n	80005ec <__aeabi_fdiv+0x118>
 80005e2:	024b      	lsls	r3, r1, #9
 80005e4:	f43f af4c 	beq.w	8000480 <__aeabi_fmul+0x114>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e76e      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005ec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005f0:	bf18      	it	ne
 80005f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f6:	d1ca      	bne.n	800058e <__aeabi_fdiv+0xba>
 80005f8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005fc:	f47f af5c 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 8000600:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000604:	f47f af3c 	bne.w	8000480 <__aeabi_fmul+0x114>
 8000608:	e75f      	b.n	80004ca <__aeabi_fmul+0x15e>
 800060a:	bf00      	nop

0800060c <__aeabi_f2uiz>:
 800060c:	0042      	lsls	r2, r0, #1
 800060e:	d20e      	bcs.n	800062e <__aeabi_f2uiz+0x22>
 8000610:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000614:	d30b      	bcc.n	800062e <__aeabi_f2uiz+0x22>
 8000616:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800061a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061e:	d409      	bmi.n	8000634 <__aeabi_f2uiz+0x28>
 8000620:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000624:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000628:	fa23 f002 	lsr.w	r0, r3, r2
 800062c:	4770      	bx	lr
 800062e:	f04f 0000 	mov.w	r0, #0
 8000632:	4770      	bx	lr
 8000634:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000638:	d101      	bne.n	800063e <__aeabi_f2uiz+0x32>
 800063a:	0242      	lsls	r2, r0, #9
 800063c:	d102      	bne.n	8000644 <__aeabi_f2uiz+0x38>
 800063e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000642:	4770      	bx	lr
 8000644:	f04f 0000 	mov.w	r0, #0
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop

0800064c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000650:	f000 faca 	bl	8000be8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000654:	f000 f832 	bl	80006bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000658:	f000 f876 	bl	8000748 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800065c:	f001 fc22 	bl	8001ea4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ledTask */
  ledTaskHandle = osThreadNew(StartLedTask, NULL, &ledTask_attributes);
 8000660:	4a0d      	ldr	r2, [pc, #52]	; (8000698 <main+0x4c>)
 8000662:	2100      	movs	r1, #0
 8000664:	480d      	ldr	r0, [pc, #52]	; (800069c <main+0x50>)
 8000666:	f001 fc83 	bl	8001f70 <osThreadNew>
 800066a:	4603      	mov	r3, r0
 800066c:	4a0c      	ldr	r2, [pc, #48]	; (80006a0 <main+0x54>)
 800066e:	6013      	str	r3, [r2, #0]

  /* creation of pwmTask */
  pwmTaskHandle = osThreadNew(PWMTask, NULL, &pwmTask_attributes);
 8000670:	4a0c      	ldr	r2, [pc, #48]	; (80006a4 <main+0x58>)
 8000672:	2100      	movs	r1, #0
 8000674:	480c      	ldr	r0, [pc, #48]	; (80006a8 <main+0x5c>)
 8000676:	f001 fc7b 	bl	8001f70 <osThreadNew>
 800067a:	4603      	mov	r3, r0
 800067c:	4a0b      	ldr	r2, [pc, #44]	; (80006ac <main+0x60>)
 800067e:	6013      	str	r3, [r2, #0]

  /* creation of inputTask */
  inputTaskHandle = osThreadNew(InputInverterTask, NULL, &inputTask_attributes);
 8000680:	4a0b      	ldr	r2, [pc, #44]	; (80006b0 <main+0x64>)
 8000682:	2100      	movs	r1, #0
 8000684:	480b      	ldr	r0, [pc, #44]	; (80006b4 <main+0x68>)
 8000686:	f001 fc73 	bl	8001f70 <osThreadNew>
 800068a:	4603      	mov	r3, r0
 800068c:	4a0a      	ldr	r2, [pc, #40]	; (80006b8 <main+0x6c>)
 800068e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000690:	f001 fc3a 	bl	8001f08 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000694:	e7fe      	b.n	8000694 <main+0x48>
 8000696:	bf00      	nop
 8000698:	0800491c 	.word	0x0800491c
 800069c:	08000869 	.word	0x08000869
 80006a0:	2000002c 	.word	0x2000002c
 80006a4:	08004940 	.word	0x08004940
 80006a8:	08000891 	.word	0x08000891
 80006ac:	20000030 	.word	0x20000030
 80006b0:	08004964 	.word	0x08004964
 80006b4:	0800099d 	.word	0x0800099d
 80006b8:	20000034 	.word	0x20000034

080006bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b090      	sub	sp, #64	; 0x40
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	f107 0318 	add.w	r3, r7, #24
 80006c6:	2228      	movs	r2, #40	; 0x28
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f004 f8f0 	bl	80048b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
 80006dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006de:	2301      	movs	r3, #1
 80006e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ec:	2301      	movs	r3, #1
 80006ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f0:	2302      	movs	r3, #2
 80006f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006fa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000700:	f107 0318 	add.w	r3, r7, #24
 8000704:	4618      	mov	r0, r3
 8000706:	f000 fd4d 	bl	80011a4 <HAL_RCC_OscConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000710:	f000 f965 	bl	80009de <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000714:	230f      	movs	r3, #15
 8000716:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000718:	2302      	movs	r3, #2
 800071a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000720:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000724:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	2102      	movs	r1, #2
 800072e:	4618      	mov	r0, r3
 8000730:	f000 ffba 	bl	80016a8 <HAL_RCC_ClockConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800073a:	f000 f950 	bl	80009de <Error_Handler>
  }
}
 800073e:	bf00      	nop
 8000740:	3740      	adds	r7, #64	; 0x40
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
	...

08000748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b088      	sub	sp, #32
 800074c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	f107 0310 	add.w	r3, r7, #16
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075c:	4b3e      	ldr	r3, [pc, #248]	; (8000858 <MX_GPIO_Init+0x110>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	4a3d      	ldr	r2, [pc, #244]	; (8000858 <MX_GPIO_Init+0x110>)
 8000762:	f043 0310 	orr.w	r3, r3, #16
 8000766:	6193      	str	r3, [r2, #24]
 8000768:	4b3b      	ldr	r3, [pc, #236]	; (8000858 <MX_GPIO_Init+0x110>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	f003 0310 	and.w	r3, r3, #16
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000774:	4b38      	ldr	r3, [pc, #224]	; (8000858 <MX_GPIO_Init+0x110>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	4a37      	ldr	r2, [pc, #220]	; (8000858 <MX_GPIO_Init+0x110>)
 800077a:	f043 0320 	orr.w	r3, r3, #32
 800077e:	6193      	str	r3, [r2, #24]
 8000780:	4b35      	ldr	r3, [pc, #212]	; (8000858 <MX_GPIO_Init+0x110>)
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	f003 0320 	and.w	r3, r3, #32
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078c:	4b32      	ldr	r3, [pc, #200]	; (8000858 <MX_GPIO_Init+0x110>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	4a31      	ldr	r2, [pc, #196]	; (8000858 <MX_GPIO_Init+0x110>)
 8000792:	f043 0304 	orr.w	r3, r3, #4
 8000796:	6193      	str	r3, [r2, #24]
 8000798:	4b2f      	ldr	r3, [pc, #188]	; (8000858 <MX_GPIO_Init+0x110>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	f003 0304 	and.w	r3, r3, #4
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a4:	4b2c      	ldr	r3, [pc, #176]	; (8000858 <MX_GPIO_Init+0x110>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	4a2b      	ldr	r2, [pc, #172]	; (8000858 <MX_GPIO_Init+0x110>)
 80007aa:	f043 0308 	orr.w	r3, r3, #8
 80007ae:	6193      	str	r3, [r2, #24]
 80007b0:	4b29      	ldr	r3, [pc, #164]	; (8000858 <MX_GPIO_Init+0x110>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	f003 0308 	and.w	r3, r3, #8
 80007b8:	603b      	str	r3, [r7, #0]
 80007ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007c2:	4826      	ldr	r0, [pc, #152]	; (800085c <MX_GPIO_Init+0x114>)
 80007c4:	f000 fcbd 	bl	8001142 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);
 80007c8:	2200      	movs	r2, #0
 80007ca:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 80007ce:	4824      	ldr	r0, [pc, #144]	; (8000860 <MX_GPIO_Init+0x118>)
 80007d0:	f000 fcb7 	bl	8001142 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2120      	movs	r1, #32
 80007d8:	4822      	ldr	r0, [pc, #136]	; (8000864 <MX_GPIO_Init+0x11c>)
 80007da:	f000 fcb2 	bl	8001142 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e4:	2301      	movs	r3, #1
 80007e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ec:	2302      	movs	r3, #2
 80007ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007f0:	f107 0310 	add.w	r3, r7, #16
 80007f4:	4619      	mov	r1, r3
 80007f6:	4819      	ldr	r0, [pc, #100]	; (800085c <MX_GPIO_Init+0x114>)
 80007f8:	f000 fb08 	bl	8000e0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80007fc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000800:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080a:	f107 0310 	add.w	r3, r7, #16
 800080e:	4619      	mov	r1, r3
 8000810:	4813      	ldr	r0, [pc, #76]	; (8000860 <MX_GPIO_Init+0x118>)
 8000812:	f000 fafb 	bl	8000e0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 8000816:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 800081a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081c:	2301      	movs	r3, #1
 800081e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000824:	2302      	movs	r3, #2
 8000826:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000828:	f107 0310 	add.w	r3, r7, #16
 800082c:	4619      	mov	r1, r3
 800082e:	480c      	ldr	r0, [pc, #48]	; (8000860 <MX_GPIO_Init+0x118>)
 8000830:	f000 faec 	bl	8000e0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000834:	2320      	movs	r3, #32
 8000836:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000838:	2301      	movs	r3, #1
 800083a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2302      	movs	r3, #2
 8000842:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000844:	f107 0310 	add.w	r3, r7, #16
 8000848:	4619      	mov	r1, r3
 800084a:	4806      	ldr	r0, [pc, #24]	; (8000864 <MX_GPIO_Init+0x11c>)
 800084c:	f000 fade 	bl	8000e0c <HAL_GPIO_Init>

}
 8000850:	bf00      	nop
 8000852:	3720      	adds	r7, #32
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40021000 	.word	0x40021000
 800085c:	40011000 	.word	0x40011000
 8000860:	40010800 	.word	0x40010800
 8000864:	40010c00 	.word	0x40010c00

08000868 <StartLedTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartLedTask */
void StartLedTask(void *argument)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000870:	2001      	movs	r0, #1
 8000872:	f001 fc27 	bl	80020c4 <osDelay>
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000876:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800087a:	4804      	ldr	r0, [pc, #16]	; (800088c <StartLedTask+0x24>)
 800087c:	f000 fc79 	bl	8001172 <HAL_GPIO_TogglePin>

    // Repetition rate of 500 ms
    osDelay(500);
 8000880:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000884:	f001 fc1e 	bl	80020c4 <osDelay>
    osDelay(1);
 8000888:	e7f2      	b.n	8000870 <StartLedTask+0x8>
 800088a:	bf00      	nop
 800088c:	40011000 	.word	0x40011000

08000890 <PWMTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_PWMTask */
void PWMTask(void *argument)
{
 8000890:	b590      	push	{r4, r7, lr}
 8000892:	b08b      	sub	sp, #44	; 0x2c
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PWMTask */
  /* Infinite loop */
  for(;;)
  {
	// Read each input bit
	int firstPin = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8000898:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800089c:	483c      	ldr	r0, [pc, #240]	; (8000990 <PWMTask+0x100>)
 800089e:	f000 fc39 	bl	8001114 <HAL_GPIO_ReadPin>
 80008a2:	4603      	mov	r3, r0
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
	int secondPin = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11);
 80008a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008aa:	4839      	ldr	r0, [pc, #228]	; (8000990 <PWMTask+0x100>)
 80008ac:	f000 fc32 	bl	8001114 <HAL_GPIO_ReadPin>
 80008b0:	4603      	mov	r3, r0
 80008b2:	623b      	str	r3, [r7, #32]
	int thirdPin = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12);
 80008b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008b8:	4835      	ldr	r0, [pc, #212]	; (8000990 <PWMTask+0x100>)
 80008ba:	f000 fc2b 	bl	8001114 <HAL_GPIO_ReadPin>
 80008be:	4603      	mov	r3, r0
 80008c0:	61fb      	str	r3, [r7, #28]
	int fourthPin = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 80008c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008c6:	4832      	ldr	r0, [pc, #200]	; (8000990 <PWMTask+0x100>)
 80008c8:	f000 fc24 	bl	8001114 <HAL_GPIO_ReadPin>
 80008cc:	4603      	mov	r3, r0
 80008ce:	61bb      	str	r3, [r7, #24]

	// Write to char variable
    char res = 0x0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	75fb      	strb	r3, [r7, #23]
    res = res | firstPin;
 80008d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d6:	b25a      	sxtb	r2, r3
 80008d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80008dc:	4313      	orrs	r3, r2
 80008de:	b25b      	sxtb	r3, r3
 80008e0:	75fb      	strb	r3, [r7, #23]
    res = res | (secondPin << 1);
 80008e2:	6a3b      	ldr	r3, [r7, #32]
 80008e4:	005b      	lsls	r3, r3, #1
 80008e6:	b25a      	sxtb	r2, r3
 80008e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80008ec:	4313      	orrs	r3, r2
 80008ee:	b25b      	sxtb	r3, r3
 80008f0:	75fb      	strb	r3, [r7, #23]
    res = res | (thirdPin << 2);
 80008f2:	69fb      	ldr	r3, [r7, #28]
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	b25a      	sxtb	r2, r3
 80008f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80008fc:	4313      	orrs	r3, r2
 80008fe:	b25b      	sxtb	r3, r3
 8000900:	75fb      	strb	r3, [r7, #23]
    res = res | (fourthPin << 3);
 8000902:	69bb      	ldr	r3, [r7, #24]
 8000904:	00db      	lsls	r3, r3, #3
 8000906:	b25a      	sxtb	r2, r3
 8000908:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800090c:	4313      	orrs	r3, r2
 800090e:	b25b      	sxtb	r3, r3
 8000910:	75fb      	strb	r3, [r7, #23]

    // Max value, 0x111 -> 15, corresponds to 1, or 100%
    float dutyCycle = res / (float) 15;
 8000912:	7dfb      	ldrb	r3, [r7, #23]
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff fcd5 	bl	80002c4 <__aeabi_i2f>
 800091a:	4603      	mov	r3, r0
 800091c:	491d      	ldr	r1, [pc, #116]	; (8000994 <PWMTask+0x104>)
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff fdd8 	bl	80004d4 <__aeabi_fdiv>
 8000924:	4603      	mov	r3, r0
 8000926:	613b      	str	r3, [r7, #16]
    int repetitionRate = 1000;
 8000928:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800092c:	60fb      	str	r3, [r7, #12]

    // Turn on for a portion of the time
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800092e:	2201      	movs	r2, #1
 8000930:	2120      	movs	r1, #32
 8000932:	4819      	ldr	r0, [pc, #100]	; (8000998 <PWMTask+0x108>)
 8000934:	f000 fc05 	bl	8001142 <HAL_GPIO_WritePin>
    osDelay((int) repetitionRate*dutyCycle); 
 8000938:	68f8      	ldr	r0, [r7, #12]
 800093a:	f7ff fcc3 	bl	80002c4 <__aeabi_i2f>
 800093e:	4603      	mov	r3, r0
 8000940:	6939      	ldr	r1, [r7, #16]
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff fd12 	bl	800036c <__aeabi_fmul>
 8000948:	4603      	mov	r3, r0
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff fe5e 	bl	800060c <__aeabi_f2uiz>
 8000950:	4603      	mov	r3, r0
 8000952:	4618      	mov	r0, r3
 8000954:	f001 fbb6 	bl	80020c4 <osDelay>

    // Off for the rest
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	2120      	movs	r1, #32
 800095c:	480e      	ldr	r0, [pc, #56]	; (8000998 <PWMTask+0x108>)
 800095e:	f000 fbf0 	bl	8001142 <HAL_GPIO_WritePin>
    osDelay((int) repetitionRate*(1 - dutyCycle));
 8000962:	68f8      	ldr	r0, [r7, #12]
 8000964:	f7ff fcae 	bl	80002c4 <__aeabi_i2f>
 8000968:	4604      	mov	r4, r0
 800096a:	6939      	ldr	r1, [r7, #16]
 800096c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8000970:	f7ff fbf2 	bl	8000158 <__aeabi_fsub>
 8000974:	4603      	mov	r3, r0
 8000976:	4619      	mov	r1, r3
 8000978:	4620      	mov	r0, r4
 800097a:	f7ff fcf7 	bl	800036c <__aeabi_fmul>
 800097e:	4603      	mov	r3, r0
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff fe43 	bl	800060c <__aeabi_f2uiz>
 8000986:	4603      	mov	r3, r0
 8000988:	4618      	mov	r0, r3
 800098a:	f001 fb9b 	bl	80020c4 <osDelay>
  {
 800098e:	e783      	b.n	8000898 <PWMTask+0x8>
 8000990:	40010800 	.word	0x40010800
 8000994:	41700000 	.word	0x41700000
 8000998:	40010c00 	.word	0x40010c00

0800099c <InputInverterTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_InputInverterTask */
void InputInverterTask(void *argument)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN InputInverterTask */
  /* Infinite loop */
  for(;;)
  {
    int buttonPressed = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 80009a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009a8:	4804      	ldr	r0, [pc, #16]	; (80009bc <InputInverterTask+0x20>)
 80009aa:	f000 fbb3 	bl	8001114 <HAL_GPIO_ReadPin>
 80009ae:	4603      	mov	r3, r0
 80009b0:	60fb      	str	r3, [r7, #12]
    // } else {
    //     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
    // }

    // Repetition rate of 100 ms
    osDelay(100);
 80009b2:	2064      	movs	r0, #100	; 0x64
 80009b4:	f001 fb86 	bl	80020c4 <osDelay>
  {
 80009b8:	e7f4      	b.n	80009a4 <InputInverterTask+0x8>
 80009ba:	bf00      	nop
 80009bc:	40010800 	.word	0x40010800

080009c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009d0:	d101      	bne.n	80009d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009d2:	f000 f91f 	bl	8000c14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e2:	b672      	cpsid	i
}
 80009e4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e6:	e7fe      	b.n	80009e6 <Error_Handler+0x8>

080009e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009ee:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <HAL_MspInit+0x68>)
 80009f0:	699b      	ldr	r3, [r3, #24]
 80009f2:	4a17      	ldr	r2, [pc, #92]	; (8000a50 <HAL_MspInit+0x68>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	6193      	str	r3, [r2, #24]
 80009fa:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <HAL_MspInit+0x68>)
 80009fc:	699b      	ldr	r3, [r3, #24]
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	60bb      	str	r3, [r7, #8]
 8000a04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a06:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <HAL_MspInit+0x68>)
 8000a08:	69db      	ldr	r3, [r3, #28]
 8000a0a:	4a11      	ldr	r2, [pc, #68]	; (8000a50 <HAL_MspInit+0x68>)
 8000a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a10:	61d3      	str	r3, [r2, #28]
 8000a12:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <HAL_MspInit+0x68>)
 8000a14:	69db      	ldr	r3, [r3, #28]
 8000a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	210f      	movs	r1, #15
 8000a22:	f06f 0001 	mvn.w	r0, #1
 8000a26:	f000 f9c6 	bl	8000db6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a2a:	4b0a      	ldr	r3, [pc, #40]	; (8000a54 <HAL_MspInit+0x6c>)
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	4a04      	ldr	r2, [pc, #16]	; (8000a54 <HAL_MspInit+0x6c>)
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a46:	bf00      	nop
 8000a48:	3710      	adds	r7, #16
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40021000 	.word	0x40021000
 8000a54:	40010000 	.word	0x40010000

08000a58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08e      	sub	sp, #56	; 0x38
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a60:	2300      	movs	r3, #0
 8000a62:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000a6e:	4b34      	ldr	r3, [pc, #208]	; (8000b40 <HAL_InitTick+0xe8>)
 8000a70:	69db      	ldr	r3, [r3, #28]
 8000a72:	4a33      	ldr	r2, [pc, #204]	; (8000b40 <HAL_InitTick+0xe8>)
 8000a74:	f043 0301 	orr.w	r3, r3, #1
 8000a78:	61d3      	str	r3, [r2, #28]
 8000a7a:	4b31      	ldr	r3, [pc, #196]	; (8000b40 <HAL_InitTick+0xe8>)
 8000a7c:	69db      	ldr	r3, [r3, #28]
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a86:	f107 0210 	add.w	r2, r7, #16
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4611      	mov	r1, r2
 8000a90:	4618      	mov	r0, r3
 8000a92:	f000 ff6f 	bl	8001974 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a96:	6a3b      	ldr	r3, [r7, #32]
 8000a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d103      	bne.n	8000aa8 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000aa0:	f000 ff54 	bl	800194c <HAL_RCC_GetPCLK1Freq>
 8000aa4:	6378      	str	r0, [r7, #52]	; 0x34
 8000aa6:	e004      	b.n	8000ab2 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000aa8:	f000 ff50 	bl	800194c <HAL_RCC_GetPCLK1Freq>
 8000aac:	4603      	mov	r3, r0
 8000aae:	005b      	lsls	r3, r3, #1
 8000ab0:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ab4:	4a23      	ldr	r2, [pc, #140]	; (8000b44 <HAL_InitTick+0xec>)
 8000ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8000aba:	0c9b      	lsrs	r3, r3, #18
 8000abc:	3b01      	subs	r3, #1
 8000abe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000ac0:	4b21      	ldr	r3, [pc, #132]	; (8000b48 <HAL_InitTick+0xf0>)
 8000ac2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ac6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000ac8:	4b1f      	ldr	r3, [pc, #124]	; (8000b48 <HAL_InitTick+0xf0>)
 8000aca:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ace:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000ad0:	4a1d      	ldr	r2, [pc, #116]	; (8000b48 <HAL_InitTick+0xf0>)
 8000ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ad4:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000ad6:	4b1c      	ldr	r3, [pc, #112]	; (8000b48 <HAL_InitTick+0xf0>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000adc:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <HAL_InitTick+0xf0>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae2:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <HAL_InitTick+0xf0>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000ae8:	4817      	ldr	r0, [pc, #92]	; (8000b48 <HAL_InitTick+0xf0>)
 8000aea:	f000 ff91 	bl	8001a10 <HAL_TIM_Base_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000af4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d11b      	bne.n	8000b34 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000afc:	4812      	ldr	r0, [pc, #72]	; (8000b48 <HAL_InitTick+0xf0>)
 8000afe:	f000 ffdf 	bl	8001ac0 <HAL_TIM_Base_Start_IT>
 8000b02:	4603      	mov	r3, r0
 8000b04:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b08:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d111      	bne.n	8000b34 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b10:	201c      	movs	r0, #28
 8000b12:	f000 f96c 	bl	8000dee <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2b0f      	cmp	r3, #15
 8000b1a:	d808      	bhi.n	8000b2e <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	6879      	ldr	r1, [r7, #4]
 8000b20:	201c      	movs	r0, #28
 8000b22:	f000 f948 	bl	8000db6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b26:	4a09      	ldr	r2, [pc, #36]	; (8000b4c <HAL_InitTick+0xf4>)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6013      	str	r3, [r2, #0]
 8000b2c:	e002      	b.n	8000b34 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b34:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3738      	adds	r7, #56	; 0x38
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40021000 	.word	0x40021000
 8000b44:	431bde83 	.word	0x431bde83
 8000b48:	20000038 	.word	0x20000038
 8000b4c:	20000004 	.word	0x20000004

08000b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <NMI_Handler+0x4>

08000b56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <HardFault_Handler+0x4>

08000b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <MemManage_Handler+0x4>

08000b62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b66:	e7fe      	b.n	8000b66 <BusFault_Handler+0x4>

08000b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <UsageFault_Handler+0x4>

08000b6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bc80      	pop	{r7}
 8000b78:	4770      	bx	lr
	...

08000b7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b80:	4802      	ldr	r0, [pc, #8]	; (8000b8c <TIM2_IRQHandler+0x10>)
 8000b82:	f000 ffef 	bl	8001b64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000038 	.word	0x20000038

08000b90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr

08000b9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b9c:	480c      	ldr	r0, [pc, #48]	; (8000bd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b9e:	490d      	ldr	r1, [pc, #52]	; (8000bd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ba0:	4a0d      	ldr	r2, [pc, #52]	; (8000bd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba4:	e002      	b.n	8000bac <LoopCopyDataInit>

08000ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000baa:	3304      	adds	r3, #4

08000bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb0:	d3f9      	bcc.n	8000ba6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bb2:	4a0a      	ldr	r2, [pc, #40]	; (8000bdc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bb4:	4c0a      	ldr	r4, [pc, #40]	; (8000be0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb8:	e001      	b.n	8000bbe <LoopFillZerobss>

08000bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bbc:	3204      	adds	r2, #4

08000bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc0:	d3fb      	bcc.n	8000bba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bc2:	f7ff ffe5 	bl	8000b90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bc6:	f003 fe41 	bl	800484c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bca:	f7ff fd3f 	bl	800064c <main>
  bx lr
 8000bce:	4770      	bx	lr
  ldr r0, =_sdata
 8000bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000bd8:	080049a8 	.word	0x080049a8
  ldr r2, =_sbss
 8000bdc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000be0:	200019cc 	.word	0x200019cc

08000be4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000be4:	e7fe      	b.n	8000be4 <ADC1_2_IRQHandler>
	...

08000be8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bec:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <HAL_Init+0x28>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a07      	ldr	r2, [pc, #28]	; (8000c10 <HAL_Init+0x28>)
 8000bf2:	f043 0310 	orr.w	r3, r3, #16
 8000bf6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf8:	2003      	movs	r0, #3
 8000bfa:	f000 f8d1 	bl	8000da0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bfe:	200f      	movs	r0, #15
 8000c00:	f7ff ff2a 	bl	8000a58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c04:	f7ff fef0 	bl	80009e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c08:	2300      	movs	r3, #0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40022000 	.word	0x40022000

08000c14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c18:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <HAL_IncTick+0x1c>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <HAL_IncTick+0x20>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4413      	add	r3, r2
 8000c24:	4a03      	ldr	r2, [pc, #12]	; (8000c34 <HAL_IncTick+0x20>)
 8000c26:	6013      	str	r3, [r2, #0]
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr
 8000c30:	20000008 	.word	0x20000008
 8000c34:	20000080 	.word	0x20000080

08000c38 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c3c:	4b02      	ldr	r3, [pc, #8]	; (8000c48 <HAL_GetTick+0x10>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr
 8000c48:	20000080 	.word	0x20000080

08000c4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f003 0307 	and.w	r3, r3, #7
 8000c5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <__NVIC_SetPriorityGrouping+0x44>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c62:	68ba      	ldr	r2, [r7, #8]
 8000c64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c68:	4013      	ands	r3, r2
 8000c6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c7e:	4a04      	ldr	r2, [pc, #16]	; (8000c90 <__NVIC_SetPriorityGrouping+0x44>)
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	60d3      	str	r3, [r2, #12]
}
 8000c84:	bf00      	nop
 8000c86:	3714      	adds	r7, #20
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bc80      	pop	{r7}
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c98:	4b04      	ldr	r3, [pc, #16]	; (8000cac <__NVIC_GetPriorityGrouping+0x18>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	0a1b      	lsrs	r3, r3, #8
 8000c9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bc80      	pop	{r7}
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	db0b      	blt.n	8000cda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	f003 021f 	and.w	r2, r3, #31
 8000cc8:	4906      	ldr	r1, [pc, #24]	; (8000ce4 <__NVIC_EnableIRQ+0x34>)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	095b      	lsrs	r3, r3, #5
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cda:	bf00      	nop
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr
 8000ce4:	e000e100 	.word	0xe000e100

08000ce8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	6039      	str	r1, [r7, #0]
 8000cf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	db0a      	blt.n	8000d12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	b2da      	uxtb	r2, r3
 8000d00:	490c      	ldr	r1, [pc, #48]	; (8000d34 <__NVIC_SetPriority+0x4c>)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	0112      	lsls	r2, r2, #4
 8000d08:	b2d2      	uxtb	r2, r2
 8000d0a:	440b      	add	r3, r1
 8000d0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d10:	e00a      	b.n	8000d28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	b2da      	uxtb	r2, r3
 8000d16:	4908      	ldr	r1, [pc, #32]	; (8000d38 <__NVIC_SetPriority+0x50>)
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	f003 030f 	and.w	r3, r3, #15
 8000d1e:	3b04      	subs	r3, #4
 8000d20:	0112      	lsls	r2, r2, #4
 8000d22:	b2d2      	uxtb	r2, r2
 8000d24:	440b      	add	r3, r1
 8000d26:	761a      	strb	r2, [r3, #24]
}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bc80      	pop	{r7}
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	e000e100 	.word	0xe000e100
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b089      	sub	sp, #36	; 0x24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	f003 0307 	and.w	r3, r3, #7
 8000d4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	f1c3 0307 	rsb	r3, r3, #7
 8000d56:	2b04      	cmp	r3, #4
 8000d58:	bf28      	it	cs
 8000d5a:	2304      	movcs	r3, #4
 8000d5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	3304      	adds	r3, #4
 8000d62:	2b06      	cmp	r3, #6
 8000d64:	d902      	bls.n	8000d6c <NVIC_EncodePriority+0x30>
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	3b03      	subs	r3, #3
 8000d6a:	e000      	b.n	8000d6e <NVIC_EncodePriority+0x32>
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	43da      	mvns	r2, r3
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	401a      	ands	r2, r3
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8e:	43d9      	mvns	r1, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d94:	4313      	orrs	r3, r2
         );
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3724      	adds	r7, #36	; 0x24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr

08000da0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f7ff ff4f 	bl	8000c4c <__NVIC_SetPriorityGrouping>
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b086      	sub	sp, #24
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	60b9      	str	r1, [r7, #8]
 8000dc0:	607a      	str	r2, [r7, #4]
 8000dc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dc8:	f7ff ff64 	bl	8000c94 <__NVIC_GetPriorityGrouping>
 8000dcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	68b9      	ldr	r1, [r7, #8]
 8000dd2:	6978      	ldr	r0, [r7, #20]
 8000dd4:	f7ff ffb2 	bl	8000d3c <NVIC_EncodePriority>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dde:	4611      	mov	r1, r2
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ff81 	bl	8000ce8 <__NVIC_SetPriority>
}
 8000de6:	bf00      	nop
 8000de8:	3718      	adds	r7, #24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	4603      	mov	r3, r0
 8000df6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff ff57 	bl	8000cb0 <__NVIC_EnableIRQ>
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b08b      	sub	sp, #44	; 0x2c
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e16:	2300      	movs	r3, #0
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e1e:	e169      	b.n	80010f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e20:	2201      	movs	r2, #1
 8000e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	69fa      	ldr	r2, [r7, #28]
 8000e30:	4013      	ands	r3, r2
 8000e32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	f040 8158 	bne.w	80010ee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	4a9a      	ldr	r2, [pc, #616]	; (80010ac <HAL_GPIO_Init+0x2a0>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d05e      	beq.n	8000f06 <HAL_GPIO_Init+0xfa>
 8000e48:	4a98      	ldr	r2, [pc, #608]	; (80010ac <HAL_GPIO_Init+0x2a0>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d875      	bhi.n	8000f3a <HAL_GPIO_Init+0x12e>
 8000e4e:	4a98      	ldr	r2, [pc, #608]	; (80010b0 <HAL_GPIO_Init+0x2a4>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d058      	beq.n	8000f06 <HAL_GPIO_Init+0xfa>
 8000e54:	4a96      	ldr	r2, [pc, #600]	; (80010b0 <HAL_GPIO_Init+0x2a4>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d86f      	bhi.n	8000f3a <HAL_GPIO_Init+0x12e>
 8000e5a:	4a96      	ldr	r2, [pc, #600]	; (80010b4 <HAL_GPIO_Init+0x2a8>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d052      	beq.n	8000f06 <HAL_GPIO_Init+0xfa>
 8000e60:	4a94      	ldr	r2, [pc, #592]	; (80010b4 <HAL_GPIO_Init+0x2a8>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d869      	bhi.n	8000f3a <HAL_GPIO_Init+0x12e>
 8000e66:	4a94      	ldr	r2, [pc, #592]	; (80010b8 <HAL_GPIO_Init+0x2ac>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d04c      	beq.n	8000f06 <HAL_GPIO_Init+0xfa>
 8000e6c:	4a92      	ldr	r2, [pc, #584]	; (80010b8 <HAL_GPIO_Init+0x2ac>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d863      	bhi.n	8000f3a <HAL_GPIO_Init+0x12e>
 8000e72:	4a92      	ldr	r2, [pc, #584]	; (80010bc <HAL_GPIO_Init+0x2b0>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d046      	beq.n	8000f06 <HAL_GPIO_Init+0xfa>
 8000e78:	4a90      	ldr	r2, [pc, #576]	; (80010bc <HAL_GPIO_Init+0x2b0>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d85d      	bhi.n	8000f3a <HAL_GPIO_Init+0x12e>
 8000e7e:	2b12      	cmp	r3, #18
 8000e80:	d82a      	bhi.n	8000ed8 <HAL_GPIO_Init+0xcc>
 8000e82:	2b12      	cmp	r3, #18
 8000e84:	d859      	bhi.n	8000f3a <HAL_GPIO_Init+0x12e>
 8000e86:	a201      	add	r2, pc, #4	; (adr r2, 8000e8c <HAL_GPIO_Init+0x80>)
 8000e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e8c:	08000f07 	.word	0x08000f07
 8000e90:	08000ee1 	.word	0x08000ee1
 8000e94:	08000ef3 	.word	0x08000ef3
 8000e98:	08000f35 	.word	0x08000f35
 8000e9c:	08000f3b 	.word	0x08000f3b
 8000ea0:	08000f3b 	.word	0x08000f3b
 8000ea4:	08000f3b 	.word	0x08000f3b
 8000ea8:	08000f3b 	.word	0x08000f3b
 8000eac:	08000f3b 	.word	0x08000f3b
 8000eb0:	08000f3b 	.word	0x08000f3b
 8000eb4:	08000f3b 	.word	0x08000f3b
 8000eb8:	08000f3b 	.word	0x08000f3b
 8000ebc:	08000f3b 	.word	0x08000f3b
 8000ec0:	08000f3b 	.word	0x08000f3b
 8000ec4:	08000f3b 	.word	0x08000f3b
 8000ec8:	08000f3b 	.word	0x08000f3b
 8000ecc:	08000f3b 	.word	0x08000f3b
 8000ed0:	08000ee9 	.word	0x08000ee9
 8000ed4:	08000efd 	.word	0x08000efd
 8000ed8:	4a79      	ldr	r2, [pc, #484]	; (80010c0 <HAL_GPIO_Init+0x2b4>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d013      	beq.n	8000f06 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ede:	e02c      	b.n	8000f3a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	623b      	str	r3, [r7, #32]
          break;
 8000ee6:	e029      	b.n	8000f3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	3304      	adds	r3, #4
 8000eee:	623b      	str	r3, [r7, #32]
          break;
 8000ef0:	e024      	b.n	8000f3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	68db      	ldr	r3, [r3, #12]
 8000ef6:	3308      	adds	r3, #8
 8000ef8:	623b      	str	r3, [r7, #32]
          break;
 8000efa:	e01f      	b.n	8000f3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	330c      	adds	r3, #12
 8000f02:	623b      	str	r3, [r7, #32]
          break;
 8000f04:	e01a      	b.n	8000f3c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d102      	bne.n	8000f14 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f0e:	2304      	movs	r3, #4
 8000f10:	623b      	str	r3, [r7, #32]
          break;
 8000f12:	e013      	b.n	8000f3c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d105      	bne.n	8000f28 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f1c:	2308      	movs	r3, #8
 8000f1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	69fa      	ldr	r2, [r7, #28]
 8000f24:	611a      	str	r2, [r3, #16]
          break;
 8000f26:	e009      	b.n	8000f3c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f28:	2308      	movs	r3, #8
 8000f2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	69fa      	ldr	r2, [r7, #28]
 8000f30:	615a      	str	r2, [r3, #20]
          break;
 8000f32:	e003      	b.n	8000f3c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f34:	2300      	movs	r3, #0
 8000f36:	623b      	str	r3, [r7, #32]
          break;
 8000f38:	e000      	b.n	8000f3c <HAL_GPIO_Init+0x130>
          break;
 8000f3a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	2bff      	cmp	r3, #255	; 0xff
 8000f40:	d801      	bhi.n	8000f46 <HAL_GPIO_Init+0x13a>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	e001      	b.n	8000f4a <HAL_GPIO_Init+0x13e>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	3304      	adds	r3, #4
 8000f4a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	2bff      	cmp	r3, #255	; 0xff
 8000f50:	d802      	bhi.n	8000f58 <HAL_GPIO_Init+0x14c>
 8000f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	e002      	b.n	8000f5e <HAL_GPIO_Init+0x152>
 8000f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5a:	3b08      	subs	r3, #8
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	210f      	movs	r1, #15
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	401a      	ands	r2, r3
 8000f70:	6a39      	ldr	r1, [r7, #32]
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	fa01 f303 	lsl.w	r3, r1, r3
 8000f78:	431a      	orrs	r2, r3
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	f000 80b1 	beq.w	80010ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f8c:	4b4d      	ldr	r3, [pc, #308]	; (80010c4 <HAL_GPIO_Init+0x2b8>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	4a4c      	ldr	r2, [pc, #304]	; (80010c4 <HAL_GPIO_Init+0x2b8>)
 8000f92:	f043 0301 	orr.w	r3, r3, #1
 8000f96:	6193      	str	r3, [r2, #24]
 8000f98:	4b4a      	ldr	r3, [pc, #296]	; (80010c4 <HAL_GPIO_Init+0x2b8>)
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fa4:	4a48      	ldr	r2, [pc, #288]	; (80010c8 <HAL_GPIO_Init+0x2bc>)
 8000fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa8:	089b      	lsrs	r3, r3, #2
 8000faa:	3302      	adds	r3, #2
 8000fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb4:	f003 0303 	and.w	r3, r3, #3
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	220f      	movs	r2, #15
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4a40      	ldr	r2, [pc, #256]	; (80010cc <HAL_GPIO_Init+0x2c0>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d013      	beq.n	8000ff8 <HAL_GPIO_Init+0x1ec>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4a3f      	ldr	r2, [pc, #252]	; (80010d0 <HAL_GPIO_Init+0x2c4>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d00d      	beq.n	8000ff4 <HAL_GPIO_Init+0x1e8>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a3e      	ldr	r2, [pc, #248]	; (80010d4 <HAL_GPIO_Init+0x2c8>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d007      	beq.n	8000ff0 <HAL_GPIO_Init+0x1e4>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a3d      	ldr	r2, [pc, #244]	; (80010d8 <HAL_GPIO_Init+0x2cc>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d101      	bne.n	8000fec <HAL_GPIO_Init+0x1e0>
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e006      	b.n	8000ffa <HAL_GPIO_Init+0x1ee>
 8000fec:	2304      	movs	r3, #4
 8000fee:	e004      	b.n	8000ffa <HAL_GPIO_Init+0x1ee>
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	e002      	b.n	8000ffa <HAL_GPIO_Init+0x1ee>
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e000      	b.n	8000ffa <HAL_GPIO_Init+0x1ee>
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ffc:	f002 0203 	and.w	r2, r2, #3
 8001000:	0092      	lsls	r2, r2, #2
 8001002:	4093      	lsls	r3, r2
 8001004:	68fa      	ldr	r2, [r7, #12]
 8001006:	4313      	orrs	r3, r2
 8001008:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800100a:	492f      	ldr	r1, [pc, #188]	; (80010c8 <HAL_GPIO_Init+0x2bc>)
 800100c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100e:	089b      	lsrs	r3, r3, #2
 8001010:	3302      	adds	r3, #2
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d006      	beq.n	8001032 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001024:	4b2d      	ldr	r3, [pc, #180]	; (80010dc <HAL_GPIO_Init+0x2d0>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	492c      	ldr	r1, [pc, #176]	; (80010dc <HAL_GPIO_Init+0x2d0>)
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	4313      	orrs	r3, r2
 800102e:	600b      	str	r3, [r1, #0]
 8001030:	e006      	b.n	8001040 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001032:	4b2a      	ldr	r3, [pc, #168]	; (80010dc <HAL_GPIO_Init+0x2d0>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	43db      	mvns	r3, r3
 800103a:	4928      	ldr	r1, [pc, #160]	; (80010dc <HAL_GPIO_Init+0x2d0>)
 800103c:	4013      	ands	r3, r2
 800103e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d006      	beq.n	800105a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800104c:	4b23      	ldr	r3, [pc, #140]	; (80010dc <HAL_GPIO_Init+0x2d0>)
 800104e:	685a      	ldr	r2, [r3, #4]
 8001050:	4922      	ldr	r1, [pc, #136]	; (80010dc <HAL_GPIO_Init+0x2d0>)
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	4313      	orrs	r3, r2
 8001056:	604b      	str	r3, [r1, #4]
 8001058:	e006      	b.n	8001068 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800105a:	4b20      	ldr	r3, [pc, #128]	; (80010dc <HAL_GPIO_Init+0x2d0>)
 800105c:	685a      	ldr	r2, [r3, #4]
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	43db      	mvns	r3, r3
 8001062:	491e      	ldr	r1, [pc, #120]	; (80010dc <HAL_GPIO_Init+0x2d0>)
 8001064:	4013      	ands	r3, r2
 8001066:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d006      	beq.n	8001082 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001074:	4b19      	ldr	r3, [pc, #100]	; (80010dc <HAL_GPIO_Init+0x2d0>)
 8001076:	689a      	ldr	r2, [r3, #8]
 8001078:	4918      	ldr	r1, [pc, #96]	; (80010dc <HAL_GPIO_Init+0x2d0>)
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	4313      	orrs	r3, r2
 800107e:	608b      	str	r3, [r1, #8]
 8001080:	e006      	b.n	8001090 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001082:	4b16      	ldr	r3, [pc, #88]	; (80010dc <HAL_GPIO_Init+0x2d0>)
 8001084:	689a      	ldr	r2, [r3, #8]
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	43db      	mvns	r3, r3
 800108a:	4914      	ldr	r1, [pc, #80]	; (80010dc <HAL_GPIO_Init+0x2d0>)
 800108c:	4013      	ands	r3, r2
 800108e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d021      	beq.n	80010e0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800109c:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <HAL_GPIO_Init+0x2d0>)
 800109e:	68da      	ldr	r2, [r3, #12]
 80010a0:	490e      	ldr	r1, [pc, #56]	; (80010dc <HAL_GPIO_Init+0x2d0>)
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	60cb      	str	r3, [r1, #12]
 80010a8:	e021      	b.n	80010ee <HAL_GPIO_Init+0x2e2>
 80010aa:	bf00      	nop
 80010ac:	10320000 	.word	0x10320000
 80010b0:	10310000 	.word	0x10310000
 80010b4:	10220000 	.word	0x10220000
 80010b8:	10210000 	.word	0x10210000
 80010bc:	10120000 	.word	0x10120000
 80010c0:	10110000 	.word	0x10110000
 80010c4:	40021000 	.word	0x40021000
 80010c8:	40010000 	.word	0x40010000
 80010cc:	40010800 	.word	0x40010800
 80010d0:	40010c00 	.word	0x40010c00
 80010d4:	40011000 	.word	0x40011000
 80010d8:	40011400 	.word	0x40011400
 80010dc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010e0:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <HAL_GPIO_Init+0x304>)
 80010e2:	68da      	ldr	r2, [r3, #12]
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	43db      	mvns	r3, r3
 80010e8:	4909      	ldr	r1, [pc, #36]	; (8001110 <HAL_GPIO_Init+0x304>)
 80010ea:	4013      	ands	r3, r2
 80010ec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80010ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f0:	3301      	adds	r3, #1
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fa:	fa22 f303 	lsr.w	r3, r2, r3
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f47f ae8e 	bne.w	8000e20 <HAL_GPIO_Init+0x14>
  }
}
 8001104:	bf00      	nop
 8001106:	bf00      	nop
 8001108:	372c      	adds	r7, #44	; 0x2c
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr
 8001110:	40010400 	.word	0x40010400

08001114 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	460b      	mov	r3, r1
 800111e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	689a      	ldr	r2, [r3, #8]
 8001124:	887b      	ldrh	r3, [r7, #2]
 8001126:	4013      	ands	r3, r2
 8001128:	2b00      	cmp	r3, #0
 800112a:	d002      	beq.n	8001132 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800112c:	2301      	movs	r3, #1
 800112e:	73fb      	strb	r3, [r7, #15]
 8001130:	e001      	b.n	8001136 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001132:	2300      	movs	r3, #0
 8001134:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001136:	7bfb      	ldrb	r3, [r7, #15]
}
 8001138:	4618      	mov	r0, r3
 800113a:	3714      	adds	r7, #20
 800113c:	46bd      	mov	sp, r7
 800113e:	bc80      	pop	{r7}
 8001140:	4770      	bx	lr

08001142 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001142:	b480      	push	{r7}
 8001144:	b083      	sub	sp, #12
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
 800114a:	460b      	mov	r3, r1
 800114c:	807b      	strh	r3, [r7, #2]
 800114e:	4613      	mov	r3, r2
 8001150:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001152:	787b      	ldrb	r3, [r7, #1]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d003      	beq.n	8001160 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001158:	887a      	ldrh	r2, [r7, #2]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800115e:	e003      	b.n	8001168 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001160:	887b      	ldrh	r3, [r7, #2]
 8001162:	041a      	lsls	r2, r3, #16
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	611a      	str	r2, [r3, #16]
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	bc80      	pop	{r7}
 8001170:	4770      	bx	lr

08001172 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001172:	b480      	push	{r7}
 8001174:	b085      	sub	sp, #20
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
 800117a:	460b      	mov	r3, r1
 800117c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001184:	887a      	ldrh	r2, [r7, #2]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	4013      	ands	r3, r2
 800118a:	041a      	lsls	r2, r3, #16
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	43d9      	mvns	r1, r3
 8001190:	887b      	ldrh	r3, [r7, #2]
 8001192:	400b      	ands	r3, r1
 8001194:	431a      	orrs	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	611a      	str	r2, [r3, #16]
}
 800119a:	bf00      	nop
 800119c:	3714      	adds	r7, #20
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr

080011a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d101      	bne.n	80011b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e272      	b.n	800169c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f000 8087 	beq.w	80012d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011c4:	4b92      	ldr	r3, [pc, #584]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f003 030c 	and.w	r3, r3, #12
 80011cc:	2b04      	cmp	r3, #4
 80011ce:	d00c      	beq.n	80011ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011d0:	4b8f      	ldr	r3, [pc, #572]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f003 030c 	and.w	r3, r3, #12
 80011d8:	2b08      	cmp	r3, #8
 80011da:	d112      	bne.n	8001202 <HAL_RCC_OscConfig+0x5e>
 80011dc:	4b8c      	ldr	r3, [pc, #560]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011e8:	d10b      	bne.n	8001202 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ea:	4b89      	ldr	r3, [pc, #548]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d06c      	beq.n	80012d0 <HAL_RCC_OscConfig+0x12c>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d168      	bne.n	80012d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e24c      	b.n	800169c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800120a:	d106      	bne.n	800121a <HAL_RCC_OscConfig+0x76>
 800120c:	4b80      	ldr	r3, [pc, #512]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a7f      	ldr	r2, [pc, #508]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 8001212:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001216:	6013      	str	r3, [r2, #0]
 8001218:	e02e      	b.n	8001278 <HAL_RCC_OscConfig+0xd4>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d10c      	bne.n	800123c <HAL_RCC_OscConfig+0x98>
 8001222:	4b7b      	ldr	r3, [pc, #492]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a7a      	ldr	r2, [pc, #488]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 8001228:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	4b78      	ldr	r3, [pc, #480]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a77      	ldr	r2, [pc, #476]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 8001234:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001238:	6013      	str	r3, [r2, #0]
 800123a:	e01d      	b.n	8001278 <HAL_RCC_OscConfig+0xd4>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001244:	d10c      	bne.n	8001260 <HAL_RCC_OscConfig+0xbc>
 8001246:	4b72      	ldr	r3, [pc, #456]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a71      	ldr	r2, [pc, #452]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 800124c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001250:	6013      	str	r3, [r2, #0]
 8001252:	4b6f      	ldr	r3, [pc, #444]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a6e      	ldr	r2, [pc, #440]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 8001258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800125c:	6013      	str	r3, [r2, #0]
 800125e:	e00b      	b.n	8001278 <HAL_RCC_OscConfig+0xd4>
 8001260:	4b6b      	ldr	r3, [pc, #428]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a6a      	ldr	r2, [pc, #424]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 8001266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800126a:	6013      	str	r3, [r2, #0]
 800126c:	4b68      	ldr	r3, [pc, #416]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a67      	ldr	r2, [pc, #412]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 8001272:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001276:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d013      	beq.n	80012a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001280:	f7ff fcda 	bl	8000c38 <HAL_GetTick>
 8001284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001288:	f7ff fcd6 	bl	8000c38 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b64      	cmp	r3, #100	; 0x64
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e200      	b.n	800169c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800129a:	4b5d      	ldr	r3, [pc, #372]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d0f0      	beq.n	8001288 <HAL_RCC_OscConfig+0xe4>
 80012a6:	e014      	b.n	80012d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a8:	f7ff fcc6 	bl	8000c38 <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012b0:	f7ff fcc2 	bl	8000c38 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b64      	cmp	r3, #100	; 0x64
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e1ec      	b.n	800169c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012c2:	4b53      	ldr	r3, [pc, #332]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d1f0      	bne.n	80012b0 <HAL_RCC_OscConfig+0x10c>
 80012ce:	e000      	b.n	80012d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d063      	beq.n	80013a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012de:	4b4c      	ldr	r3, [pc, #304]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f003 030c 	and.w	r3, r3, #12
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d00b      	beq.n	8001302 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012ea:	4b49      	ldr	r3, [pc, #292]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f003 030c 	and.w	r3, r3, #12
 80012f2:	2b08      	cmp	r3, #8
 80012f4:	d11c      	bne.n	8001330 <HAL_RCC_OscConfig+0x18c>
 80012f6:	4b46      	ldr	r3, [pc, #280]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d116      	bne.n	8001330 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001302:	4b43      	ldr	r3, [pc, #268]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d005      	beq.n	800131a <HAL_RCC_OscConfig+0x176>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	691b      	ldr	r3, [r3, #16]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d001      	beq.n	800131a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e1c0      	b.n	800169c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800131a:	4b3d      	ldr	r3, [pc, #244]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	695b      	ldr	r3, [r3, #20]
 8001326:	00db      	lsls	r3, r3, #3
 8001328:	4939      	ldr	r1, [pc, #228]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 800132a:	4313      	orrs	r3, r2
 800132c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800132e:	e03a      	b.n	80013a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	691b      	ldr	r3, [r3, #16]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d020      	beq.n	800137a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001338:	4b36      	ldr	r3, [pc, #216]	; (8001414 <HAL_RCC_OscConfig+0x270>)
 800133a:	2201      	movs	r2, #1
 800133c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133e:	f7ff fc7b 	bl	8000c38 <HAL_GetTick>
 8001342:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001344:	e008      	b.n	8001358 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001346:	f7ff fc77 	bl	8000c38 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d901      	bls.n	8001358 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e1a1      	b.n	800169c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001358:	4b2d      	ldr	r3, [pc, #180]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0302 	and.w	r3, r3, #2
 8001360:	2b00      	cmp	r3, #0
 8001362:	d0f0      	beq.n	8001346 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001364:	4b2a      	ldr	r3, [pc, #168]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	695b      	ldr	r3, [r3, #20]
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	4927      	ldr	r1, [pc, #156]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 8001374:	4313      	orrs	r3, r2
 8001376:	600b      	str	r3, [r1, #0]
 8001378:	e015      	b.n	80013a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800137a:	4b26      	ldr	r3, [pc, #152]	; (8001414 <HAL_RCC_OscConfig+0x270>)
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001380:	f7ff fc5a 	bl	8000c38 <HAL_GetTick>
 8001384:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001388:	f7ff fc56 	bl	8000c38 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b02      	cmp	r3, #2
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e180      	b.n	800169c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800139a:	4b1d      	ldr	r3, [pc, #116]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1f0      	bne.n	8001388 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0308 	and.w	r3, r3, #8
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d03a      	beq.n	8001428 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d019      	beq.n	80013ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013ba:	4b17      	ldr	r3, [pc, #92]	; (8001418 <HAL_RCC_OscConfig+0x274>)
 80013bc:	2201      	movs	r2, #1
 80013be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c0:	f7ff fc3a 	bl	8000c38 <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013c8:	f7ff fc36 	bl	8000c38 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e160      	b.n	800169c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013da:	4b0d      	ldr	r3, [pc, #52]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 80013dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d0f0      	beq.n	80013c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013e6:	2001      	movs	r0, #1
 80013e8:	f000 faf4 	bl	80019d4 <RCC_Delay>
 80013ec:	e01c      	b.n	8001428 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013ee:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <HAL_RCC_OscConfig+0x274>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f4:	f7ff fc20 	bl	8000c38 <HAL_GetTick>
 80013f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013fa:	e00f      	b.n	800141c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013fc:	f7ff fc1c 	bl	8000c38 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b02      	cmp	r3, #2
 8001408:	d908      	bls.n	800141c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e146      	b.n	800169c <HAL_RCC_OscConfig+0x4f8>
 800140e:	bf00      	nop
 8001410:	40021000 	.word	0x40021000
 8001414:	42420000 	.word	0x42420000
 8001418:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800141c:	4b92      	ldr	r3, [pc, #584]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 800141e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1e9      	bne.n	80013fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0304 	and.w	r3, r3, #4
 8001430:	2b00      	cmp	r3, #0
 8001432:	f000 80a6 	beq.w	8001582 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001436:	2300      	movs	r3, #0
 8001438:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800143a:	4b8b      	ldr	r3, [pc, #556]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10d      	bne.n	8001462 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001446:	4b88      	ldr	r3, [pc, #544]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 8001448:	69db      	ldr	r3, [r3, #28]
 800144a:	4a87      	ldr	r2, [pc, #540]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 800144c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001450:	61d3      	str	r3, [r2, #28]
 8001452:	4b85      	ldr	r3, [pc, #532]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800145e:	2301      	movs	r3, #1
 8001460:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001462:	4b82      	ldr	r3, [pc, #520]	; (800166c <HAL_RCC_OscConfig+0x4c8>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800146a:	2b00      	cmp	r3, #0
 800146c:	d118      	bne.n	80014a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800146e:	4b7f      	ldr	r3, [pc, #508]	; (800166c <HAL_RCC_OscConfig+0x4c8>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a7e      	ldr	r2, [pc, #504]	; (800166c <HAL_RCC_OscConfig+0x4c8>)
 8001474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001478:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800147a:	f7ff fbdd 	bl	8000c38 <HAL_GetTick>
 800147e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001480:	e008      	b.n	8001494 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001482:	f7ff fbd9 	bl	8000c38 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b64      	cmp	r3, #100	; 0x64
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e103      	b.n	800169c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001494:	4b75      	ldr	r3, [pc, #468]	; (800166c <HAL_RCC_OscConfig+0x4c8>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800149c:	2b00      	cmp	r3, #0
 800149e:	d0f0      	beq.n	8001482 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d106      	bne.n	80014b6 <HAL_RCC_OscConfig+0x312>
 80014a8:	4b6f      	ldr	r3, [pc, #444]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 80014aa:	6a1b      	ldr	r3, [r3, #32]
 80014ac:	4a6e      	ldr	r2, [pc, #440]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	6213      	str	r3, [r2, #32]
 80014b4:	e02d      	b.n	8001512 <HAL_RCC_OscConfig+0x36e>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d10c      	bne.n	80014d8 <HAL_RCC_OscConfig+0x334>
 80014be:	4b6a      	ldr	r3, [pc, #424]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 80014c0:	6a1b      	ldr	r3, [r3, #32]
 80014c2:	4a69      	ldr	r2, [pc, #420]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 80014c4:	f023 0301 	bic.w	r3, r3, #1
 80014c8:	6213      	str	r3, [r2, #32]
 80014ca:	4b67      	ldr	r3, [pc, #412]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 80014cc:	6a1b      	ldr	r3, [r3, #32]
 80014ce:	4a66      	ldr	r2, [pc, #408]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 80014d0:	f023 0304 	bic.w	r3, r3, #4
 80014d4:	6213      	str	r3, [r2, #32]
 80014d6:	e01c      	b.n	8001512 <HAL_RCC_OscConfig+0x36e>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	2b05      	cmp	r3, #5
 80014de:	d10c      	bne.n	80014fa <HAL_RCC_OscConfig+0x356>
 80014e0:	4b61      	ldr	r3, [pc, #388]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 80014e2:	6a1b      	ldr	r3, [r3, #32]
 80014e4:	4a60      	ldr	r2, [pc, #384]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 80014e6:	f043 0304 	orr.w	r3, r3, #4
 80014ea:	6213      	str	r3, [r2, #32]
 80014ec:	4b5e      	ldr	r3, [pc, #376]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 80014ee:	6a1b      	ldr	r3, [r3, #32]
 80014f0:	4a5d      	ldr	r2, [pc, #372]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	6213      	str	r3, [r2, #32]
 80014f8:	e00b      	b.n	8001512 <HAL_RCC_OscConfig+0x36e>
 80014fa:	4b5b      	ldr	r3, [pc, #364]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 80014fc:	6a1b      	ldr	r3, [r3, #32]
 80014fe:	4a5a      	ldr	r2, [pc, #360]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 8001500:	f023 0301 	bic.w	r3, r3, #1
 8001504:	6213      	str	r3, [r2, #32]
 8001506:	4b58      	ldr	r3, [pc, #352]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 8001508:	6a1b      	ldr	r3, [r3, #32]
 800150a:	4a57      	ldr	r2, [pc, #348]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 800150c:	f023 0304 	bic.w	r3, r3, #4
 8001510:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d015      	beq.n	8001546 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800151a:	f7ff fb8d 	bl	8000c38 <HAL_GetTick>
 800151e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001520:	e00a      	b.n	8001538 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001522:	f7ff fb89 	bl	8000c38 <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001530:	4293      	cmp	r3, r2
 8001532:	d901      	bls.n	8001538 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e0b1      	b.n	800169c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001538:	4b4b      	ldr	r3, [pc, #300]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 800153a:	6a1b      	ldr	r3, [r3, #32]
 800153c:	f003 0302 	and.w	r3, r3, #2
 8001540:	2b00      	cmp	r3, #0
 8001542:	d0ee      	beq.n	8001522 <HAL_RCC_OscConfig+0x37e>
 8001544:	e014      	b.n	8001570 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001546:	f7ff fb77 	bl	8000c38 <HAL_GetTick>
 800154a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800154c:	e00a      	b.n	8001564 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800154e:	f7ff fb73 	bl	8000c38 <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	f241 3288 	movw	r2, #5000	; 0x1388
 800155c:	4293      	cmp	r3, r2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e09b      	b.n	800169c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001564:	4b40      	ldr	r3, [pc, #256]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 8001566:	6a1b      	ldr	r3, [r3, #32]
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	2b00      	cmp	r3, #0
 800156e:	d1ee      	bne.n	800154e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001570:	7dfb      	ldrb	r3, [r7, #23]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d105      	bne.n	8001582 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001576:	4b3c      	ldr	r3, [pc, #240]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	4a3b      	ldr	r2, [pc, #236]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 800157c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001580:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	2b00      	cmp	r3, #0
 8001588:	f000 8087 	beq.w	800169a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800158c:	4b36      	ldr	r3, [pc, #216]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f003 030c 	and.w	r3, r3, #12
 8001594:	2b08      	cmp	r3, #8
 8001596:	d061      	beq.n	800165c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	69db      	ldr	r3, [r3, #28]
 800159c:	2b02      	cmp	r3, #2
 800159e:	d146      	bne.n	800162e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015a0:	4b33      	ldr	r3, [pc, #204]	; (8001670 <HAL_RCC_OscConfig+0x4cc>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a6:	f7ff fb47 	bl	8000c38 <HAL_GetTick>
 80015aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ac:	e008      	b.n	80015c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ae:	f7ff fb43 	bl	8000c38 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e06d      	b.n	800169c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015c0:	4b29      	ldr	r3, [pc, #164]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d1f0      	bne.n	80015ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a1b      	ldr	r3, [r3, #32]
 80015d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015d4:	d108      	bne.n	80015e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015d6:	4b24      	ldr	r3, [pc, #144]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	4921      	ldr	r1, [pc, #132]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 80015e4:	4313      	orrs	r3, r2
 80015e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015e8:	4b1f      	ldr	r3, [pc, #124]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a19      	ldr	r1, [r3, #32]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f8:	430b      	orrs	r3, r1
 80015fa:	491b      	ldr	r1, [pc, #108]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 80015fc:	4313      	orrs	r3, r2
 80015fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001600:	4b1b      	ldr	r3, [pc, #108]	; (8001670 <HAL_RCC_OscConfig+0x4cc>)
 8001602:	2201      	movs	r2, #1
 8001604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001606:	f7ff fb17 	bl	8000c38 <HAL_GetTick>
 800160a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800160c:	e008      	b.n	8001620 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800160e:	f7ff fb13 	bl	8000c38 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e03d      	b.n	800169c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001620:	4b11      	ldr	r3, [pc, #68]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d0f0      	beq.n	800160e <HAL_RCC_OscConfig+0x46a>
 800162c:	e035      	b.n	800169a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800162e:	4b10      	ldr	r3, [pc, #64]	; (8001670 <HAL_RCC_OscConfig+0x4cc>)
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001634:	f7ff fb00 	bl	8000c38 <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800163c:	f7ff fafc 	bl	8000c38 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e026      	b.n	800169c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800164e:	4b06      	ldr	r3, [pc, #24]	; (8001668 <HAL_RCC_OscConfig+0x4c4>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1f0      	bne.n	800163c <HAL_RCC_OscConfig+0x498>
 800165a:	e01e      	b.n	800169a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	69db      	ldr	r3, [r3, #28]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d107      	bne.n	8001674 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e019      	b.n	800169c <HAL_RCC_OscConfig+0x4f8>
 8001668:	40021000 	.word	0x40021000
 800166c:	40007000 	.word	0x40007000
 8001670:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001674:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <HAL_RCC_OscConfig+0x500>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a1b      	ldr	r3, [r3, #32]
 8001684:	429a      	cmp	r2, r3
 8001686:	d106      	bne.n	8001696 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001692:	429a      	cmp	r2, r3
 8001694:	d001      	beq.n	800169a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e000      	b.n	800169c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800169a:	2300      	movs	r3, #0
}
 800169c:	4618      	mov	r0, r3
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40021000 	.word	0x40021000

080016a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d101      	bne.n	80016bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e0d0      	b.n	800185e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016bc:	4b6a      	ldr	r3, [pc, #424]	; (8001868 <HAL_RCC_ClockConfig+0x1c0>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0307 	and.w	r3, r3, #7
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d910      	bls.n	80016ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ca:	4b67      	ldr	r3, [pc, #412]	; (8001868 <HAL_RCC_ClockConfig+0x1c0>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f023 0207 	bic.w	r2, r3, #7
 80016d2:	4965      	ldr	r1, [pc, #404]	; (8001868 <HAL_RCC_ClockConfig+0x1c0>)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016da:	4b63      	ldr	r3, [pc, #396]	; (8001868 <HAL_RCC_ClockConfig+0x1c0>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	683a      	ldr	r2, [r7, #0]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d001      	beq.n	80016ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e0b8      	b.n	800185e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d020      	beq.n	800173a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	2b00      	cmp	r3, #0
 8001702:	d005      	beq.n	8001710 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001704:	4b59      	ldr	r3, [pc, #356]	; (800186c <HAL_RCC_ClockConfig+0x1c4>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	4a58      	ldr	r2, [pc, #352]	; (800186c <HAL_RCC_ClockConfig+0x1c4>)
 800170a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800170e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0308 	and.w	r3, r3, #8
 8001718:	2b00      	cmp	r3, #0
 800171a:	d005      	beq.n	8001728 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800171c:	4b53      	ldr	r3, [pc, #332]	; (800186c <HAL_RCC_ClockConfig+0x1c4>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	4a52      	ldr	r2, [pc, #328]	; (800186c <HAL_RCC_ClockConfig+0x1c4>)
 8001722:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001726:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001728:	4b50      	ldr	r3, [pc, #320]	; (800186c <HAL_RCC_ClockConfig+0x1c4>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	494d      	ldr	r1, [pc, #308]	; (800186c <HAL_RCC_ClockConfig+0x1c4>)
 8001736:	4313      	orrs	r3, r2
 8001738:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	2b00      	cmp	r3, #0
 8001744:	d040      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d107      	bne.n	800175e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800174e:	4b47      	ldr	r3, [pc, #284]	; (800186c <HAL_RCC_ClockConfig+0x1c4>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d115      	bne.n	8001786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e07f      	b.n	800185e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	2b02      	cmp	r3, #2
 8001764:	d107      	bne.n	8001776 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001766:	4b41      	ldr	r3, [pc, #260]	; (800186c <HAL_RCC_ClockConfig+0x1c4>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d109      	bne.n	8001786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e073      	b.n	800185e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001776:	4b3d      	ldr	r3, [pc, #244]	; (800186c <HAL_RCC_ClockConfig+0x1c4>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e06b      	b.n	800185e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001786:	4b39      	ldr	r3, [pc, #228]	; (800186c <HAL_RCC_ClockConfig+0x1c4>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f023 0203 	bic.w	r2, r3, #3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	4936      	ldr	r1, [pc, #216]	; (800186c <HAL_RCC_ClockConfig+0x1c4>)
 8001794:	4313      	orrs	r3, r2
 8001796:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001798:	f7ff fa4e 	bl	8000c38 <HAL_GetTick>
 800179c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800179e:	e00a      	b.n	80017b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017a0:	f7ff fa4a 	bl	8000c38 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e053      	b.n	800185e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b6:	4b2d      	ldr	r3, [pc, #180]	; (800186c <HAL_RCC_ClockConfig+0x1c4>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f003 020c 	and.w	r2, r3, #12
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d1eb      	bne.n	80017a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017c8:	4b27      	ldr	r3, [pc, #156]	; (8001868 <HAL_RCC_ClockConfig+0x1c0>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0307 	and.w	r3, r3, #7
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d210      	bcs.n	80017f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d6:	4b24      	ldr	r3, [pc, #144]	; (8001868 <HAL_RCC_ClockConfig+0x1c0>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f023 0207 	bic.w	r2, r3, #7
 80017de:	4922      	ldr	r1, [pc, #136]	; (8001868 <HAL_RCC_ClockConfig+0x1c0>)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017e6:	4b20      	ldr	r3, [pc, #128]	; (8001868 <HAL_RCC_ClockConfig+0x1c0>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	683a      	ldr	r2, [r7, #0]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d001      	beq.n	80017f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e032      	b.n	800185e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	2b00      	cmp	r3, #0
 8001802:	d008      	beq.n	8001816 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001804:	4b19      	ldr	r3, [pc, #100]	; (800186c <HAL_RCC_ClockConfig+0x1c4>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	4916      	ldr	r1, [pc, #88]	; (800186c <HAL_RCC_ClockConfig+0x1c4>)
 8001812:	4313      	orrs	r3, r2
 8001814:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0308 	and.w	r3, r3, #8
 800181e:	2b00      	cmp	r3, #0
 8001820:	d009      	beq.n	8001836 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001822:	4b12      	ldr	r3, [pc, #72]	; (800186c <HAL_RCC_ClockConfig+0x1c4>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	490e      	ldr	r1, [pc, #56]	; (800186c <HAL_RCC_ClockConfig+0x1c4>)
 8001832:	4313      	orrs	r3, r2
 8001834:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001836:	f000 f821 	bl	800187c <HAL_RCC_GetSysClockFreq>
 800183a:	4602      	mov	r2, r0
 800183c:	4b0b      	ldr	r3, [pc, #44]	; (800186c <HAL_RCC_ClockConfig+0x1c4>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	091b      	lsrs	r3, r3, #4
 8001842:	f003 030f 	and.w	r3, r3, #15
 8001846:	490a      	ldr	r1, [pc, #40]	; (8001870 <HAL_RCC_ClockConfig+0x1c8>)
 8001848:	5ccb      	ldrb	r3, [r1, r3]
 800184a:	fa22 f303 	lsr.w	r3, r2, r3
 800184e:	4a09      	ldr	r2, [pc, #36]	; (8001874 <HAL_RCC_ClockConfig+0x1cc>)
 8001850:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001852:	4b09      	ldr	r3, [pc, #36]	; (8001878 <HAL_RCC_ClockConfig+0x1d0>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff f8fe 	bl	8000a58 <HAL_InitTick>

  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40022000 	.word	0x40022000
 800186c:	40021000 	.word	0x40021000
 8001870:	08004988 	.word	0x08004988
 8001874:	20000000 	.word	0x20000000
 8001878:	20000004 	.word	0x20000004

0800187c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800187c:	b490      	push	{r4, r7}
 800187e:	b08a      	sub	sp, #40	; 0x28
 8001880:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001882:	4b29      	ldr	r3, [pc, #164]	; (8001928 <HAL_RCC_GetSysClockFreq+0xac>)
 8001884:	1d3c      	adds	r4, r7, #4
 8001886:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001888:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800188c:	f240 2301 	movw	r3, #513	; 0x201
 8001890:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001892:	2300      	movs	r3, #0
 8001894:	61fb      	str	r3, [r7, #28]
 8001896:	2300      	movs	r3, #0
 8001898:	61bb      	str	r3, [r7, #24]
 800189a:	2300      	movs	r3, #0
 800189c:	627b      	str	r3, [r7, #36]	; 0x24
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80018a2:	2300      	movs	r3, #0
 80018a4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80018a6:	4b21      	ldr	r3, [pc, #132]	; (800192c <HAL_RCC_GetSysClockFreq+0xb0>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f003 030c 	and.w	r3, r3, #12
 80018b2:	2b04      	cmp	r3, #4
 80018b4:	d002      	beq.n	80018bc <HAL_RCC_GetSysClockFreq+0x40>
 80018b6:	2b08      	cmp	r3, #8
 80018b8:	d003      	beq.n	80018c2 <HAL_RCC_GetSysClockFreq+0x46>
 80018ba:	e02b      	b.n	8001914 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018bc:	4b1c      	ldr	r3, [pc, #112]	; (8001930 <HAL_RCC_GetSysClockFreq+0xb4>)
 80018be:	623b      	str	r3, [r7, #32]
      break;
 80018c0:	e02b      	b.n	800191a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	0c9b      	lsrs	r3, r3, #18
 80018c6:	f003 030f 	and.w	r3, r3, #15
 80018ca:	3328      	adds	r3, #40	; 0x28
 80018cc:	443b      	add	r3, r7
 80018ce:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80018d2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d012      	beq.n	8001904 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80018de:	4b13      	ldr	r3, [pc, #76]	; (800192c <HAL_RCC_GetSysClockFreq+0xb0>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	0c5b      	lsrs	r3, r3, #17
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	3328      	adds	r3, #40	; 0x28
 80018ea:	443b      	add	r3, r7
 80018ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80018f0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	4a0e      	ldr	r2, [pc, #56]	; (8001930 <HAL_RCC_GetSysClockFreq+0xb4>)
 80018f6:	fb03 f202 	mul.w	r2, r3, r2
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
 8001902:	e004      	b.n	800190e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	4a0b      	ldr	r2, [pc, #44]	; (8001934 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001908:	fb02 f303 	mul.w	r3, r2, r3
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	623b      	str	r3, [r7, #32]
      break;
 8001912:	e002      	b.n	800191a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001916:	623b      	str	r3, [r7, #32]
      break;
 8001918:	bf00      	nop
    }
  }
  return sysclockfreq;
 800191a:	6a3b      	ldr	r3, [r7, #32]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3728      	adds	r7, #40	; 0x28
 8001920:	46bd      	mov	sp, r7
 8001922:	bc90      	pop	{r4, r7}
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	080048f4 	.word	0x080048f4
 800192c:	40021000 	.word	0x40021000
 8001930:	007a1200 	.word	0x007a1200
 8001934:	003d0900 	.word	0x003d0900

08001938 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800193c:	4b02      	ldr	r3, [pc, #8]	; (8001948 <HAL_RCC_GetHCLKFreq+0x10>)
 800193e:	681b      	ldr	r3, [r3, #0]
}
 8001940:	4618      	mov	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr
 8001948:	20000000 	.word	0x20000000

0800194c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001950:	f7ff fff2 	bl	8001938 <HAL_RCC_GetHCLKFreq>
 8001954:	4602      	mov	r2, r0
 8001956:	4b05      	ldr	r3, [pc, #20]	; (800196c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	0a1b      	lsrs	r3, r3, #8
 800195c:	f003 0307 	and.w	r3, r3, #7
 8001960:	4903      	ldr	r1, [pc, #12]	; (8001970 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001962:	5ccb      	ldrb	r3, [r1, r3]
 8001964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001968:	4618      	mov	r0, r3
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40021000 	.word	0x40021000
 8001970:	08004998 	.word	0x08004998

08001974 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	220f      	movs	r2, #15
 8001982:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001984:	4b11      	ldr	r3, [pc, #68]	; (80019cc <HAL_RCC_GetClockConfig+0x58>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 0203 	and.w	r2, r3, #3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001990:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <HAL_RCC_GetClockConfig+0x58>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800199c:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <HAL_RCC_GetClockConfig+0x58>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80019a8:	4b08      	ldr	r3, [pc, #32]	; (80019cc <HAL_RCC_GetClockConfig+0x58>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	08db      	lsrs	r3, r3, #3
 80019ae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019b6:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <HAL_RCC_GetClockConfig+0x5c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0207 	and.w	r2, r3, #7
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr
 80019cc:	40021000 	.word	0x40021000
 80019d0:	40022000 	.word	0x40022000

080019d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019dc:	4b0a      	ldr	r3, [pc, #40]	; (8001a08 <RCC_Delay+0x34>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a0a      	ldr	r2, [pc, #40]	; (8001a0c <RCC_Delay+0x38>)
 80019e2:	fba2 2303 	umull	r2, r3, r2, r3
 80019e6:	0a5b      	lsrs	r3, r3, #9
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	fb02 f303 	mul.w	r3, r2, r3
 80019ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019f0:	bf00      	nop
  }
  while (Delay --);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	1e5a      	subs	r2, r3, #1
 80019f6:	60fa      	str	r2, [r7, #12]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d1f9      	bne.n	80019f0 <RCC_Delay+0x1c>
}
 80019fc:	bf00      	nop
 80019fe:	bf00      	nop
 8001a00:	3714      	adds	r7, #20
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr
 8001a08:	20000000 	.word	0x20000000
 8001a0c:	10624dd3 	.word	0x10624dd3

08001a10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e041      	b.n	8001aa6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d106      	bne.n	8001a3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f000 f839 	bl	8001aae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2202      	movs	r2, #2
 8001a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3304      	adds	r3, #4
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4610      	mov	r0, r2
 8001a50:	f000 f9b4 	bl	8001dbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr

08001ac0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d001      	beq.n	8001ad8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e03a      	b.n	8001b4e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2202      	movs	r2, #2
 8001adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	68da      	ldr	r2, [r3, #12]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f042 0201 	orr.w	r2, r2, #1
 8001aee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a18      	ldr	r2, [pc, #96]	; (8001b58 <HAL_TIM_Base_Start_IT+0x98>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d00e      	beq.n	8001b18 <HAL_TIM_Base_Start_IT+0x58>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b02:	d009      	beq.n	8001b18 <HAL_TIM_Base_Start_IT+0x58>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a14      	ldr	r2, [pc, #80]	; (8001b5c <HAL_TIM_Base_Start_IT+0x9c>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d004      	beq.n	8001b18 <HAL_TIM_Base_Start_IT+0x58>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a13      	ldr	r2, [pc, #76]	; (8001b60 <HAL_TIM_Base_Start_IT+0xa0>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d111      	bne.n	8001b3c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2b06      	cmp	r3, #6
 8001b28:	d010      	beq.n	8001b4c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f042 0201 	orr.w	r2, r2, #1
 8001b38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b3a:	e007      	b.n	8001b4c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f042 0201 	orr.w	r2, r2, #1
 8001b4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3714      	adds	r7, #20
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr
 8001b58:	40012c00 	.word	0x40012c00
 8001b5c:	40000400 	.word	0x40000400
 8001b60:	40000800 	.word	0x40000800

08001b64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d122      	bne.n	8001bc0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d11b      	bne.n	8001bc0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f06f 0202 	mvn.w	r2, #2
 8001b90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2201      	movs	r2, #1
 8001b96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 f8ed 	bl	8001d86 <HAL_TIM_IC_CaptureCallback>
 8001bac:	e005      	b.n	8001bba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 f8e0 	bl	8001d74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 f8ef 	bl	8001d98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	f003 0304 	and.w	r3, r3, #4
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	d122      	bne.n	8001c14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	2b04      	cmp	r3, #4
 8001bda:	d11b      	bne.n	8001c14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f06f 0204 	mvn.w	r2, #4
 8001be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2202      	movs	r2, #2
 8001bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d003      	beq.n	8001c02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 f8c3 	bl	8001d86 <HAL_TIM_IC_CaptureCallback>
 8001c00:	e005      	b.n	8001c0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 f8b6 	bl	8001d74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f000 f8c5 	bl	8001d98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	f003 0308 	and.w	r3, r3, #8
 8001c1e:	2b08      	cmp	r3, #8
 8001c20:	d122      	bne.n	8001c68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	f003 0308 	and.w	r3, r3, #8
 8001c2c:	2b08      	cmp	r3, #8
 8001c2e:	d11b      	bne.n	8001c68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f06f 0208 	mvn.w	r2, #8
 8001c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2204      	movs	r2, #4
 8001c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	f003 0303 	and.w	r3, r3, #3
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d003      	beq.n	8001c56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 f899 	bl	8001d86 <HAL_TIM_IC_CaptureCallback>
 8001c54:	e005      	b.n	8001c62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 f88c 	bl	8001d74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f000 f89b 	bl	8001d98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	f003 0310 	and.w	r3, r3, #16
 8001c72:	2b10      	cmp	r3, #16
 8001c74:	d122      	bne.n	8001cbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	f003 0310 	and.w	r3, r3, #16
 8001c80:	2b10      	cmp	r3, #16
 8001c82:	d11b      	bne.n	8001cbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f06f 0210 	mvn.w	r2, #16
 8001c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2208      	movs	r2, #8
 8001c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d003      	beq.n	8001caa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f000 f86f 	bl	8001d86 <HAL_TIM_IC_CaptureCallback>
 8001ca8:	e005      	b.n	8001cb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 f862 	bl	8001d74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 f871 	bl	8001d98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d10e      	bne.n	8001ce8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d107      	bne.n	8001ce8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f06f 0201 	mvn.w	r2, #1
 8001ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f7fe fe6c 	bl	80009c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cf2:	2b80      	cmp	r3, #128	; 0x80
 8001cf4:	d10e      	bne.n	8001d14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d00:	2b80      	cmp	r3, #128	; 0x80
 8001d02:	d107      	bne.n	8001d14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 f8bf 	bl	8001e92 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d1e:	2b40      	cmp	r3, #64	; 0x40
 8001d20:	d10e      	bne.n	8001d40 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d2c:	2b40      	cmp	r3, #64	; 0x40
 8001d2e:	d107      	bne.n	8001d40 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 f835 	bl	8001daa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	f003 0320 	and.w	r3, r3, #32
 8001d4a:	2b20      	cmp	r3, #32
 8001d4c:	d10e      	bne.n	8001d6c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	f003 0320 	and.w	r3, r3, #32
 8001d58:	2b20      	cmp	r3, #32
 8001d5a:	d107      	bne.n	8001d6c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f06f 0220 	mvn.w	r2, #32
 8001d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f88a 	bl	8001e80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d6c:	bf00      	nop
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bc80      	pop	{r7}
 8001d84:	4770      	bx	lr

08001d86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr

08001d98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bc80      	pop	{r7}
 8001da8:	4770      	bx	lr

08001daa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr

08001dbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a29      	ldr	r2, [pc, #164]	; (8001e74 <TIM_Base_SetConfig+0xb8>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d00b      	beq.n	8001dec <TIM_Base_SetConfig+0x30>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dda:	d007      	beq.n	8001dec <TIM_Base_SetConfig+0x30>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a26      	ldr	r2, [pc, #152]	; (8001e78 <TIM_Base_SetConfig+0xbc>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d003      	beq.n	8001dec <TIM_Base_SetConfig+0x30>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a25      	ldr	r2, [pc, #148]	; (8001e7c <TIM_Base_SetConfig+0xc0>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d108      	bne.n	8001dfe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001df2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a1c      	ldr	r2, [pc, #112]	; (8001e74 <TIM_Base_SetConfig+0xb8>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d00b      	beq.n	8001e1e <TIM_Base_SetConfig+0x62>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e0c:	d007      	beq.n	8001e1e <TIM_Base_SetConfig+0x62>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a19      	ldr	r2, [pc, #100]	; (8001e78 <TIM_Base_SetConfig+0xbc>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d003      	beq.n	8001e1e <TIM_Base_SetConfig+0x62>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a18      	ldr	r2, [pc, #96]	; (8001e7c <TIM_Base_SetConfig+0xc0>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d108      	bne.n	8001e30 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a07      	ldr	r2, [pc, #28]	; (8001e74 <TIM_Base_SetConfig+0xb8>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d103      	bne.n	8001e64 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	691a      	ldr	r2, [r3, #16]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	615a      	str	r2, [r3, #20]
}
 8001e6a:	bf00      	nop
 8001e6c:	3714      	adds	r7, #20
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr
 8001e74:	40012c00 	.word	0x40012c00
 8001e78:	40000400 	.word	0x40000400
 8001e7c:	40000800 	.word	0x40000800

08001e80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bc80      	pop	{r7}
 8001e90:	4770      	bx	lr

08001e92 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b083      	sub	sp, #12
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr

08001ea4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001eaa:	f3ef 8305 	mrs	r3, IPSR
 8001eae:	60bb      	str	r3, [r7, #8]
  return(result);
 8001eb0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10f      	bne.n	8001ed6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001eb6:	f3ef 8310 	mrs	r3, PRIMASK
 8001eba:	607b      	str	r3, [r7, #4]
  return(result);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d109      	bne.n	8001ed6 <osKernelInitialize+0x32>
 8001ec2:	4b10      	ldr	r3, [pc, #64]	; (8001f04 <osKernelInitialize+0x60>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d109      	bne.n	8001ede <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001eca:	f3ef 8311 	mrs	r3, BASEPRI
 8001ece:	603b      	str	r3, [r7, #0]
  return(result);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001ed6:	f06f 0305 	mvn.w	r3, #5
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	e00c      	b.n	8001ef8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001ede:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <osKernelInitialize+0x60>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d105      	bne.n	8001ef2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8001ee6:	4b07      	ldr	r3, [pc, #28]	; (8001f04 <osKernelInitialize+0x60>)
 8001ee8:	2201      	movs	r2, #1
 8001eea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001eec:	2300      	movs	r3, #0
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	e002      	b.n	8001ef8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001ef2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ef6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3714      	adds	r7, #20
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr
 8001f04:	20000084 	.word	0x20000084

08001f08 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f0e:	f3ef 8305 	mrs	r3, IPSR
 8001f12:	60bb      	str	r3, [r7, #8]
  return(result);
 8001f14:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d10f      	bne.n	8001f3a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f1a:	f3ef 8310 	mrs	r3, PRIMASK
 8001f1e:	607b      	str	r3, [r7, #4]
  return(result);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d109      	bne.n	8001f3a <osKernelStart+0x32>
 8001f26:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <osKernelStart+0x64>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d109      	bne.n	8001f42 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001f2e:	f3ef 8311 	mrs	r3, BASEPRI
 8001f32:	603b      	str	r3, [r7, #0]
  return(result);
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <osKernelStart+0x3a>
    stat = osErrorISR;
 8001f3a:	f06f 0305 	mvn.w	r3, #5
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	e00e      	b.n	8001f60 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8001f42:	4b0a      	ldr	r3, [pc, #40]	; (8001f6c <osKernelStart+0x64>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d107      	bne.n	8001f5a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8001f4a:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <osKernelStart+0x64>)
 8001f4c:	2202      	movs	r2, #2
 8001f4e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001f50:	f001 f878 	bl	8003044 <vTaskStartScheduler>
      stat = osOK;
 8001f54:	2300      	movs	r3, #0
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	e002      	b.n	8001f60 <osKernelStart+0x58>
    } else {
      stat = osError;
 8001f5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f5e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001f60:	68fb      	ldr	r3, [r7, #12]
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20000084 	.word	0x20000084

08001f70 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b092      	sub	sp, #72	; 0x48
 8001f74:	af04      	add	r7, sp, #16
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f80:	f3ef 8305 	mrs	r3, IPSR
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f040 8094 	bne.w	80020b6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f8e:	f3ef 8310 	mrs	r3, PRIMASK
 8001f92:	623b      	str	r3, [r7, #32]
  return(result);
 8001f94:	6a3b      	ldr	r3, [r7, #32]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f040 808d 	bne.w	80020b6 <osThreadNew+0x146>
 8001f9c:	4b48      	ldr	r3, [pc, #288]	; (80020c0 <osThreadNew+0x150>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d106      	bne.n	8001fb2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001fa4:	f3ef 8311 	mrs	r3, BASEPRI
 8001fa8:	61fb      	str	r3, [r7, #28]
  return(result);
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f040 8082 	bne.w	80020b6 <osThreadNew+0x146>
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d07e      	beq.n	80020b6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8001fb8:	2380      	movs	r3, #128	; 0x80
 8001fba:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8001fbc:	2318      	movs	r3, #24
 8001fbe:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8001fc4:	f107 031b 	add.w	r3, r7, #27
 8001fc8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8001fca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fce:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d045      	beq.n	8002062 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d002      	beq.n	8001fe4 <osThreadNew+0x74>
        name = attr->name;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d002      	beq.n	8001ff2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d008      	beq.n	800200a <osThreadNew+0x9a>
 8001ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ffa:	2b38      	cmp	r3, #56	; 0x38
 8001ffc:	d805      	bhi.n	800200a <osThreadNew+0x9a>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <osThreadNew+0x9e>
        return (NULL);
 800200a:	2300      	movs	r3, #0
 800200c:	e054      	b.n	80020b8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	089b      	lsrs	r3, r3, #2
 800201c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00e      	beq.n	8002044 <osThreadNew+0xd4>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	2b5b      	cmp	r3, #91	; 0x5b
 800202c:	d90a      	bls.n	8002044 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002032:	2b00      	cmp	r3, #0
 8002034:	d006      	beq.n	8002044 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d002      	beq.n	8002044 <osThreadNew+0xd4>
        mem = 1;
 800203e:	2301      	movs	r3, #1
 8002040:	62bb      	str	r3, [r7, #40]	; 0x28
 8002042:	e010      	b.n	8002066 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d10c      	bne.n	8002066 <osThreadNew+0xf6>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d108      	bne.n	8002066 <osThreadNew+0xf6>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d104      	bne.n	8002066 <osThreadNew+0xf6>
          mem = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002060:	e001      	b.n	8002066 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002062:	2300      	movs	r3, #0
 8002064:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002068:	2b01      	cmp	r3, #1
 800206a:	d110      	bne.n	800208e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002074:	9202      	str	r2, [sp, #8]
 8002076:	9301      	str	r3, [sp, #4]
 8002078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800207a:	9300      	str	r3, [sp, #0]
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002080:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f000 fe12 	bl	8002cac <xTaskCreateStatic>
 8002088:	4603      	mov	r3, r0
 800208a:	617b      	str	r3, [r7, #20]
 800208c:	e013      	b.n	80020b6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800208e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002090:	2b00      	cmp	r3, #0
 8002092:	d110      	bne.n	80020b6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002096:	b29a      	uxth	r2, r3
 8002098:	f107 0314 	add.w	r3, r7, #20
 800209c:	9301      	str	r3, [sp, #4]
 800209e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a0:	9300      	str	r3, [sp, #0]
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f000 fe5c 	bl	8002d64 <xTaskCreate>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d001      	beq.n	80020b6 <osThreadNew+0x146>
          hTask = NULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80020b6:	697b      	ldr	r3, [r7, #20]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3738      	adds	r7, #56	; 0x38
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	20000084 	.word	0x20000084

080020c4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80020cc:	f3ef 8305 	mrs	r3, IPSR
 80020d0:	613b      	str	r3, [r7, #16]
  return(result);
 80020d2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d10f      	bne.n	80020f8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020d8:	f3ef 8310 	mrs	r3, PRIMASK
 80020dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d109      	bne.n	80020f8 <osDelay+0x34>
 80020e4:	4b0d      	ldr	r3, [pc, #52]	; (800211c <osDelay+0x58>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d109      	bne.n	8002100 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80020ec:	f3ef 8311 	mrs	r3, BASEPRI
 80020f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <osDelay+0x3c>
    stat = osErrorISR;
 80020f8:	f06f 0305 	mvn.w	r3, #5
 80020fc:	617b      	str	r3, [r7, #20]
 80020fe:	e007      	b.n	8002110 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d002      	beq.n	8002110 <osDelay+0x4c>
      vTaskDelay(ticks);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 ff66 	bl	8002fdc <vTaskDelay>
    }
  }

  return (stat);
 8002110:	697b      	ldr	r3, [r7, #20]
}
 8002112:	4618      	mov	r0, r3
 8002114:	3718      	adds	r7, #24
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	20000084 	.word	0x20000084

08002120 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4a06      	ldr	r2, [pc, #24]	; (8002148 <vApplicationGetIdleTaskMemory+0x28>)
 8002130:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	4a05      	ldr	r2, [pc, #20]	; (800214c <vApplicationGetIdleTaskMemory+0x2c>)
 8002136:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2280      	movs	r2, #128	; 0x80
 800213c:	601a      	str	r2, [r3, #0]
}
 800213e:	bf00      	nop
 8002140:	3714      	adds	r7, #20
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr
 8002148:	20000088 	.word	0x20000088
 800214c:	200000e4 	.word	0x200000e4

08002150 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	4a07      	ldr	r2, [pc, #28]	; (800217c <vApplicationGetTimerTaskMemory+0x2c>)
 8002160:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	4a06      	ldr	r2, [pc, #24]	; (8002180 <vApplicationGetTimerTaskMemory+0x30>)
 8002166:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800216e:	601a      	str	r2, [r3, #0]
}
 8002170:	bf00      	nop
 8002172:	3714      	adds	r7, #20
 8002174:	46bd      	mov	sp, r7
 8002176:	bc80      	pop	{r7}
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	200002e4 	.word	0x200002e4
 8002180:	20000340 	.word	0x20000340

08002184 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f103 0208 	add.w	r2, r3, #8
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800219c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f103 0208 	add.w	r2, r3, #8
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f103 0208 	add.w	r2, r3, #8
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	bc80      	pop	{r7}
 80021c0:	4770      	bx	lr

080021c2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80021c2:	b480      	push	{r7}
 80021c4:	b083      	sub	sp, #12
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bc80      	pop	{r7}
 80021d8:	4770      	bx	lr

080021da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80021da:	b480      	push	{r7}
 80021dc:	b085      	sub	sp, #20
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
 80021e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	68fa      	ldr	r2, [r7, #12]
 80021ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	1c5a      	adds	r2, r3, #1
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	601a      	str	r2, [r3, #0]
}
 8002216:	bf00      	nop
 8002218:	3714      	adds	r7, #20
 800221a:	46bd      	mov	sp, r7
 800221c:	bc80      	pop	{r7}
 800221e:	4770      	bx	lr

08002220 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002236:	d103      	bne.n	8002240 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	e00c      	b.n	800225a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3308      	adds	r3, #8
 8002244:	60fb      	str	r3, [r7, #12]
 8002246:	e002      	b.n	800224e <vListInsert+0x2e>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	60fb      	str	r3, [r7, #12]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68ba      	ldr	r2, [r7, #8]
 8002256:	429a      	cmp	r2, r3
 8002258:	d2f6      	bcs.n	8002248 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	685a      	ldr	r2, [r3, #4]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	1c5a      	adds	r2, r3, #1
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	601a      	str	r2, [r3, #0]
}
 8002286:	bf00      	nop
 8002288:	3714      	adds	r7, #20
 800228a:	46bd      	mov	sp, r7
 800228c:	bc80      	pop	{r7}
 800228e:	4770      	bx	lr

08002290 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	6892      	ldr	r2, [r2, #8]
 80022a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6852      	ldr	r2, [r2, #4]
 80022b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d103      	bne.n	80022c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	1e5a      	subs	r2, r3, #1
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	bc80      	pop	{r7}
 80022e0:	4770      	bx	lr
	...

080022e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d10a      	bne.n	800230e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80022f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022fc:	f383 8811 	msr	BASEPRI, r3
 8002300:	f3bf 8f6f 	isb	sy
 8002304:	f3bf 8f4f 	dsb	sy
 8002308:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800230a:	bf00      	nop
 800230c:	e7fe      	b.n	800230c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800230e:	f001 ffc5 	bl	800429c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800231a:	68f9      	ldr	r1, [r7, #12]
 800231c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800231e:	fb01 f303 	mul.w	r3, r1, r3
 8002322:	441a      	add	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800233e:	3b01      	subs	r3, #1
 8002340:	68f9      	ldr	r1, [r7, #12]
 8002342:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002344:	fb01 f303 	mul.w	r3, r1, r3
 8002348:	441a      	add	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	22ff      	movs	r2, #255	; 0xff
 8002352:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	22ff      	movs	r2, #255	; 0xff
 800235a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d114      	bne.n	800238e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d01a      	beq.n	80023a2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	3310      	adds	r3, #16
 8002370:	4618      	mov	r0, r3
 8002372:	f001 f8f1 	bl	8003558 <xTaskRemoveFromEventList>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d012      	beq.n	80023a2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800237c:	4b0c      	ldr	r3, [pc, #48]	; (80023b0 <xQueueGenericReset+0xcc>)
 800237e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	f3bf 8f4f 	dsb	sy
 8002388:	f3bf 8f6f 	isb	sy
 800238c:	e009      	b.n	80023a2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	3310      	adds	r3, #16
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff fef6 	bl	8002184 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	3324      	adds	r3, #36	; 0x24
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff fef1 	bl	8002184 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80023a2:	f001 ffab 	bl	80042fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80023a6:	2301      	movs	r3, #1
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	e000ed04 	.word	0xe000ed04

080023b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b08e      	sub	sp, #56	; 0x38
 80023b8:	af02      	add	r7, sp, #8
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
 80023c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d10a      	bne.n	80023de <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80023c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023cc:	f383 8811 	msr	BASEPRI, r3
 80023d0:	f3bf 8f6f 	isb	sy
 80023d4:	f3bf 8f4f 	dsb	sy
 80023d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80023da:	bf00      	nop
 80023dc:	e7fe      	b.n	80023dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d10a      	bne.n	80023fa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80023e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023e8:	f383 8811 	msr	BASEPRI, r3
 80023ec:	f3bf 8f6f 	isb	sy
 80023f0:	f3bf 8f4f 	dsb	sy
 80023f4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80023f6:	bf00      	nop
 80023f8:	e7fe      	b.n	80023f8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d002      	beq.n	8002406 <xQueueGenericCreateStatic+0x52>
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <xQueueGenericCreateStatic+0x56>
 8002406:	2301      	movs	r3, #1
 8002408:	e000      	b.n	800240c <xQueueGenericCreateStatic+0x58>
 800240a:	2300      	movs	r3, #0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d10a      	bne.n	8002426 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002414:	f383 8811 	msr	BASEPRI, r3
 8002418:	f3bf 8f6f 	isb	sy
 800241c:	f3bf 8f4f 	dsb	sy
 8002420:	623b      	str	r3, [r7, #32]
}
 8002422:	bf00      	nop
 8002424:	e7fe      	b.n	8002424 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d102      	bne.n	8002432 <xQueueGenericCreateStatic+0x7e>
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <xQueueGenericCreateStatic+0x82>
 8002432:	2301      	movs	r3, #1
 8002434:	e000      	b.n	8002438 <xQueueGenericCreateStatic+0x84>
 8002436:	2300      	movs	r3, #0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d10a      	bne.n	8002452 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800243c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002440:	f383 8811 	msr	BASEPRI, r3
 8002444:	f3bf 8f6f 	isb	sy
 8002448:	f3bf 8f4f 	dsb	sy
 800244c:	61fb      	str	r3, [r7, #28]
}
 800244e:	bf00      	nop
 8002450:	e7fe      	b.n	8002450 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002452:	2350      	movs	r3, #80	; 0x50
 8002454:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	2b50      	cmp	r3, #80	; 0x50
 800245a:	d00a      	beq.n	8002472 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800245c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002460:	f383 8811 	msr	BASEPRI, r3
 8002464:	f3bf 8f6f 	isb	sy
 8002468:	f3bf 8f4f 	dsb	sy
 800246c:	61bb      	str	r3, [r7, #24]
}
 800246e:	bf00      	nop
 8002470:	e7fe      	b.n	8002470 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002478:	2b00      	cmp	r3, #0
 800247a:	d00d      	beq.n	8002498 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800247c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002484:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800248a:	9300      	str	r3, [sp, #0]
 800248c:	4613      	mov	r3, r2
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	68b9      	ldr	r1, [r7, #8]
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f000 f805 	bl	80024a2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800249a:	4618      	mov	r0, r3
 800249c:	3730      	adds	r7, #48	; 0x30
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b084      	sub	sp, #16
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	60f8      	str	r0, [r7, #12]
 80024aa:	60b9      	str	r1, [r7, #8]
 80024ac:	607a      	str	r2, [r7, #4]
 80024ae:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d103      	bne.n	80024be <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	e002      	b.n	80024c4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	68ba      	ldr	r2, [r7, #8]
 80024ce:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80024d0:	2101      	movs	r1, #1
 80024d2:	69b8      	ldr	r0, [r7, #24]
 80024d4:	f7ff ff06 	bl	80022e4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	78fa      	ldrb	r2, [r7, #3]
 80024dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80024e0:	bf00      	nop
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b08e      	sub	sp, #56	; 0x38
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
 80024f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80024f6:	2300      	movs	r3, #0
 80024f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80024fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10a      	bne.n	800251a <xQueueGenericSend+0x32>
	__asm volatile
 8002504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002508:	f383 8811 	msr	BASEPRI, r3
 800250c:	f3bf 8f6f 	isb	sy
 8002510:	f3bf 8f4f 	dsb	sy
 8002514:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002516:	bf00      	nop
 8002518:	e7fe      	b.n	8002518 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d103      	bne.n	8002528 <xQueueGenericSend+0x40>
 8002520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002524:	2b00      	cmp	r3, #0
 8002526:	d101      	bne.n	800252c <xQueueGenericSend+0x44>
 8002528:	2301      	movs	r3, #1
 800252a:	e000      	b.n	800252e <xQueueGenericSend+0x46>
 800252c:	2300      	movs	r3, #0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d10a      	bne.n	8002548 <xQueueGenericSend+0x60>
	__asm volatile
 8002532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002536:	f383 8811 	msr	BASEPRI, r3
 800253a:	f3bf 8f6f 	isb	sy
 800253e:	f3bf 8f4f 	dsb	sy
 8002542:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002544:	bf00      	nop
 8002546:	e7fe      	b.n	8002546 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	2b02      	cmp	r3, #2
 800254c:	d103      	bne.n	8002556 <xQueueGenericSend+0x6e>
 800254e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002552:	2b01      	cmp	r3, #1
 8002554:	d101      	bne.n	800255a <xQueueGenericSend+0x72>
 8002556:	2301      	movs	r3, #1
 8002558:	e000      	b.n	800255c <xQueueGenericSend+0x74>
 800255a:	2300      	movs	r3, #0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d10a      	bne.n	8002576 <xQueueGenericSend+0x8e>
	__asm volatile
 8002560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002564:	f383 8811 	msr	BASEPRI, r3
 8002568:	f3bf 8f6f 	isb	sy
 800256c:	f3bf 8f4f 	dsb	sy
 8002570:	623b      	str	r3, [r7, #32]
}
 8002572:	bf00      	nop
 8002574:	e7fe      	b.n	8002574 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002576:	f001 f9b1 	bl	80038dc <xTaskGetSchedulerState>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d102      	bne.n	8002586 <xQueueGenericSend+0x9e>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <xQueueGenericSend+0xa2>
 8002586:	2301      	movs	r3, #1
 8002588:	e000      	b.n	800258c <xQueueGenericSend+0xa4>
 800258a:	2300      	movs	r3, #0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d10a      	bne.n	80025a6 <xQueueGenericSend+0xbe>
	__asm volatile
 8002590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002594:	f383 8811 	msr	BASEPRI, r3
 8002598:	f3bf 8f6f 	isb	sy
 800259c:	f3bf 8f4f 	dsb	sy
 80025a0:	61fb      	str	r3, [r7, #28]
}
 80025a2:	bf00      	nop
 80025a4:	e7fe      	b.n	80025a4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80025a6:	f001 fe79 	bl	800429c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80025aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d302      	bcc.n	80025bc <xQueueGenericSend+0xd4>
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d129      	bne.n	8002610 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	68b9      	ldr	r1, [r7, #8]
 80025c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025c2:	f000 fa07 	bl	80029d4 <prvCopyDataToQueue>
 80025c6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d010      	beq.n	80025f2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d2:	3324      	adds	r3, #36	; 0x24
 80025d4:	4618      	mov	r0, r3
 80025d6:	f000 ffbf 	bl	8003558 <xTaskRemoveFromEventList>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d013      	beq.n	8002608 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80025e0:	4b3f      	ldr	r3, [pc, #252]	; (80026e0 <xQueueGenericSend+0x1f8>)
 80025e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	f3bf 8f4f 	dsb	sy
 80025ec:	f3bf 8f6f 	isb	sy
 80025f0:	e00a      	b.n	8002608 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80025f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d007      	beq.n	8002608 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80025f8:	4b39      	ldr	r3, [pc, #228]	; (80026e0 <xQueueGenericSend+0x1f8>)
 80025fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	f3bf 8f4f 	dsb	sy
 8002604:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002608:	f001 fe78 	bl	80042fc <vPortExitCritical>
				return pdPASS;
 800260c:	2301      	movs	r3, #1
 800260e:	e063      	b.n	80026d8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d103      	bne.n	800261e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002616:	f001 fe71 	bl	80042fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800261a:	2300      	movs	r3, #0
 800261c:	e05c      	b.n	80026d8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800261e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002620:	2b00      	cmp	r3, #0
 8002622:	d106      	bne.n	8002632 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002624:	f107 0314 	add.w	r3, r7, #20
 8002628:	4618      	mov	r0, r3
 800262a:	f000 fff9 	bl	8003620 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800262e:	2301      	movs	r3, #1
 8002630:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002632:	f001 fe63 	bl	80042fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002636:	f000 fd6b 	bl	8003110 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800263a:	f001 fe2f 	bl	800429c <vPortEnterCritical>
 800263e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002640:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002644:	b25b      	sxtb	r3, r3
 8002646:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800264a:	d103      	bne.n	8002654 <xQueueGenericSend+0x16c>
 800264c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002656:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800265a:	b25b      	sxtb	r3, r3
 800265c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002660:	d103      	bne.n	800266a <xQueueGenericSend+0x182>
 8002662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800266a:	f001 fe47 	bl	80042fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800266e:	1d3a      	adds	r2, r7, #4
 8002670:	f107 0314 	add.w	r3, r7, #20
 8002674:	4611      	mov	r1, r2
 8002676:	4618      	mov	r0, r3
 8002678:	f000 ffe8 	bl	800364c <xTaskCheckForTimeOut>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d124      	bne.n	80026cc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002682:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002684:	f000 fa9e 	bl	8002bc4 <prvIsQueueFull>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d018      	beq.n	80026c0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800268e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002690:	3310      	adds	r3, #16
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	4611      	mov	r1, r2
 8002696:	4618      	mov	r0, r3
 8002698:	f000 ff0e 	bl	80034b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800269c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800269e:	f000 fa29 	bl	8002af4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80026a2:	f000 fd43 	bl	800312c <xTaskResumeAll>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f47f af7c 	bne.w	80025a6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80026ae:	4b0c      	ldr	r3, [pc, #48]	; (80026e0 <xQueueGenericSend+0x1f8>)
 80026b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	f3bf 8f4f 	dsb	sy
 80026ba:	f3bf 8f6f 	isb	sy
 80026be:	e772      	b.n	80025a6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80026c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026c2:	f000 fa17 	bl	8002af4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80026c6:	f000 fd31 	bl	800312c <xTaskResumeAll>
 80026ca:	e76c      	b.n	80025a6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80026cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026ce:	f000 fa11 	bl	8002af4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80026d2:	f000 fd2b 	bl	800312c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80026d6:	2300      	movs	r3, #0
		}
	}
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3738      	adds	r7, #56	; 0x38
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	e000ed04 	.word	0xe000ed04

080026e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b08e      	sub	sp, #56	; 0x38
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
 80026f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80026f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10a      	bne.n	8002712 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80026fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002700:	f383 8811 	msr	BASEPRI, r3
 8002704:	f3bf 8f6f 	isb	sy
 8002708:	f3bf 8f4f 	dsb	sy
 800270c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800270e:	bf00      	nop
 8002710:	e7fe      	b.n	8002710 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d103      	bne.n	8002720 <xQueueGenericSendFromISR+0x3c>
 8002718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800271a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271c:	2b00      	cmp	r3, #0
 800271e:	d101      	bne.n	8002724 <xQueueGenericSendFromISR+0x40>
 8002720:	2301      	movs	r3, #1
 8002722:	e000      	b.n	8002726 <xQueueGenericSendFromISR+0x42>
 8002724:	2300      	movs	r3, #0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10a      	bne.n	8002740 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800272a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800272e:	f383 8811 	msr	BASEPRI, r3
 8002732:	f3bf 8f6f 	isb	sy
 8002736:	f3bf 8f4f 	dsb	sy
 800273a:	623b      	str	r3, [r7, #32]
}
 800273c:	bf00      	nop
 800273e:	e7fe      	b.n	800273e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	2b02      	cmp	r3, #2
 8002744:	d103      	bne.n	800274e <xQueueGenericSendFromISR+0x6a>
 8002746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800274a:	2b01      	cmp	r3, #1
 800274c:	d101      	bne.n	8002752 <xQueueGenericSendFromISR+0x6e>
 800274e:	2301      	movs	r3, #1
 8002750:	e000      	b.n	8002754 <xQueueGenericSendFromISR+0x70>
 8002752:	2300      	movs	r3, #0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d10a      	bne.n	800276e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800275c:	f383 8811 	msr	BASEPRI, r3
 8002760:	f3bf 8f6f 	isb	sy
 8002764:	f3bf 8f4f 	dsb	sy
 8002768:	61fb      	str	r3, [r7, #28]
}
 800276a:	bf00      	nop
 800276c:	e7fe      	b.n	800276c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800276e:	f001 fe57 	bl	8004420 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002772:	f3ef 8211 	mrs	r2, BASEPRI
 8002776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800277a:	f383 8811 	msr	BASEPRI, r3
 800277e:	f3bf 8f6f 	isb	sy
 8002782:	f3bf 8f4f 	dsb	sy
 8002786:	61ba      	str	r2, [r7, #24]
 8002788:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800278a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800278c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800278e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002790:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002796:	429a      	cmp	r2, r3
 8002798:	d302      	bcc.n	80027a0 <xQueueGenericSendFromISR+0xbc>
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	2b02      	cmp	r3, #2
 800279e:	d12c      	bne.n	80027fa <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80027a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	68b9      	ldr	r1, [r7, #8]
 80027ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027b0:	f000 f910 	bl	80029d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80027b4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80027b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027bc:	d112      	bne.n	80027e4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d016      	beq.n	80027f4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c8:	3324      	adds	r3, #36	; 0x24
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 fec4 	bl	8003558 <xTaskRemoveFromEventList>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00e      	beq.n	80027f4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00b      	beq.n	80027f4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	e007      	b.n	80027f4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80027e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80027e8:	3301      	adds	r3, #1
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	b25a      	sxtb	r2, r3
 80027ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80027f4:	2301      	movs	r3, #1
 80027f6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80027f8:	e001      	b.n	80027fe <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80027fa:	2300      	movs	r3, #0
 80027fc:	637b      	str	r3, [r7, #52]	; 0x34
 80027fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002800:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002808:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800280a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800280c:	4618      	mov	r0, r3
 800280e:	3738      	adds	r7, #56	; 0x38
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b08c      	sub	sp, #48	; 0x30
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002820:	2300      	movs	r3, #0
 8002822:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10a      	bne.n	8002844 <xQueueReceive+0x30>
	__asm volatile
 800282e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002832:	f383 8811 	msr	BASEPRI, r3
 8002836:	f3bf 8f6f 	isb	sy
 800283a:	f3bf 8f4f 	dsb	sy
 800283e:	623b      	str	r3, [r7, #32]
}
 8002840:	bf00      	nop
 8002842:	e7fe      	b.n	8002842 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d103      	bne.n	8002852 <xQueueReceive+0x3e>
 800284a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <xQueueReceive+0x42>
 8002852:	2301      	movs	r3, #1
 8002854:	e000      	b.n	8002858 <xQueueReceive+0x44>
 8002856:	2300      	movs	r3, #0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d10a      	bne.n	8002872 <xQueueReceive+0x5e>
	__asm volatile
 800285c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002860:	f383 8811 	msr	BASEPRI, r3
 8002864:	f3bf 8f6f 	isb	sy
 8002868:	f3bf 8f4f 	dsb	sy
 800286c:	61fb      	str	r3, [r7, #28]
}
 800286e:	bf00      	nop
 8002870:	e7fe      	b.n	8002870 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002872:	f001 f833 	bl	80038dc <xTaskGetSchedulerState>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d102      	bne.n	8002882 <xQueueReceive+0x6e>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <xQueueReceive+0x72>
 8002882:	2301      	movs	r3, #1
 8002884:	e000      	b.n	8002888 <xQueueReceive+0x74>
 8002886:	2300      	movs	r3, #0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d10a      	bne.n	80028a2 <xQueueReceive+0x8e>
	__asm volatile
 800288c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002890:	f383 8811 	msr	BASEPRI, r3
 8002894:	f3bf 8f6f 	isb	sy
 8002898:	f3bf 8f4f 	dsb	sy
 800289c:	61bb      	str	r3, [r7, #24]
}
 800289e:	bf00      	nop
 80028a0:	e7fe      	b.n	80028a0 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80028a2:	f001 fcfb 	bl	800429c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028aa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d01f      	beq.n	80028f2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80028b2:	68b9      	ldr	r1, [r7, #8]
 80028b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028b6:	f000 f8f7 	bl	8002aa8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80028ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028bc:	1e5a      	subs	r2, r3, #1
 80028be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00f      	beq.n	80028ea <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028cc:	3310      	adds	r3, #16
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 fe42 	bl	8003558 <xTaskRemoveFromEventList>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d007      	beq.n	80028ea <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80028da:	4b3d      	ldr	r3, [pc, #244]	; (80029d0 <xQueueReceive+0x1bc>)
 80028dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028e0:	601a      	str	r2, [r3, #0]
 80028e2:	f3bf 8f4f 	dsb	sy
 80028e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80028ea:	f001 fd07 	bl	80042fc <vPortExitCritical>
				return pdPASS;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e069      	b.n	80029c6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d103      	bne.n	8002900 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80028f8:	f001 fd00 	bl	80042fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80028fc:	2300      	movs	r3, #0
 80028fe:	e062      	b.n	80029c6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002902:	2b00      	cmp	r3, #0
 8002904:	d106      	bne.n	8002914 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002906:	f107 0310 	add.w	r3, r7, #16
 800290a:	4618      	mov	r0, r3
 800290c:	f000 fe88 	bl	8003620 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002910:	2301      	movs	r3, #1
 8002912:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002914:	f001 fcf2 	bl	80042fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002918:	f000 fbfa 	bl	8003110 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800291c:	f001 fcbe 	bl	800429c <vPortEnterCritical>
 8002920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002922:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002926:	b25b      	sxtb	r3, r3
 8002928:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800292c:	d103      	bne.n	8002936 <xQueueReceive+0x122>
 800292e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002930:	2200      	movs	r2, #0
 8002932:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002938:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800293c:	b25b      	sxtb	r3, r3
 800293e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002942:	d103      	bne.n	800294c <xQueueReceive+0x138>
 8002944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002946:	2200      	movs	r2, #0
 8002948:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800294c:	f001 fcd6 	bl	80042fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002950:	1d3a      	adds	r2, r7, #4
 8002952:	f107 0310 	add.w	r3, r7, #16
 8002956:	4611      	mov	r1, r2
 8002958:	4618      	mov	r0, r3
 800295a:	f000 fe77 	bl	800364c <xTaskCheckForTimeOut>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d123      	bne.n	80029ac <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002964:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002966:	f000 f917 	bl	8002b98 <prvIsQueueEmpty>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d017      	beq.n	80029a0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002972:	3324      	adds	r3, #36	; 0x24
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	4611      	mov	r1, r2
 8002978:	4618      	mov	r0, r3
 800297a:	f000 fd9d 	bl	80034b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800297e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002980:	f000 f8b8 	bl	8002af4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002984:	f000 fbd2 	bl	800312c <xTaskResumeAll>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d189      	bne.n	80028a2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800298e:	4b10      	ldr	r3, [pc, #64]	; (80029d0 <xQueueReceive+0x1bc>)
 8002990:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002994:	601a      	str	r2, [r3, #0]
 8002996:	f3bf 8f4f 	dsb	sy
 800299a:	f3bf 8f6f 	isb	sy
 800299e:	e780      	b.n	80028a2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80029a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029a2:	f000 f8a7 	bl	8002af4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80029a6:	f000 fbc1 	bl	800312c <xTaskResumeAll>
 80029aa:	e77a      	b.n	80028a2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80029ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029ae:	f000 f8a1 	bl	8002af4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80029b2:	f000 fbbb 	bl	800312c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029b8:	f000 f8ee 	bl	8002b98 <prvIsQueueEmpty>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f43f af6f 	beq.w	80028a2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80029c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3730      	adds	r7, #48	; 0x30
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	e000ed04 	.word	0xe000ed04

080029d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80029e0:	2300      	movs	r3, #0
 80029e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10d      	bne.n	8002a0e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d14d      	bne.n	8002a96 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f000 ff8a 	bl	8003918 <xTaskPriorityDisinherit>
 8002a04:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	605a      	str	r2, [r3, #4]
 8002a0c:	e043      	b.n	8002a96 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d119      	bne.n	8002a48 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6898      	ldr	r0, [r3, #8]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	68b9      	ldr	r1, [r7, #8]
 8002a20:	f001 ff38 	bl	8004894 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2c:	441a      	add	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	689a      	ldr	r2, [r3, #8]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d32b      	bcc.n	8002a96 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	609a      	str	r2, [r3, #8]
 8002a46:	e026      	b.n	8002a96 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	68d8      	ldr	r0, [r3, #12]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	461a      	mov	r2, r3
 8002a52:	68b9      	ldr	r1, [r7, #8]
 8002a54:	f001 ff1e 	bl	8004894 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	68da      	ldr	r2, [r3, #12]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a60:	425b      	negs	r3, r3
 8002a62:	441a      	add	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	68da      	ldr	r2, [r3, #12]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d207      	bcs.n	8002a84 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7c:	425b      	negs	r3, r3
 8002a7e:	441a      	add	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d105      	bne.n	8002a96 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d002      	beq.n	8002a96 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	3b01      	subs	r3, #1
 8002a94:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1c5a      	adds	r2, r3, #1
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002a9e:	697b      	ldr	r3, [r7, #20]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3718      	adds	r7, #24
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d018      	beq.n	8002aec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	68da      	ldr	r2, [r3, #12]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	441a      	add	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	68da      	ldr	r2, [r3, #12]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d303      	bcc.n	8002adc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68d9      	ldr	r1, [r3, #12]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	6838      	ldr	r0, [r7, #0]
 8002ae8:	f001 fed4 	bl	8004894 <memcpy>
	}
}
 8002aec:	bf00      	nop
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002afc:	f001 fbce 	bl	800429c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b06:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b08:	e011      	b.n	8002b2e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d012      	beq.n	8002b38 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	3324      	adds	r3, #36	; 0x24
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 fd1e 	bl	8003558 <xTaskRemoveFromEventList>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002b22:	f000 fdf5 	bl	8003710 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002b26:	7bfb      	ldrb	r3, [r7, #15]
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	dce9      	bgt.n	8002b0a <prvUnlockQueue+0x16>
 8002b36:	e000      	b.n	8002b3a <prvUnlockQueue+0x46>
					break;
 8002b38:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	22ff      	movs	r2, #255	; 0xff
 8002b3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002b42:	f001 fbdb 	bl	80042fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002b46:	f001 fba9 	bl	800429c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b50:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b52:	e011      	b.n	8002b78 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d012      	beq.n	8002b82 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	3310      	adds	r3, #16
 8002b60:	4618      	mov	r0, r3
 8002b62:	f000 fcf9 	bl	8003558 <xTaskRemoveFromEventList>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002b6c:	f000 fdd0 	bl	8003710 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002b70:	7bbb      	ldrb	r3, [r7, #14]
 8002b72:	3b01      	subs	r3, #1
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	dce9      	bgt.n	8002b54 <prvUnlockQueue+0x60>
 8002b80:	e000      	b.n	8002b84 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002b82:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	22ff      	movs	r2, #255	; 0xff
 8002b88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002b8c:	f001 fbb6 	bl	80042fc <vPortExitCritical>
}
 8002b90:	bf00      	nop
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002ba0:	f001 fb7c 	bl	800429c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d102      	bne.n	8002bb2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002bac:	2301      	movs	r3, #1
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	e001      	b.n	8002bb6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002bb6:	f001 fba1 	bl	80042fc <vPortExitCritical>

	return xReturn;
 8002bba:	68fb      	ldr	r3, [r7, #12]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002bcc:	f001 fb66 	bl	800429c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d102      	bne.n	8002be2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	60fb      	str	r3, [r7, #12]
 8002be0:	e001      	b.n	8002be6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002be2:	2300      	movs	r3, #0
 8002be4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002be6:	f001 fb89 	bl	80042fc <vPortExitCritical>

	return xReturn;
 8002bea:	68fb      	ldr	r3, [r7, #12]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60fb      	str	r3, [r7, #12]
 8002c02:	e014      	b.n	8002c2e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002c04:	4a0e      	ldr	r2, [pc, #56]	; (8002c40 <vQueueAddToRegistry+0x4c>)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d10b      	bne.n	8002c28 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002c10:	490b      	ldr	r1, [pc, #44]	; (8002c40 <vQueueAddToRegistry+0x4c>)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002c1a:	4a09      	ldr	r2, [pc, #36]	; (8002c40 <vQueueAddToRegistry+0x4c>)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	4413      	add	r3, r2
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002c26:	e006      	b.n	8002c36 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2b07      	cmp	r3, #7
 8002c32:	d9e7      	bls.n	8002c04 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002c34:	bf00      	nop
 8002c36:	bf00      	nop
 8002c38:	3714      	adds	r7, #20
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bc80      	pop	{r7}
 8002c3e:	4770      	bx	lr
 8002c40:	20000740 	.word	0x20000740

08002c44 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002c54:	f001 fb22 	bl	800429c <vPortEnterCritical>
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c5e:	b25b      	sxtb	r3, r3
 8002c60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c64:	d103      	bne.n	8002c6e <vQueueWaitForMessageRestricted+0x2a>
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c74:	b25b      	sxtb	r3, r3
 8002c76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c7a:	d103      	bne.n	8002c84 <vQueueWaitForMessageRestricted+0x40>
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c84:	f001 fb3a 	bl	80042fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d106      	bne.n	8002c9e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	3324      	adds	r3, #36	; 0x24
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	68b9      	ldr	r1, [r7, #8]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f000 fc31 	bl	8003500 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002c9e:	6978      	ldr	r0, [r7, #20]
 8002ca0:	f7ff ff28 	bl	8002af4 <prvUnlockQueue>
	}
 8002ca4:	bf00      	nop
 8002ca6:	3718      	adds	r7, #24
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b08e      	sub	sp, #56	; 0x38
 8002cb0:	af04      	add	r7, sp, #16
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
 8002cb8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d10a      	bne.n	8002cd6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc4:	f383 8811 	msr	BASEPRI, r3
 8002cc8:	f3bf 8f6f 	isb	sy
 8002ccc:	f3bf 8f4f 	dsb	sy
 8002cd0:	623b      	str	r3, [r7, #32]
}
 8002cd2:	bf00      	nop
 8002cd4:	e7fe      	b.n	8002cd4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d10a      	bne.n	8002cf2 <xTaskCreateStatic+0x46>
	__asm volatile
 8002cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce0:	f383 8811 	msr	BASEPRI, r3
 8002ce4:	f3bf 8f6f 	isb	sy
 8002ce8:	f3bf 8f4f 	dsb	sy
 8002cec:	61fb      	str	r3, [r7, #28]
}
 8002cee:	bf00      	nop
 8002cf0:	e7fe      	b.n	8002cf0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002cf2:	235c      	movs	r3, #92	; 0x5c
 8002cf4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	2b5c      	cmp	r3, #92	; 0x5c
 8002cfa:	d00a      	beq.n	8002d12 <xTaskCreateStatic+0x66>
	__asm volatile
 8002cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d00:	f383 8811 	msr	BASEPRI, r3
 8002d04:	f3bf 8f6f 	isb	sy
 8002d08:	f3bf 8f4f 	dsb	sy
 8002d0c:	61bb      	str	r3, [r7, #24]
}
 8002d0e:	bf00      	nop
 8002d10:	e7fe      	b.n	8002d10 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d01e      	beq.n	8002d56 <xTaskCreateStatic+0xaa>
 8002d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d01b      	beq.n	8002d56 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d20:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d26:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002d30:	2300      	movs	r3, #0
 8002d32:	9303      	str	r3, [sp, #12]
 8002d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d36:	9302      	str	r3, [sp, #8]
 8002d38:	f107 0314 	add.w	r3, r7, #20
 8002d3c:	9301      	str	r3, [sp, #4]
 8002d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	68b9      	ldr	r1, [r7, #8]
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f000 f850 	bl	8002dee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d50:	f000 f8d4 	bl	8002efc <prvAddNewTaskToReadyList>
 8002d54:	e001      	b.n	8002d5a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002d56:	2300      	movs	r3, #0
 8002d58:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002d5a:	697b      	ldr	r3, [r7, #20]
	}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3728      	adds	r7, #40	; 0x28
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b08c      	sub	sp, #48	; 0x30
 8002d68:	af04      	add	r7, sp, #16
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	603b      	str	r3, [r7, #0]
 8002d70:	4613      	mov	r3, r2
 8002d72:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d74:	88fb      	ldrh	r3, [r7, #6]
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f001 fb8f 	bl	800449c <pvPortMalloc>
 8002d7e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00e      	beq.n	8002da4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002d86:	205c      	movs	r0, #92	; 0x5c
 8002d88:	f001 fb88 	bl	800449c <pvPortMalloc>
 8002d8c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d003      	beq.n	8002d9c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	697a      	ldr	r2, [r7, #20]
 8002d98:	631a      	str	r2, [r3, #48]	; 0x30
 8002d9a:	e005      	b.n	8002da8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002d9c:	6978      	ldr	r0, [r7, #20]
 8002d9e:	f001 fc41 	bl	8004624 <vPortFree>
 8002da2:	e001      	b.n	8002da8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002da4:	2300      	movs	r3, #0
 8002da6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d017      	beq.n	8002dde <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002db6:	88fa      	ldrh	r2, [r7, #6]
 8002db8:	2300      	movs	r3, #0
 8002dba:	9303      	str	r3, [sp, #12]
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	9302      	str	r3, [sp, #8]
 8002dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc2:	9301      	str	r3, [sp, #4]
 8002dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	68b9      	ldr	r1, [r7, #8]
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f000 f80e 	bl	8002dee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002dd2:	69f8      	ldr	r0, [r7, #28]
 8002dd4:	f000 f892 	bl	8002efc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	61bb      	str	r3, [r7, #24]
 8002ddc:	e002      	b.n	8002de4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002dde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002de2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002de4:	69bb      	ldr	r3, [r7, #24]
	}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3720      	adds	r7, #32
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b088      	sub	sp, #32
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	60f8      	str	r0, [r7, #12]
 8002df6:	60b9      	str	r1, [r7, #8]
 8002df8:	607a      	str	r2, [r7, #4]
 8002dfa:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfe:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	461a      	mov	r2, r3
 8002e06:	21a5      	movs	r1, #165	; 0xa5
 8002e08:	f001 fd52 	bl	80048b0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e16:	3b01      	subs	r3, #1
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4413      	add	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	f023 0307 	bic.w	r3, r3, #7
 8002e24:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00a      	beq.n	8002e46 <prvInitialiseNewTask+0x58>
	__asm volatile
 8002e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e34:	f383 8811 	msr	BASEPRI, r3
 8002e38:	f3bf 8f6f 	isb	sy
 8002e3c:	f3bf 8f4f 	dsb	sy
 8002e40:	617b      	str	r3, [r7, #20]
}
 8002e42:	bf00      	nop
 8002e44:	e7fe      	b.n	8002e44 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e46:	2300      	movs	r3, #0
 8002e48:	61fb      	str	r3, [r7, #28]
 8002e4a:	e012      	b.n	8002e72 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002e4c:	68ba      	ldr	r2, [r7, #8]
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	4413      	add	r3, r2
 8002e52:	7819      	ldrb	r1, [r3, #0]
 8002e54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	4413      	add	r3, r2
 8002e5a:	3334      	adds	r3, #52	; 0x34
 8002e5c:	460a      	mov	r2, r1
 8002e5e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002e60:	68ba      	ldr	r2, [r7, #8]
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	4413      	add	r3, r2
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d006      	beq.n	8002e7a <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	61fb      	str	r3, [r7, #28]
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	2b0f      	cmp	r3, #15
 8002e76:	d9e9      	bls.n	8002e4c <prvInitialiseNewTask+0x5e>
 8002e78:	e000      	b.n	8002e7c <prvInitialiseNewTask+0x8e>
		{
			break;
 8002e7a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e86:	2b37      	cmp	r3, #55	; 0x37
 8002e88:	d901      	bls.n	8002e8e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002e8a:	2337      	movs	r3, #55	; 0x37
 8002e8c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e92:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e98:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea2:	3304      	adds	r3, #4
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff f98c 	bl	80021c2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eac:	3318      	adds	r3, #24
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7ff f987 	bl	80021c2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eb8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ebc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ec8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ecc:	2200      	movs	r2, #0
 8002ece:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	68f9      	ldr	r1, [r7, #12]
 8002edc:	69b8      	ldr	r0, [r7, #24]
 8002ede:	f001 f8ef 	bl	80040c0 <pxPortInitialiseStack>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d002      	beq.n	8002ef4 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ef2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ef4:	bf00      	nop
 8002ef6:	3720      	adds	r7, #32
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002f04:	f001 f9ca 	bl	800429c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002f08:	4b2d      	ldr	r3, [pc, #180]	; (8002fc0 <prvAddNewTaskToReadyList+0xc4>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	4a2c      	ldr	r2, [pc, #176]	; (8002fc0 <prvAddNewTaskToReadyList+0xc4>)
 8002f10:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002f12:	4b2c      	ldr	r3, [pc, #176]	; (8002fc4 <prvAddNewTaskToReadyList+0xc8>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d109      	bne.n	8002f2e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002f1a:	4a2a      	ldr	r2, [pc, #168]	; (8002fc4 <prvAddNewTaskToReadyList+0xc8>)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f20:	4b27      	ldr	r3, [pc, #156]	; (8002fc0 <prvAddNewTaskToReadyList+0xc4>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d110      	bne.n	8002f4a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002f28:	f000 fc16 	bl	8003758 <prvInitialiseTaskLists>
 8002f2c:	e00d      	b.n	8002f4a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002f2e:	4b26      	ldr	r3, [pc, #152]	; (8002fc8 <prvAddNewTaskToReadyList+0xcc>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d109      	bne.n	8002f4a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002f36:	4b23      	ldr	r3, [pc, #140]	; (8002fc4 <prvAddNewTaskToReadyList+0xc8>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d802      	bhi.n	8002f4a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002f44:	4a1f      	ldr	r2, [pc, #124]	; (8002fc4 <prvAddNewTaskToReadyList+0xc8>)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002f4a:	4b20      	ldr	r3, [pc, #128]	; (8002fcc <prvAddNewTaskToReadyList+0xd0>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	3301      	adds	r3, #1
 8002f50:	4a1e      	ldr	r2, [pc, #120]	; (8002fcc <prvAddNewTaskToReadyList+0xd0>)
 8002f52:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002f54:	4b1d      	ldr	r3, [pc, #116]	; (8002fcc <prvAddNewTaskToReadyList+0xd0>)
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f60:	4b1b      	ldr	r3, [pc, #108]	; (8002fd0 <prvAddNewTaskToReadyList+0xd4>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d903      	bls.n	8002f70 <prvAddNewTaskToReadyList+0x74>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6c:	4a18      	ldr	r2, [pc, #96]	; (8002fd0 <prvAddNewTaskToReadyList+0xd4>)
 8002f6e:	6013      	str	r3, [r2, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f74:	4613      	mov	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	4a15      	ldr	r2, [pc, #84]	; (8002fd4 <prvAddNewTaskToReadyList+0xd8>)
 8002f7e:	441a      	add	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	3304      	adds	r3, #4
 8002f84:	4619      	mov	r1, r3
 8002f86:	4610      	mov	r0, r2
 8002f88:	f7ff f927 	bl	80021da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002f8c:	f001 f9b6 	bl	80042fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002f90:	4b0d      	ldr	r3, [pc, #52]	; (8002fc8 <prvAddNewTaskToReadyList+0xcc>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00e      	beq.n	8002fb6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002f98:	4b0a      	ldr	r3, [pc, #40]	; (8002fc4 <prvAddNewTaskToReadyList+0xc8>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d207      	bcs.n	8002fb6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002fa6:	4b0c      	ldr	r3, [pc, #48]	; (8002fd8 <prvAddNewTaskToReadyList+0xdc>)
 8002fa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fac:	601a      	str	r2, [r3, #0]
 8002fae:	f3bf 8f4f 	dsb	sy
 8002fb2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002fb6:	bf00      	nop
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	20000c54 	.word	0x20000c54
 8002fc4:	20000780 	.word	0x20000780
 8002fc8:	20000c60 	.word	0x20000c60
 8002fcc:	20000c70 	.word	0x20000c70
 8002fd0:	20000c5c 	.word	0x20000c5c
 8002fd4:	20000784 	.word	0x20000784
 8002fd8:	e000ed04 	.word	0xe000ed04

08002fdc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d017      	beq.n	800301e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002fee:	4b13      	ldr	r3, [pc, #76]	; (800303c <vTaskDelay+0x60>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00a      	beq.n	800300c <vTaskDelay+0x30>
	__asm volatile
 8002ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ffa:	f383 8811 	msr	BASEPRI, r3
 8002ffe:	f3bf 8f6f 	isb	sy
 8003002:	f3bf 8f4f 	dsb	sy
 8003006:	60bb      	str	r3, [r7, #8]
}
 8003008:	bf00      	nop
 800300a:	e7fe      	b.n	800300a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800300c:	f000 f880 	bl	8003110 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003010:	2100      	movs	r1, #0
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 fcee 	bl	80039f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003018:	f000 f888 	bl	800312c <xTaskResumeAll>
 800301c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d107      	bne.n	8003034 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003024:	4b06      	ldr	r3, [pc, #24]	; (8003040 <vTaskDelay+0x64>)
 8003026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	f3bf 8f4f 	dsb	sy
 8003030:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003034:	bf00      	nop
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	20000c7c 	.word	0x20000c7c
 8003040:	e000ed04 	.word	0xe000ed04

08003044 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b08a      	sub	sp, #40	; 0x28
 8003048:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800304a:	2300      	movs	r3, #0
 800304c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800304e:	2300      	movs	r3, #0
 8003050:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003052:	463a      	mov	r2, r7
 8003054:	1d39      	adds	r1, r7, #4
 8003056:	f107 0308 	add.w	r3, r7, #8
 800305a:	4618      	mov	r0, r3
 800305c:	f7ff f860 	bl	8002120 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003060:	6839      	ldr	r1, [r7, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	68ba      	ldr	r2, [r7, #8]
 8003066:	9202      	str	r2, [sp, #8]
 8003068:	9301      	str	r3, [sp, #4]
 800306a:	2300      	movs	r3, #0
 800306c:	9300      	str	r3, [sp, #0]
 800306e:	2300      	movs	r3, #0
 8003070:	460a      	mov	r2, r1
 8003072:	4921      	ldr	r1, [pc, #132]	; (80030f8 <vTaskStartScheduler+0xb4>)
 8003074:	4821      	ldr	r0, [pc, #132]	; (80030fc <vTaskStartScheduler+0xb8>)
 8003076:	f7ff fe19 	bl	8002cac <xTaskCreateStatic>
 800307a:	4603      	mov	r3, r0
 800307c:	4a20      	ldr	r2, [pc, #128]	; (8003100 <vTaskStartScheduler+0xbc>)
 800307e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003080:	4b1f      	ldr	r3, [pc, #124]	; (8003100 <vTaskStartScheduler+0xbc>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d002      	beq.n	800308e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003088:	2301      	movs	r3, #1
 800308a:	617b      	str	r3, [r7, #20]
 800308c:	e001      	b.n	8003092 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800308e:	2300      	movs	r3, #0
 8003090:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d102      	bne.n	800309e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003098:	f000 fd00 	bl	8003a9c <xTimerCreateTimerTask>
 800309c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d116      	bne.n	80030d2 <vTaskStartScheduler+0x8e>
	__asm volatile
 80030a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a8:	f383 8811 	msr	BASEPRI, r3
 80030ac:	f3bf 8f6f 	isb	sy
 80030b0:	f3bf 8f4f 	dsb	sy
 80030b4:	613b      	str	r3, [r7, #16]
}
 80030b6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80030b8:	4b12      	ldr	r3, [pc, #72]	; (8003104 <vTaskStartScheduler+0xc0>)
 80030ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030be:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80030c0:	4b11      	ldr	r3, [pc, #68]	; (8003108 <vTaskStartScheduler+0xc4>)
 80030c2:	2201      	movs	r2, #1
 80030c4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80030c6:	4b11      	ldr	r3, [pc, #68]	; (800310c <vTaskStartScheduler+0xc8>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80030cc:	f001 f874 	bl	80041b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80030d0:	e00e      	b.n	80030f0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030d8:	d10a      	bne.n	80030f0 <vTaskStartScheduler+0xac>
	__asm volatile
 80030da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030de:	f383 8811 	msr	BASEPRI, r3
 80030e2:	f3bf 8f6f 	isb	sy
 80030e6:	f3bf 8f4f 	dsb	sy
 80030ea:	60fb      	str	r3, [r7, #12]
}
 80030ec:	bf00      	nop
 80030ee:	e7fe      	b.n	80030ee <vTaskStartScheduler+0xaa>
}
 80030f0:	bf00      	nop
 80030f2:	3718      	adds	r7, #24
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	08004904 	.word	0x08004904
 80030fc:	08003729 	.word	0x08003729
 8003100:	20000c78 	.word	0x20000c78
 8003104:	20000c74 	.word	0x20000c74
 8003108:	20000c60 	.word	0x20000c60
 800310c:	20000c58 	.word	0x20000c58

08003110 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003114:	4b04      	ldr	r3, [pc, #16]	; (8003128 <vTaskSuspendAll+0x18>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	3301      	adds	r3, #1
 800311a:	4a03      	ldr	r2, [pc, #12]	; (8003128 <vTaskSuspendAll+0x18>)
 800311c:	6013      	str	r3, [r2, #0]
}
 800311e:	bf00      	nop
 8003120:	46bd      	mov	sp, r7
 8003122:	bc80      	pop	{r7}
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	20000c7c 	.word	0x20000c7c

0800312c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003132:	2300      	movs	r3, #0
 8003134:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003136:	2300      	movs	r3, #0
 8003138:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800313a:	4b42      	ldr	r3, [pc, #264]	; (8003244 <xTaskResumeAll+0x118>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10a      	bne.n	8003158 <xTaskResumeAll+0x2c>
	__asm volatile
 8003142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003146:	f383 8811 	msr	BASEPRI, r3
 800314a:	f3bf 8f6f 	isb	sy
 800314e:	f3bf 8f4f 	dsb	sy
 8003152:	603b      	str	r3, [r7, #0]
}
 8003154:	bf00      	nop
 8003156:	e7fe      	b.n	8003156 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003158:	f001 f8a0 	bl	800429c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800315c:	4b39      	ldr	r3, [pc, #228]	; (8003244 <xTaskResumeAll+0x118>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	3b01      	subs	r3, #1
 8003162:	4a38      	ldr	r2, [pc, #224]	; (8003244 <xTaskResumeAll+0x118>)
 8003164:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003166:	4b37      	ldr	r3, [pc, #220]	; (8003244 <xTaskResumeAll+0x118>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d162      	bne.n	8003234 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800316e:	4b36      	ldr	r3, [pc, #216]	; (8003248 <xTaskResumeAll+0x11c>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d05e      	beq.n	8003234 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003176:	e02f      	b.n	80031d8 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003178:	4b34      	ldr	r3, [pc, #208]	; (800324c <xTaskResumeAll+0x120>)
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	3318      	adds	r3, #24
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff f883 	bl	8002290 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	3304      	adds	r3, #4
 800318e:	4618      	mov	r0, r3
 8003190:	f7ff f87e 	bl	8002290 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003198:	4b2d      	ldr	r3, [pc, #180]	; (8003250 <xTaskResumeAll+0x124>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	429a      	cmp	r2, r3
 800319e:	d903      	bls.n	80031a8 <xTaskResumeAll+0x7c>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a4:	4a2a      	ldr	r2, [pc, #168]	; (8003250 <xTaskResumeAll+0x124>)
 80031a6:	6013      	str	r3, [r2, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ac:	4613      	mov	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4413      	add	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4a27      	ldr	r2, [pc, #156]	; (8003254 <xTaskResumeAll+0x128>)
 80031b6:	441a      	add	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	3304      	adds	r3, #4
 80031bc:	4619      	mov	r1, r3
 80031be:	4610      	mov	r0, r2
 80031c0:	f7ff f80b 	bl	80021da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c8:	4b23      	ldr	r3, [pc, #140]	; (8003258 <xTaskResumeAll+0x12c>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d302      	bcc.n	80031d8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80031d2:	4b22      	ldr	r3, [pc, #136]	; (800325c <xTaskResumeAll+0x130>)
 80031d4:	2201      	movs	r2, #1
 80031d6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031d8:	4b1c      	ldr	r3, [pc, #112]	; (800324c <xTaskResumeAll+0x120>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1cb      	bne.n	8003178 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80031e6:	f000 fb55 	bl	8003894 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80031ea:	4b1d      	ldr	r3, [pc, #116]	; (8003260 <xTaskResumeAll+0x134>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d010      	beq.n	8003218 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80031f6:	f000 f845 	bl	8003284 <xTaskIncrementTick>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d002      	beq.n	8003206 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003200:	4b16      	ldr	r3, [pc, #88]	; (800325c <xTaskResumeAll+0x130>)
 8003202:	2201      	movs	r2, #1
 8003204:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	3b01      	subs	r3, #1
 800320a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1f1      	bne.n	80031f6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003212:	4b13      	ldr	r3, [pc, #76]	; (8003260 <xTaskResumeAll+0x134>)
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003218:	4b10      	ldr	r3, [pc, #64]	; (800325c <xTaskResumeAll+0x130>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d009      	beq.n	8003234 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003220:	2301      	movs	r3, #1
 8003222:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003224:	4b0f      	ldr	r3, [pc, #60]	; (8003264 <xTaskResumeAll+0x138>)
 8003226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	f3bf 8f4f 	dsb	sy
 8003230:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003234:	f001 f862 	bl	80042fc <vPortExitCritical>

	return xAlreadyYielded;
 8003238:	68bb      	ldr	r3, [r7, #8]
}
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	20000c7c 	.word	0x20000c7c
 8003248:	20000c54 	.word	0x20000c54
 800324c:	20000c14 	.word	0x20000c14
 8003250:	20000c5c 	.word	0x20000c5c
 8003254:	20000784 	.word	0x20000784
 8003258:	20000780 	.word	0x20000780
 800325c:	20000c68 	.word	0x20000c68
 8003260:	20000c64 	.word	0x20000c64
 8003264:	e000ed04 	.word	0xe000ed04

08003268 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800326e:	4b04      	ldr	r3, [pc, #16]	; (8003280 <xTaskGetTickCount+0x18>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003274:	687b      	ldr	r3, [r7, #4]
}
 8003276:	4618      	mov	r0, r3
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr
 8003280:	20000c58 	.word	0x20000c58

08003284 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800328a:	2300      	movs	r3, #0
 800328c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800328e:	4b51      	ldr	r3, [pc, #324]	; (80033d4 <xTaskIncrementTick+0x150>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	f040 808e 	bne.w	80033b4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003298:	4b4f      	ldr	r3, [pc, #316]	; (80033d8 <xTaskIncrementTick+0x154>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	3301      	adds	r3, #1
 800329e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80032a0:	4a4d      	ldr	r2, [pc, #308]	; (80033d8 <xTaskIncrementTick+0x154>)
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d120      	bne.n	80032ee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80032ac:	4b4b      	ldr	r3, [pc, #300]	; (80033dc <xTaskIncrementTick+0x158>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00a      	beq.n	80032cc <xTaskIncrementTick+0x48>
	__asm volatile
 80032b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ba:	f383 8811 	msr	BASEPRI, r3
 80032be:	f3bf 8f6f 	isb	sy
 80032c2:	f3bf 8f4f 	dsb	sy
 80032c6:	603b      	str	r3, [r7, #0]
}
 80032c8:	bf00      	nop
 80032ca:	e7fe      	b.n	80032ca <xTaskIncrementTick+0x46>
 80032cc:	4b43      	ldr	r3, [pc, #268]	; (80033dc <xTaskIncrementTick+0x158>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	60fb      	str	r3, [r7, #12]
 80032d2:	4b43      	ldr	r3, [pc, #268]	; (80033e0 <xTaskIncrementTick+0x15c>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a41      	ldr	r2, [pc, #260]	; (80033dc <xTaskIncrementTick+0x158>)
 80032d8:	6013      	str	r3, [r2, #0]
 80032da:	4a41      	ldr	r2, [pc, #260]	; (80033e0 <xTaskIncrementTick+0x15c>)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6013      	str	r3, [r2, #0]
 80032e0:	4b40      	ldr	r3, [pc, #256]	; (80033e4 <xTaskIncrementTick+0x160>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	3301      	adds	r3, #1
 80032e6:	4a3f      	ldr	r2, [pc, #252]	; (80033e4 <xTaskIncrementTick+0x160>)
 80032e8:	6013      	str	r3, [r2, #0]
 80032ea:	f000 fad3 	bl	8003894 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80032ee:	4b3e      	ldr	r3, [pc, #248]	; (80033e8 <xTaskIncrementTick+0x164>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d34e      	bcc.n	8003396 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032f8:	4b38      	ldr	r3, [pc, #224]	; (80033dc <xTaskIncrementTick+0x158>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <xTaskIncrementTick+0x82>
 8003302:	2301      	movs	r3, #1
 8003304:	e000      	b.n	8003308 <xTaskIncrementTick+0x84>
 8003306:	2300      	movs	r3, #0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d004      	beq.n	8003316 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800330c:	4b36      	ldr	r3, [pc, #216]	; (80033e8 <xTaskIncrementTick+0x164>)
 800330e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003312:	601a      	str	r2, [r3, #0]
					break;
 8003314:	e03f      	b.n	8003396 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003316:	4b31      	ldr	r3, [pc, #196]	; (80033dc <xTaskIncrementTick+0x158>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	429a      	cmp	r2, r3
 800332c:	d203      	bcs.n	8003336 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800332e:	4a2e      	ldr	r2, [pc, #184]	; (80033e8 <xTaskIncrementTick+0x164>)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6013      	str	r3, [r2, #0]
						break;
 8003334:	e02f      	b.n	8003396 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	3304      	adds	r3, #4
 800333a:	4618      	mov	r0, r3
 800333c:	f7fe ffa8 	bl	8002290 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003344:	2b00      	cmp	r3, #0
 8003346:	d004      	beq.n	8003352 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	3318      	adds	r3, #24
 800334c:	4618      	mov	r0, r3
 800334e:	f7fe ff9f 	bl	8002290 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003356:	4b25      	ldr	r3, [pc, #148]	; (80033ec <xTaskIncrementTick+0x168>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	429a      	cmp	r2, r3
 800335c:	d903      	bls.n	8003366 <xTaskIncrementTick+0xe2>
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003362:	4a22      	ldr	r2, [pc, #136]	; (80033ec <xTaskIncrementTick+0x168>)
 8003364:	6013      	str	r3, [r2, #0]
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800336a:	4613      	mov	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4413      	add	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4a1f      	ldr	r2, [pc, #124]	; (80033f0 <xTaskIncrementTick+0x16c>)
 8003374:	441a      	add	r2, r3
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	3304      	adds	r3, #4
 800337a:	4619      	mov	r1, r3
 800337c:	4610      	mov	r0, r2
 800337e:	f7fe ff2c 	bl	80021da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003386:	4b1b      	ldr	r3, [pc, #108]	; (80033f4 <xTaskIncrementTick+0x170>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338c:	429a      	cmp	r2, r3
 800338e:	d3b3      	bcc.n	80032f8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003390:	2301      	movs	r3, #1
 8003392:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003394:	e7b0      	b.n	80032f8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003396:	4b17      	ldr	r3, [pc, #92]	; (80033f4 <xTaskIncrementTick+0x170>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800339c:	4914      	ldr	r1, [pc, #80]	; (80033f0 <xTaskIncrementTick+0x16c>)
 800339e:	4613      	mov	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	4413      	add	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	440b      	add	r3, r1
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d907      	bls.n	80033be <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80033ae:	2301      	movs	r3, #1
 80033b0:	617b      	str	r3, [r7, #20]
 80033b2:	e004      	b.n	80033be <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80033b4:	4b10      	ldr	r3, [pc, #64]	; (80033f8 <xTaskIncrementTick+0x174>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	3301      	adds	r3, #1
 80033ba:	4a0f      	ldr	r2, [pc, #60]	; (80033f8 <xTaskIncrementTick+0x174>)
 80033bc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80033be:	4b0f      	ldr	r3, [pc, #60]	; (80033fc <xTaskIncrementTick+0x178>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80033c6:	2301      	movs	r3, #1
 80033c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80033ca:	697b      	ldr	r3, [r7, #20]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3718      	adds	r7, #24
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	20000c7c 	.word	0x20000c7c
 80033d8:	20000c58 	.word	0x20000c58
 80033dc:	20000c0c 	.word	0x20000c0c
 80033e0:	20000c10 	.word	0x20000c10
 80033e4:	20000c6c 	.word	0x20000c6c
 80033e8:	20000c74 	.word	0x20000c74
 80033ec:	20000c5c 	.word	0x20000c5c
 80033f0:	20000784 	.word	0x20000784
 80033f4:	20000780 	.word	0x20000780
 80033f8:	20000c64 	.word	0x20000c64
 80033fc:	20000c68 	.word	0x20000c68

08003400 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003400:	b480      	push	{r7}
 8003402:	b085      	sub	sp, #20
 8003404:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003406:	4b27      	ldr	r3, [pc, #156]	; (80034a4 <vTaskSwitchContext+0xa4>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800340e:	4b26      	ldr	r3, [pc, #152]	; (80034a8 <vTaskSwitchContext+0xa8>)
 8003410:	2201      	movs	r2, #1
 8003412:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003414:	e041      	b.n	800349a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003416:	4b24      	ldr	r3, [pc, #144]	; (80034a8 <vTaskSwitchContext+0xa8>)
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800341c:	4b23      	ldr	r3, [pc, #140]	; (80034ac <vTaskSwitchContext+0xac>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	60fb      	str	r3, [r7, #12]
 8003422:	e010      	b.n	8003446 <vTaskSwitchContext+0x46>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10a      	bne.n	8003440 <vTaskSwitchContext+0x40>
	__asm volatile
 800342a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800342e:	f383 8811 	msr	BASEPRI, r3
 8003432:	f3bf 8f6f 	isb	sy
 8003436:	f3bf 8f4f 	dsb	sy
 800343a:	607b      	str	r3, [r7, #4]
}
 800343c:	bf00      	nop
 800343e:	e7fe      	b.n	800343e <vTaskSwitchContext+0x3e>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	3b01      	subs	r3, #1
 8003444:	60fb      	str	r3, [r7, #12]
 8003446:	491a      	ldr	r1, [pc, #104]	; (80034b0 <vTaskSwitchContext+0xb0>)
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	4613      	mov	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	4413      	add	r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	440b      	add	r3, r1
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d0e4      	beq.n	8003424 <vTaskSwitchContext+0x24>
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	4613      	mov	r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	4413      	add	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4a12      	ldr	r2, [pc, #72]	; (80034b0 <vTaskSwitchContext+0xb0>)
 8003466:	4413      	add	r3, r2
 8003468:	60bb      	str	r3, [r7, #8]
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	605a      	str	r2, [r3, #4]
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	3308      	adds	r3, #8
 800347c:	429a      	cmp	r2, r3
 800347e:	d104      	bne.n	800348a <vTaskSwitchContext+0x8a>
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	685a      	ldr	r2, [r3, #4]
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	605a      	str	r2, [r3, #4]
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	4a08      	ldr	r2, [pc, #32]	; (80034b4 <vTaskSwitchContext+0xb4>)
 8003492:	6013      	str	r3, [r2, #0]
 8003494:	4a05      	ldr	r2, [pc, #20]	; (80034ac <vTaskSwitchContext+0xac>)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6013      	str	r3, [r2, #0]
}
 800349a:	bf00      	nop
 800349c:	3714      	adds	r7, #20
 800349e:	46bd      	mov	sp, r7
 80034a0:	bc80      	pop	{r7}
 80034a2:	4770      	bx	lr
 80034a4:	20000c7c 	.word	0x20000c7c
 80034a8:	20000c68 	.word	0x20000c68
 80034ac:	20000c5c 	.word	0x20000c5c
 80034b0:	20000784 	.word	0x20000784
 80034b4:	20000780 	.word	0x20000780

080034b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10a      	bne.n	80034de <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80034c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034cc:	f383 8811 	msr	BASEPRI, r3
 80034d0:	f3bf 8f6f 	isb	sy
 80034d4:	f3bf 8f4f 	dsb	sy
 80034d8:	60fb      	str	r3, [r7, #12]
}
 80034da:	bf00      	nop
 80034dc:	e7fe      	b.n	80034dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80034de:	4b07      	ldr	r3, [pc, #28]	; (80034fc <vTaskPlaceOnEventList+0x44>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	3318      	adds	r3, #24
 80034e4:	4619      	mov	r1, r3
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7fe fe9a 	bl	8002220 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80034ec:	2101      	movs	r1, #1
 80034ee:	6838      	ldr	r0, [r7, #0]
 80034f0:	f000 fa80 	bl	80039f4 <prvAddCurrentTaskToDelayedList>
}
 80034f4:	bf00      	nop
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	20000780 	.word	0x20000780

08003500 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10a      	bne.n	8003528 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003516:	f383 8811 	msr	BASEPRI, r3
 800351a:	f3bf 8f6f 	isb	sy
 800351e:	f3bf 8f4f 	dsb	sy
 8003522:	617b      	str	r3, [r7, #20]
}
 8003524:	bf00      	nop
 8003526:	e7fe      	b.n	8003526 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003528:	4b0a      	ldr	r3, [pc, #40]	; (8003554 <vTaskPlaceOnEventListRestricted+0x54>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	3318      	adds	r3, #24
 800352e:	4619      	mov	r1, r3
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f7fe fe52 	bl	80021da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d002      	beq.n	8003542 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800353c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003540:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003542:	6879      	ldr	r1, [r7, #4]
 8003544:	68b8      	ldr	r0, [r7, #8]
 8003546:	f000 fa55 	bl	80039f4 <prvAddCurrentTaskToDelayedList>
	}
 800354a:	bf00      	nop
 800354c:	3718      	adds	r7, #24
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	20000780 	.word	0x20000780

08003558 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10a      	bne.n	8003584 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800356e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003572:	f383 8811 	msr	BASEPRI, r3
 8003576:	f3bf 8f6f 	isb	sy
 800357a:	f3bf 8f4f 	dsb	sy
 800357e:	60fb      	str	r3, [r7, #12]
}
 8003580:	bf00      	nop
 8003582:	e7fe      	b.n	8003582 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	3318      	adds	r3, #24
 8003588:	4618      	mov	r0, r3
 800358a:	f7fe fe81 	bl	8002290 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800358e:	4b1e      	ldr	r3, [pc, #120]	; (8003608 <xTaskRemoveFromEventList+0xb0>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d11d      	bne.n	80035d2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	3304      	adds	r3, #4
 800359a:	4618      	mov	r0, r3
 800359c:	f7fe fe78 	bl	8002290 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a4:	4b19      	ldr	r3, [pc, #100]	; (800360c <xTaskRemoveFromEventList+0xb4>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d903      	bls.n	80035b4 <xTaskRemoveFromEventList+0x5c>
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b0:	4a16      	ldr	r2, [pc, #88]	; (800360c <xTaskRemoveFromEventList+0xb4>)
 80035b2:	6013      	str	r3, [r2, #0]
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b8:	4613      	mov	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4413      	add	r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4a13      	ldr	r2, [pc, #76]	; (8003610 <xTaskRemoveFromEventList+0xb8>)
 80035c2:	441a      	add	r2, r3
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	3304      	adds	r3, #4
 80035c8:	4619      	mov	r1, r3
 80035ca:	4610      	mov	r0, r2
 80035cc:	f7fe fe05 	bl	80021da <vListInsertEnd>
 80035d0:	e005      	b.n	80035de <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	3318      	adds	r3, #24
 80035d6:	4619      	mov	r1, r3
 80035d8:	480e      	ldr	r0, [pc, #56]	; (8003614 <xTaskRemoveFromEventList+0xbc>)
 80035da:	f7fe fdfe 	bl	80021da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035e2:	4b0d      	ldr	r3, [pc, #52]	; (8003618 <xTaskRemoveFromEventList+0xc0>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d905      	bls.n	80035f8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80035ec:	2301      	movs	r3, #1
 80035ee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80035f0:	4b0a      	ldr	r3, [pc, #40]	; (800361c <xTaskRemoveFromEventList+0xc4>)
 80035f2:	2201      	movs	r2, #1
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	e001      	b.n	80035fc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80035f8:	2300      	movs	r3, #0
 80035fa:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80035fc:	697b      	ldr	r3, [r7, #20]
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3718      	adds	r7, #24
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	20000c7c 	.word	0x20000c7c
 800360c:	20000c5c 	.word	0x20000c5c
 8003610:	20000784 	.word	0x20000784
 8003614:	20000c14 	.word	0x20000c14
 8003618:	20000780 	.word	0x20000780
 800361c:	20000c68 	.word	0x20000c68

08003620 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003628:	4b06      	ldr	r3, [pc, #24]	; (8003644 <vTaskInternalSetTimeOutState+0x24>)
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003630:	4b05      	ldr	r3, [pc, #20]	; (8003648 <vTaskInternalSetTimeOutState+0x28>)
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	605a      	str	r2, [r3, #4]
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	bc80      	pop	{r7}
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	20000c6c 	.word	0x20000c6c
 8003648:	20000c58 	.word	0x20000c58

0800364c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b088      	sub	sp, #32
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10a      	bne.n	8003672 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800365c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003660:	f383 8811 	msr	BASEPRI, r3
 8003664:	f3bf 8f6f 	isb	sy
 8003668:	f3bf 8f4f 	dsb	sy
 800366c:	613b      	str	r3, [r7, #16]
}
 800366e:	bf00      	nop
 8003670:	e7fe      	b.n	8003670 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10a      	bne.n	800368e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800367c:	f383 8811 	msr	BASEPRI, r3
 8003680:	f3bf 8f6f 	isb	sy
 8003684:	f3bf 8f4f 	dsb	sy
 8003688:	60fb      	str	r3, [r7, #12]
}
 800368a:	bf00      	nop
 800368c:	e7fe      	b.n	800368c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800368e:	f000 fe05 	bl	800429c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003692:	4b1d      	ldr	r3, [pc, #116]	; (8003708 <xTaskCheckForTimeOut+0xbc>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036aa:	d102      	bne.n	80036b2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80036ac:	2300      	movs	r3, #0
 80036ae:	61fb      	str	r3, [r7, #28]
 80036b0:	e023      	b.n	80036fa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	4b15      	ldr	r3, [pc, #84]	; (800370c <xTaskCheckForTimeOut+0xc0>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d007      	beq.n	80036ce <xTaskCheckForTimeOut+0x82>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d302      	bcc.n	80036ce <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80036c8:	2301      	movs	r3, #1
 80036ca:	61fb      	str	r3, [r7, #28]
 80036cc:	e015      	b.n	80036fa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d20b      	bcs.n	80036f0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	1ad2      	subs	r2, r2, r3
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f7ff ff9b 	bl	8003620 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80036ea:	2300      	movs	r3, #0
 80036ec:	61fb      	str	r3, [r7, #28]
 80036ee:	e004      	b.n	80036fa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	2200      	movs	r2, #0
 80036f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80036f6:	2301      	movs	r3, #1
 80036f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80036fa:	f000 fdff 	bl	80042fc <vPortExitCritical>

	return xReturn;
 80036fe:	69fb      	ldr	r3, [r7, #28]
}
 8003700:	4618      	mov	r0, r3
 8003702:	3720      	adds	r7, #32
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	20000c58 	.word	0x20000c58
 800370c:	20000c6c 	.word	0x20000c6c

08003710 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003714:	4b03      	ldr	r3, [pc, #12]	; (8003724 <vTaskMissedYield+0x14>)
 8003716:	2201      	movs	r2, #1
 8003718:	601a      	str	r2, [r3, #0]
}
 800371a:	bf00      	nop
 800371c:	46bd      	mov	sp, r7
 800371e:	bc80      	pop	{r7}
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	20000c68 	.word	0x20000c68

08003728 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003730:	f000 f852 	bl	80037d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003734:	4b06      	ldr	r3, [pc, #24]	; (8003750 <prvIdleTask+0x28>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d9f9      	bls.n	8003730 <prvIdleTask+0x8>
			{
				taskYIELD();
 800373c:	4b05      	ldr	r3, [pc, #20]	; (8003754 <prvIdleTask+0x2c>)
 800373e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	f3bf 8f4f 	dsb	sy
 8003748:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800374c:	e7f0      	b.n	8003730 <prvIdleTask+0x8>
 800374e:	bf00      	nop
 8003750:	20000784 	.word	0x20000784
 8003754:	e000ed04 	.word	0xe000ed04

08003758 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800375e:	2300      	movs	r3, #0
 8003760:	607b      	str	r3, [r7, #4]
 8003762:	e00c      	b.n	800377e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	4613      	mov	r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	4413      	add	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4a12      	ldr	r2, [pc, #72]	; (80037b8 <prvInitialiseTaskLists+0x60>)
 8003770:	4413      	add	r3, r2
 8003772:	4618      	mov	r0, r3
 8003774:	f7fe fd06 	bl	8002184 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	3301      	adds	r3, #1
 800377c:	607b      	str	r3, [r7, #4]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2b37      	cmp	r3, #55	; 0x37
 8003782:	d9ef      	bls.n	8003764 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003784:	480d      	ldr	r0, [pc, #52]	; (80037bc <prvInitialiseTaskLists+0x64>)
 8003786:	f7fe fcfd 	bl	8002184 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800378a:	480d      	ldr	r0, [pc, #52]	; (80037c0 <prvInitialiseTaskLists+0x68>)
 800378c:	f7fe fcfa 	bl	8002184 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003790:	480c      	ldr	r0, [pc, #48]	; (80037c4 <prvInitialiseTaskLists+0x6c>)
 8003792:	f7fe fcf7 	bl	8002184 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003796:	480c      	ldr	r0, [pc, #48]	; (80037c8 <prvInitialiseTaskLists+0x70>)
 8003798:	f7fe fcf4 	bl	8002184 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800379c:	480b      	ldr	r0, [pc, #44]	; (80037cc <prvInitialiseTaskLists+0x74>)
 800379e:	f7fe fcf1 	bl	8002184 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80037a2:	4b0b      	ldr	r3, [pc, #44]	; (80037d0 <prvInitialiseTaskLists+0x78>)
 80037a4:	4a05      	ldr	r2, [pc, #20]	; (80037bc <prvInitialiseTaskLists+0x64>)
 80037a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80037a8:	4b0a      	ldr	r3, [pc, #40]	; (80037d4 <prvInitialiseTaskLists+0x7c>)
 80037aa:	4a05      	ldr	r2, [pc, #20]	; (80037c0 <prvInitialiseTaskLists+0x68>)
 80037ac:	601a      	str	r2, [r3, #0]
}
 80037ae:	bf00      	nop
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	20000784 	.word	0x20000784
 80037bc:	20000be4 	.word	0x20000be4
 80037c0:	20000bf8 	.word	0x20000bf8
 80037c4:	20000c14 	.word	0x20000c14
 80037c8:	20000c28 	.word	0x20000c28
 80037cc:	20000c40 	.word	0x20000c40
 80037d0:	20000c0c 	.word	0x20000c0c
 80037d4:	20000c10 	.word	0x20000c10

080037d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037de:	e019      	b.n	8003814 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80037e0:	f000 fd5c 	bl	800429c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80037e4:	4b10      	ldr	r3, [pc, #64]	; (8003828 <prvCheckTasksWaitingTermination+0x50>)
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3304      	adds	r3, #4
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7fe fd4d 	bl	8002290 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80037f6:	4b0d      	ldr	r3, [pc, #52]	; (800382c <prvCheckTasksWaitingTermination+0x54>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	3b01      	subs	r3, #1
 80037fc:	4a0b      	ldr	r2, [pc, #44]	; (800382c <prvCheckTasksWaitingTermination+0x54>)
 80037fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003800:	4b0b      	ldr	r3, [pc, #44]	; (8003830 <prvCheckTasksWaitingTermination+0x58>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	3b01      	subs	r3, #1
 8003806:	4a0a      	ldr	r2, [pc, #40]	; (8003830 <prvCheckTasksWaitingTermination+0x58>)
 8003808:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800380a:	f000 fd77 	bl	80042fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f810 	bl	8003834 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003814:	4b06      	ldr	r3, [pc, #24]	; (8003830 <prvCheckTasksWaitingTermination+0x58>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1e1      	bne.n	80037e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800381c:	bf00      	nop
 800381e:	bf00      	nop
 8003820:	3708      	adds	r7, #8
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	20000c28 	.word	0x20000c28
 800382c:	20000c54 	.word	0x20000c54
 8003830:	20000c3c 	.word	0x20000c3c

08003834 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003842:	2b00      	cmp	r3, #0
 8003844:	d108      	bne.n	8003858 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384a:	4618      	mov	r0, r3
 800384c:	f000 feea 	bl	8004624 <vPortFree>
				vPortFree( pxTCB );
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 fee7 	bl	8004624 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003856:	e018      	b.n	800388a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800385e:	2b01      	cmp	r3, #1
 8003860:	d103      	bne.n	800386a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 fede 	bl	8004624 <vPortFree>
	}
 8003868:	e00f      	b.n	800388a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003870:	2b02      	cmp	r3, #2
 8003872:	d00a      	beq.n	800388a <prvDeleteTCB+0x56>
	__asm volatile
 8003874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003878:	f383 8811 	msr	BASEPRI, r3
 800387c:	f3bf 8f6f 	isb	sy
 8003880:	f3bf 8f4f 	dsb	sy
 8003884:	60fb      	str	r3, [r7, #12]
}
 8003886:	bf00      	nop
 8003888:	e7fe      	b.n	8003888 <prvDeleteTCB+0x54>
	}
 800388a:	bf00      	nop
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
	...

08003894 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800389a:	4b0e      	ldr	r3, [pc, #56]	; (80038d4 <prvResetNextTaskUnblockTime+0x40>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d101      	bne.n	80038a8 <prvResetNextTaskUnblockTime+0x14>
 80038a4:	2301      	movs	r3, #1
 80038a6:	e000      	b.n	80038aa <prvResetNextTaskUnblockTime+0x16>
 80038a8:	2300      	movs	r3, #0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d004      	beq.n	80038b8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80038ae:	4b0a      	ldr	r3, [pc, #40]	; (80038d8 <prvResetNextTaskUnblockTime+0x44>)
 80038b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80038b4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80038b6:	e008      	b.n	80038ca <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80038b8:	4b06      	ldr	r3, [pc, #24]	; (80038d4 <prvResetNextTaskUnblockTime+0x40>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	4a04      	ldr	r2, [pc, #16]	; (80038d8 <prvResetNextTaskUnblockTime+0x44>)
 80038c8:	6013      	str	r3, [r2, #0]
}
 80038ca:	bf00      	nop
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bc80      	pop	{r7}
 80038d2:	4770      	bx	lr
 80038d4:	20000c0c 	.word	0x20000c0c
 80038d8:	20000c74 	.word	0x20000c74

080038dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80038e2:	4b0b      	ldr	r3, [pc, #44]	; (8003910 <xTaskGetSchedulerState+0x34>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d102      	bne.n	80038f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80038ea:	2301      	movs	r3, #1
 80038ec:	607b      	str	r3, [r7, #4]
 80038ee:	e008      	b.n	8003902 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038f0:	4b08      	ldr	r3, [pc, #32]	; (8003914 <xTaskGetSchedulerState+0x38>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d102      	bne.n	80038fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80038f8:	2302      	movs	r3, #2
 80038fa:	607b      	str	r3, [r7, #4]
 80038fc:	e001      	b.n	8003902 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80038fe:	2300      	movs	r3, #0
 8003900:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003902:	687b      	ldr	r3, [r7, #4]
	}
 8003904:	4618      	mov	r0, r3
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	bc80      	pop	{r7}
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	20000c60 	.word	0x20000c60
 8003914:	20000c7c 	.word	0x20000c7c

08003918 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003924:	2300      	movs	r3, #0
 8003926:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d056      	beq.n	80039dc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800392e:	4b2e      	ldr	r3, [pc, #184]	; (80039e8 <xTaskPriorityDisinherit+0xd0>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	429a      	cmp	r2, r3
 8003936:	d00a      	beq.n	800394e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800393c:	f383 8811 	msr	BASEPRI, r3
 8003940:	f3bf 8f6f 	isb	sy
 8003944:	f3bf 8f4f 	dsb	sy
 8003948:	60fb      	str	r3, [r7, #12]
}
 800394a:	bf00      	nop
 800394c:	e7fe      	b.n	800394c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003952:	2b00      	cmp	r3, #0
 8003954:	d10a      	bne.n	800396c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395a:	f383 8811 	msr	BASEPRI, r3
 800395e:	f3bf 8f6f 	isb	sy
 8003962:	f3bf 8f4f 	dsb	sy
 8003966:	60bb      	str	r3, [r7, #8]
}
 8003968:	bf00      	nop
 800396a:	e7fe      	b.n	800396a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003970:	1e5a      	subs	r2, r3, #1
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800397e:	429a      	cmp	r2, r3
 8003980:	d02c      	beq.n	80039dc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003986:	2b00      	cmp	r3, #0
 8003988:	d128      	bne.n	80039dc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	3304      	adds	r3, #4
 800398e:	4618      	mov	r0, r3
 8003990:	f7fe fc7e 	bl	8002290 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ac:	4b0f      	ldr	r3, [pc, #60]	; (80039ec <xTaskPriorityDisinherit+0xd4>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d903      	bls.n	80039bc <xTaskPriorityDisinherit+0xa4>
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b8:	4a0c      	ldr	r2, [pc, #48]	; (80039ec <xTaskPriorityDisinherit+0xd4>)
 80039ba:	6013      	str	r3, [r2, #0]
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c0:	4613      	mov	r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	4413      	add	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	4a09      	ldr	r2, [pc, #36]	; (80039f0 <xTaskPriorityDisinherit+0xd8>)
 80039ca:	441a      	add	r2, r3
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	3304      	adds	r3, #4
 80039d0:	4619      	mov	r1, r3
 80039d2:	4610      	mov	r0, r2
 80039d4:	f7fe fc01 	bl	80021da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80039d8:	2301      	movs	r3, #1
 80039da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80039dc:	697b      	ldr	r3, [r7, #20]
	}
 80039de:	4618      	mov	r0, r3
 80039e0:	3718      	adds	r7, #24
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	20000780 	.word	0x20000780
 80039ec:	20000c5c 	.word	0x20000c5c
 80039f0:	20000784 	.word	0x20000784

080039f4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80039fe:	4b21      	ldr	r3, [pc, #132]	; (8003a84 <prvAddCurrentTaskToDelayedList+0x90>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a04:	4b20      	ldr	r3, [pc, #128]	; (8003a88 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	3304      	adds	r3, #4
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7fe fc40 	bl	8002290 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a16:	d10a      	bne.n	8003a2e <prvAddCurrentTaskToDelayedList+0x3a>
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d007      	beq.n	8003a2e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a1e:	4b1a      	ldr	r3, [pc, #104]	; (8003a88 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	3304      	adds	r3, #4
 8003a24:	4619      	mov	r1, r3
 8003a26:	4819      	ldr	r0, [pc, #100]	; (8003a8c <prvAddCurrentTaskToDelayedList+0x98>)
 8003a28:	f7fe fbd7 	bl	80021da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003a2c:	e026      	b.n	8003a7c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4413      	add	r3, r2
 8003a34:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003a36:	4b14      	ldr	r3, [pc, #80]	; (8003a88 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68ba      	ldr	r2, [r7, #8]
 8003a3c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003a3e:	68ba      	ldr	r2, [r7, #8]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d209      	bcs.n	8003a5a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a46:	4b12      	ldr	r3, [pc, #72]	; (8003a90 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	4b0f      	ldr	r3, [pc, #60]	; (8003a88 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	3304      	adds	r3, #4
 8003a50:	4619      	mov	r1, r3
 8003a52:	4610      	mov	r0, r2
 8003a54:	f7fe fbe4 	bl	8002220 <vListInsert>
}
 8003a58:	e010      	b.n	8003a7c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a5a:	4b0e      	ldr	r3, [pc, #56]	; (8003a94 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	4b0a      	ldr	r3, [pc, #40]	; (8003a88 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	3304      	adds	r3, #4
 8003a64:	4619      	mov	r1, r3
 8003a66:	4610      	mov	r0, r2
 8003a68:	f7fe fbda 	bl	8002220 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003a6c:	4b0a      	ldr	r3, [pc, #40]	; (8003a98 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68ba      	ldr	r2, [r7, #8]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d202      	bcs.n	8003a7c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003a76:	4a08      	ldr	r2, [pc, #32]	; (8003a98 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	6013      	str	r3, [r2, #0]
}
 8003a7c:	bf00      	nop
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	20000c58 	.word	0x20000c58
 8003a88:	20000780 	.word	0x20000780
 8003a8c:	20000c40 	.word	0x20000c40
 8003a90:	20000c10 	.word	0x20000c10
 8003a94:	20000c0c 	.word	0x20000c0c
 8003a98:	20000c74 	.word	0x20000c74

08003a9c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b08a      	sub	sp, #40	; 0x28
 8003aa0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003aa6:	f000 facb 	bl	8004040 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003aaa:	4b1c      	ldr	r3, [pc, #112]	; (8003b1c <xTimerCreateTimerTask+0x80>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d021      	beq.n	8003af6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003aba:	1d3a      	adds	r2, r7, #4
 8003abc:	f107 0108 	add.w	r1, r7, #8
 8003ac0:	f107 030c 	add.w	r3, r7, #12
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7fe fb43 	bl	8002150 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003aca:	6879      	ldr	r1, [r7, #4]
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	9202      	str	r2, [sp, #8]
 8003ad2:	9301      	str	r3, [sp, #4]
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	9300      	str	r3, [sp, #0]
 8003ad8:	2300      	movs	r3, #0
 8003ada:	460a      	mov	r2, r1
 8003adc:	4910      	ldr	r1, [pc, #64]	; (8003b20 <xTimerCreateTimerTask+0x84>)
 8003ade:	4811      	ldr	r0, [pc, #68]	; (8003b24 <xTimerCreateTimerTask+0x88>)
 8003ae0:	f7ff f8e4 	bl	8002cac <xTaskCreateStatic>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	4a10      	ldr	r2, [pc, #64]	; (8003b28 <xTimerCreateTimerTask+0x8c>)
 8003ae8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003aea:	4b0f      	ldr	r3, [pc, #60]	; (8003b28 <xTimerCreateTimerTask+0x8c>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003af2:	2301      	movs	r3, #1
 8003af4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d10a      	bne.n	8003b12 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b00:	f383 8811 	msr	BASEPRI, r3
 8003b04:	f3bf 8f6f 	isb	sy
 8003b08:	f3bf 8f4f 	dsb	sy
 8003b0c:	613b      	str	r3, [r7, #16]
}
 8003b0e:	bf00      	nop
 8003b10:	e7fe      	b.n	8003b10 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003b12:	697b      	ldr	r3, [r7, #20]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3718      	adds	r7, #24
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	20000cb0 	.word	0x20000cb0
 8003b20:	0800490c 	.word	0x0800490c
 8003b24:	08003c49 	.word	0x08003c49
 8003b28:	20000cb4 	.word	0x20000cb4

08003b2c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b08a      	sub	sp, #40	; 0x28
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
 8003b38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d10a      	bne.n	8003b5a <xTimerGenericCommand+0x2e>
	__asm volatile
 8003b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b48:	f383 8811 	msr	BASEPRI, r3
 8003b4c:	f3bf 8f6f 	isb	sy
 8003b50:	f3bf 8f4f 	dsb	sy
 8003b54:	623b      	str	r3, [r7, #32]
}
 8003b56:	bf00      	nop
 8003b58:	e7fe      	b.n	8003b58 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003b5a:	4b1a      	ldr	r3, [pc, #104]	; (8003bc4 <xTimerGenericCommand+0x98>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d02a      	beq.n	8003bb8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	2b05      	cmp	r3, #5
 8003b72:	dc18      	bgt.n	8003ba6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003b74:	f7ff feb2 	bl	80038dc <xTaskGetSchedulerState>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d109      	bne.n	8003b92 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003b7e:	4b11      	ldr	r3, [pc, #68]	; (8003bc4 <xTimerGenericCommand+0x98>)
 8003b80:	6818      	ldr	r0, [r3, #0]
 8003b82:	f107 0110 	add.w	r1, r7, #16
 8003b86:	2300      	movs	r3, #0
 8003b88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b8a:	f7fe fcad 	bl	80024e8 <xQueueGenericSend>
 8003b8e:	6278      	str	r0, [r7, #36]	; 0x24
 8003b90:	e012      	b.n	8003bb8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003b92:	4b0c      	ldr	r3, [pc, #48]	; (8003bc4 <xTimerGenericCommand+0x98>)
 8003b94:	6818      	ldr	r0, [r3, #0]
 8003b96:	f107 0110 	add.w	r1, r7, #16
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f7fe fca3 	bl	80024e8 <xQueueGenericSend>
 8003ba2:	6278      	str	r0, [r7, #36]	; 0x24
 8003ba4:	e008      	b.n	8003bb8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003ba6:	4b07      	ldr	r3, [pc, #28]	; (8003bc4 <xTimerGenericCommand+0x98>)
 8003ba8:	6818      	ldr	r0, [r3, #0]
 8003baa:	f107 0110 	add.w	r1, r7, #16
 8003bae:	2300      	movs	r3, #0
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	f7fe fd97 	bl	80026e4 <xQueueGenericSendFromISR>
 8003bb6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3728      	adds	r7, #40	; 0x28
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	20000cb0 	.word	0x20000cb0

08003bc8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b088      	sub	sp, #32
 8003bcc:	af02      	add	r7, sp, #8
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003bd2:	4b1c      	ldr	r3, [pc, #112]	; (8003c44 <prvProcessExpiredTimer+0x7c>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	3304      	adds	r3, #4
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7fe fb55 	bl	8002290 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	69db      	ldr	r3, [r3, #28]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d122      	bne.n	8003c34 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	699a      	ldr	r2, [r3, #24]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	18d1      	adds	r1, r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	683a      	ldr	r2, [r7, #0]
 8003bfa:	6978      	ldr	r0, [r7, #20]
 8003bfc:	f000 f8c8 	bl	8003d90 <prvInsertTimerInActiveList>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d016      	beq.n	8003c34 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003c06:	2300      	movs	r3, #0
 8003c08:	9300      	str	r3, [sp, #0]
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	2100      	movs	r1, #0
 8003c10:	6978      	ldr	r0, [r7, #20]
 8003c12:	f7ff ff8b 	bl	8003b2c <xTimerGenericCommand>
 8003c16:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10a      	bne.n	8003c34 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8003c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c22:	f383 8811 	msr	BASEPRI, r3
 8003c26:	f3bf 8f6f 	isb	sy
 8003c2a:	f3bf 8f4f 	dsb	sy
 8003c2e:	60fb      	str	r3, [r7, #12]
}
 8003c30:	bf00      	nop
 8003c32:	e7fe      	b.n	8003c32 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c38:	6978      	ldr	r0, [r7, #20]
 8003c3a:	4798      	blx	r3
}
 8003c3c:	bf00      	nop
 8003c3e:	3718      	adds	r7, #24
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	20000ca8 	.word	0x20000ca8

08003c48 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c50:	f107 0308 	add.w	r3, r7, #8
 8003c54:	4618      	mov	r0, r3
 8003c56:	f000 f857 	bl	8003d08 <prvGetNextExpireTime>
 8003c5a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	4619      	mov	r1, r3
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f000 f803 	bl	8003c6c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003c66:	f000 f8d5 	bl	8003e14 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c6a:	e7f1      	b.n	8003c50 <prvTimerTask+0x8>

08003c6c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003c76:	f7ff fa4b 	bl	8003110 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003c7a:	f107 0308 	add.w	r3, r7, #8
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f000 f866 	bl	8003d50 <prvSampleTimeNow>
 8003c84:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d130      	bne.n	8003cee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10a      	bne.n	8003ca8 <prvProcessTimerOrBlockTask+0x3c>
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d806      	bhi.n	8003ca8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003c9a:	f7ff fa47 	bl	800312c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003c9e:	68f9      	ldr	r1, [r7, #12]
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f7ff ff91 	bl	8003bc8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003ca6:	e024      	b.n	8003cf2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d008      	beq.n	8003cc0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003cae:	4b13      	ldr	r3, [pc, #76]	; (8003cfc <prvProcessTimerOrBlockTask+0x90>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	bf0c      	ite	eq
 8003cb8:	2301      	moveq	r3, #1
 8003cba:	2300      	movne	r3, #0
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003cc0:	4b0f      	ldr	r3, [pc, #60]	; (8003d00 <prvProcessTimerOrBlockTask+0x94>)
 8003cc2:	6818      	ldr	r0, [r3, #0]
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	4619      	mov	r1, r3
 8003cce:	f7fe ffb9 	bl	8002c44 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003cd2:	f7ff fa2b 	bl	800312c <xTaskResumeAll>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10a      	bne.n	8003cf2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003cdc:	4b09      	ldr	r3, [pc, #36]	; (8003d04 <prvProcessTimerOrBlockTask+0x98>)
 8003cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ce2:	601a      	str	r2, [r3, #0]
 8003ce4:	f3bf 8f4f 	dsb	sy
 8003ce8:	f3bf 8f6f 	isb	sy
}
 8003cec:	e001      	b.n	8003cf2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003cee:	f7ff fa1d 	bl	800312c <xTaskResumeAll>
}
 8003cf2:	bf00      	nop
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	20000cac 	.word	0x20000cac
 8003d00:	20000cb0 	.word	0x20000cb0
 8003d04:	e000ed04 	.word	0xe000ed04

08003d08 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003d10:	4b0e      	ldr	r3, [pc, #56]	; (8003d4c <prvGetNextExpireTime+0x44>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	bf0c      	ite	eq
 8003d1a:	2301      	moveq	r3, #1
 8003d1c:	2300      	movne	r3, #0
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	461a      	mov	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d105      	bne.n	8003d3a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d2e:	4b07      	ldr	r3, [pc, #28]	; (8003d4c <prvGetNextExpireTime+0x44>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	60fb      	str	r3, [r7, #12]
 8003d38:	e001      	b.n	8003d3e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3714      	adds	r7, #20
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bc80      	pop	{r7}
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	20000ca8 	.word	0x20000ca8

08003d50 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003d58:	f7ff fa86 	bl	8003268 <xTaskGetTickCount>
 8003d5c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003d5e:	4b0b      	ldr	r3, [pc, #44]	; (8003d8c <prvSampleTimeNow+0x3c>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d205      	bcs.n	8003d74 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003d68:	f000 f908 	bl	8003f7c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	601a      	str	r2, [r3, #0]
 8003d72:	e002      	b.n	8003d7a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003d7a:	4a04      	ldr	r2, [pc, #16]	; (8003d8c <prvSampleTimeNow+0x3c>)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003d80:	68fb      	ldr	r3, [r7, #12]
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	20000cb8 	.word	0x20000cb8

08003d90 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b086      	sub	sp, #24
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
 8003d9c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	68ba      	ldr	r2, [r7, #8]
 8003da6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003dae:	68ba      	ldr	r2, [r7, #8]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d812      	bhi.n	8003ddc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	1ad2      	subs	r2, r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d302      	bcc.n	8003dca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	617b      	str	r3, [r7, #20]
 8003dc8:	e01b      	b.n	8003e02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003dca:	4b10      	ldr	r3, [pc, #64]	; (8003e0c <prvInsertTimerInActiveList+0x7c>)
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	4610      	mov	r0, r2
 8003dd6:	f7fe fa23 	bl	8002220 <vListInsert>
 8003dda:	e012      	b.n	8003e02 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d206      	bcs.n	8003df2 <prvInsertTimerInActiveList+0x62>
 8003de4:	68ba      	ldr	r2, [r7, #8]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d302      	bcc.n	8003df2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003dec:	2301      	movs	r3, #1
 8003dee:	617b      	str	r3, [r7, #20]
 8003df0:	e007      	b.n	8003e02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003df2:	4b07      	ldr	r3, [pc, #28]	; (8003e10 <prvInsertTimerInActiveList+0x80>)
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	3304      	adds	r3, #4
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	4610      	mov	r0, r2
 8003dfe:	f7fe fa0f 	bl	8002220 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003e02:	697b      	ldr	r3, [r7, #20]
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3718      	adds	r7, #24
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	20000cac 	.word	0x20000cac
 8003e10:	20000ca8 	.word	0x20000ca8

08003e14 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b08e      	sub	sp, #56	; 0x38
 8003e18:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e1a:	e09d      	b.n	8003f58 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	da18      	bge.n	8003e54 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003e22:	1d3b      	adds	r3, r7, #4
 8003e24:	3304      	adds	r3, #4
 8003e26:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10a      	bne.n	8003e44 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e32:	f383 8811 	msr	BASEPRI, r3
 8003e36:	f3bf 8f6f 	isb	sy
 8003e3a:	f3bf 8f4f 	dsb	sy
 8003e3e:	61fb      	str	r3, [r7, #28]
}
 8003e40:	bf00      	nop
 8003e42:	e7fe      	b.n	8003e42 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e4a:	6850      	ldr	r0, [r2, #4]
 8003e4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e4e:	6892      	ldr	r2, [r2, #8]
 8003e50:	4611      	mov	r1, r2
 8003e52:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	db7d      	blt.n	8003f56 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d004      	beq.n	8003e70 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e68:	3304      	adds	r3, #4
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7fe fa10 	bl	8002290 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e70:	463b      	mov	r3, r7
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7ff ff6c 	bl	8003d50 <prvSampleTimeNow>
 8003e78:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2b09      	cmp	r3, #9
 8003e7e:	d86b      	bhi.n	8003f58 <prvProcessReceivedCommands+0x144>
 8003e80:	a201      	add	r2, pc, #4	; (adr r2, 8003e88 <prvProcessReceivedCommands+0x74>)
 8003e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e86:	bf00      	nop
 8003e88:	08003eb1 	.word	0x08003eb1
 8003e8c:	08003eb1 	.word	0x08003eb1
 8003e90:	08003eb1 	.word	0x08003eb1
 8003e94:	08003f59 	.word	0x08003f59
 8003e98:	08003f0d 	.word	0x08003f0d
 8003e9c:	08003f45 	.word	0x08003f45
 8003ea0:	08003eb1 	.word	0x08003eb1
 8003ea4:	08003eb1 	.word	0x08003eb1
 8003ea8:	08003f59 	.word	0x08003f59
 8003eac:	08003f0d 	.word	0x08003f0d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003eb0:	68ba      	ldr	r2, [r7, #8]
 8003eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	18d1      	adds	r1, r2, r3
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ebc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ebe:	f7ff ff67 	bl	8003d90 <prvInsertTimerInActiveList>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d047      	beq.n	8003f58 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ecc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ece:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed2:	69db      	ldr	r3, [r3, #28]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d13f      	bne.n	8003f58 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	441a      	add	r2, r3
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	9300      	str	r3, [sp, #0]
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003eea:	f7ff fe1f 	bl	8003b2c <xTimerGenericCommand>
 8003eee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003ef0:	6a3b      	ldr	r3, [r7, #32]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d130      	bne.n	8003f58 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8003ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003efa:	f383 8811 	msr	BASEPRI, r3
 8003efe:	f3bf 8f6f 	isb	sy
 8003f02:	f3bf 8f4f 	dsb	sy
 8003f06:	61bb      	str	r3, [r7, #24]
}
 8003f08:	bf00      	nop
 8003f0a:	e7fe      	b.n	8003f0a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f10:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10a      	bne.n	8003f30 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8003f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1e:	f383 8811 	msr	BASEPRI, r3
 8003f22:	f3bf 8f6f 	isb	sy
 8003f26:	f3bf 8f4f 	dsb	sy
 8003f2a:	617b      	str	r3, [r7, #20]
}
 8003f2c:	bf00      	nop
 8003f2e:	e7fe      	b.n	8003f2e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f32:	699a      	ldr	r2, [r3, #24]
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f36:	18d1      	adds	r1, r2, r3
 8003f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f3e:	f7ff ff27 	bl	8003d90 <prvInsertTimerInActiveList>
					break;
 8003f42:	e009      	b.n	8003f58 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f46:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d104      	bne.n	8003f58 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8003f4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f50:	f000 fb68 	bl	8004624 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003f54:	e000      	b.n	8003f58 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003f56:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f58:	4b07      	ldr	r3, [pc, #28]	; (8003f78 <prvProcessReceivedCommands+0x164>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	1d39      	adds	r1, r7, #4
 8003f5e:	2200      	movs	r2, #0
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7fe fc57 	bl	8002814 <xQueueReceive>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f47f af57 	bne.w	8003e1c <prvProcessReceivedCommands+0x8>
	}
}
 8003f6e:	bf00      	nop
 8003f70:	bf00      	nop
 8003f72:	3730      	adds	r7, #48	; 0x30
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	20000cb0 	.word	0x20000cb0

08003f7c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b088      	sub	sp, #32
 8003f80:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f82:	e045      	b.n	8004010 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f84:	4b2c      	ldr	r3, [pc, #176]	; (8004038 <prvSwitchTimerLists+0xbc>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f8e:	4b2a      	ldr	r3, [pc, #168]	; (8004038 <prvSwitchTimerLists+0xbc>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	3304      	adds	r3, #4
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7fe f977 	bl	8002290 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d12e      	bne.n	8004010 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	4413      	add	r3, r2
 8003fba:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003fbc:	68ba      	ldr	r2, [r7, #8]
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d90e      	bls.n	8003fe2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003fd0:	4b19      	ldr	r3, [pc, #100]	; (8004038 <prvSwitchTimerLists+0xbc>)
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	3304      	adds	r3, #4
 8003fd8:	4619      	mov	r1, r3
 8003fda:	4610      	mov	r0, r2
 8003fdc:	f7fe f920 	bl	8002220 <vListInsert>
 8003fe0:	e016      	b.n	8004010 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	2100      	movs	r1, #0
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f7ff fd9d 	bl	8003b2c <xTimerGenericCommand>
 8003ff2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d10a      	bne.n	8004010 <prvSwitchTimerLists+0x94>
	__asm volatile
 8003ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ffe:	f383 8811 	msr	BASEPRI, r3
 8004002:	f3bf 8f6f 	isb	sy
 8004006:	f3bf 8f4f 	dsb	sy
 800400a:	603b      	str	r3, [r7, #0]
}
 800400c:	bf00      	nop
 800400e:	e7fe      	b.n	800400e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004010:	4b09      	ldr	r3, [pc, #36]	; (8004038 <prvSwitchTimerLists+0xbc>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1b4      	bne.n	8003f84 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800401a:	4b07      	ldr	r3, [pc, #28]	; (8004038 <prvSwitchTimerLists+0xbc>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004020:	4b06      	ldr	r3, [pc, #24]	; (800403c <prvSwitchTimerLists+0xc0>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a04      	ldr	r2, [pc, #16]	; (8004038 <prvSwitchTimerLists+0xbc>)
 8004026:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004028:	4a04      	ldr	r2, [pc, #16]	; (800403c <prvSwitchTimerLists+0xc0>)
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	6013      	str	r3, [r2, #0]
}
 800402e:	bf00      	nop
 8004030:	3718      	adds	r7, #24
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	20000ca8 	.word	0x20000ca8
 800403c:	20000cac 	.word	0x20000cac

08004040 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004046:	f000 f929 	bl	800429c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800404a:	4b15      	ldr	r3, [pc, #84]	; (80040a0 <prvCheckForValidListAndQueue+0x60>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d120      	bne.n	8004094 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004052:	4814      	ldr	r0, [pc, #80]	; (80040a4 <prvCheckForValidListAndQueue+0x64>)
 8004054:	f7fe f896 	bl	8002184 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004058:	4813      	ldr	r0, [pc, #76]	; (80040a8 <prvCheckForValidListAndQueue+0x68>)
 800405a:	f7fe f893 	bl	8002184 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800405e:	4b13      	ldr	r3, [pc, #76]	; (80040ac <prvCheckForValidListAndQueue+0x6c>)
 8004060:	4a10      	ldr	r2, [pc, #64]	; (80040a4 <prvCheckForValidListAndQueue+0x64>)
 8004062:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004064:	4b12      	ldr	r3, [pc, #72]	; (80040b0 <prvCheckForValidListAndQueue+0x70>)
 8004066:	4a10      	ldr	r2, [pc, #64]	; (80040a8 <prvCheckForValidListAndQueue+0x68>)
 8004068:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800406a:	2300      	movs	r3, #0
 800406c:	9300      	str	r3, [sp, #0]
 800406e:	4b11      	ldr	r3, [pc, #68]	; (80040b4 <prvCheckForValidListAndQueue+0x74>)
 8004070:	4a11      	ldr	r2, [pc, #68]	; (80040b8 <prvCheckForValidListAndQueue+0x78>)
 8004072:	2110      	movs	r1, #16
 8004074:	200a      	movs	r0, #10
 8004076:	f7fe f99d 	bl	80023b4 <xQueueGenericCreateStatic>
 800407a:	4603      	mov	r3, r0
 800407c:	4a08      	ldr	r2, [pc, #32]	; (80040a0 <prvCheckForValidListAndQueue+0x60>)
 800407e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004080:	4b07      	ldr	r3, [pc, #28]	; (80040a0 <prvCheckForValidListAndQueue+0x60>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d005      	beq.n	8004094 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004088:	4b05      	ldr	r3, [pc, #20]	; (80040a0 <prvCheckForValidListAndQueue+0x60>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	490b      	ldr	r1, [pc, #44]	; (80040bc <prvCheckForValidListAndQueue+0x7c>)
 800408e:	4618      	mov	r0, r3
 8004090:	f7fe fdb0 	bl	8002bf4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004094:	f000 f932 	bl	80042fc <vPortExitCritical>
}
 8004098:	bf00      	nop
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	20000cb0 	.word	0x20000cb0
 80040a4:	20000c80 	.word	0x20000c80
 80040a8:	20000c94 	.word	0x20000c94
 80040ac:	20000ca8 	.word	0x20000ca8
 80040b0:	20000cac 	.word	0x20000cac
 80040b4:	20000d5c 	.word	0x20000d5c
 80040b8:	20000cbc 	.word	0x20000cbc
 80040bc:	08004914 	.word	0x08004914

080040c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	3b04      	subs	r3, #4
 80040d0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80040d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	3b04      	subs	r3, #4
 80040de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	f023 0201 	bic.w	r2, r3, #1
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	3b04      	subs	r3, #4
 80040ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80040f0:	4a08      	ldr	r2, [pc, #32]	; (8004114 <pxPortInitialiseStack+0x54>)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	3b14      	subs	r3, #20
 80040fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	3b20      	subs	r3, #32
 8004106:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004108:	68fb      	ldr	r3, [r7, #12]
}
 800410a:	4618      	mov	r0, r3
 800410c:	3714      	adds	r7, #20
 800410e:	46bd      	mov	sp, r7
 8004110:	bc80      	pop	{r7}
 8004112:	4770      	bx	lr
 8004114:	08004119 	.word	0x08004119

08004118 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800411e:	2300      	movs	r3, #0
 8004120:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004122:	4b12      	ldr	r3, [pc, #72]	; (800416c <prvTaskExitError+0x54>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800412a:	d00a      	beq.n	8004142 <prvTaskExitError+0x2a>
	__asm volatile
 800412c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004130:	f383 8811 	msr	BASEPRI, r3
 8004134:	f3bf 8f6f 	isb	sy
 8004138:	f3bf 8f4f 	dsb	sy
 800413c:	60fb      	str	r3, [r7, #12]
}
 800413e:	bf00      	nop
 8004140:	e7fe      	b.n	8004140 <prvTaskExitError+0x28>
	__asm volatile
 8004142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004146:	f383 8811 	msr	BASEPRI, r3
 800414a:	f3bf 8f6f 	isb	sy
 800414e:	f3bf 8f4f 	dsb	sy
 8004152:	60bb      	str	r3, [r7, #8]
}
 8004154:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004156:	bf00      	nop
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d0fc      	beq.n	8004158 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800415e:	bf00      	nop
 8004160:	bf00      	nop
 8004162:	3714      	adds	r7, #20
 8004164:	46bd      	mov	sp, r7
 8004166:	bc80      	pop	{r7}
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	2000000c 	.word	0x2000000c

08004170 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004170:	4b07      	ldr	r3, [pc, #28]	; (8004190 <pxCurrentTCBConst2>)
 8004172:	6819      	ldr	r1, [r3, #0]
 8004174:	6808      	ldr	r0, [r1, #0]
 8004176:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800417a:	f380 8809 	msr	PSP, r0
 800417e:	f3bf 8f6f 	isb	sy
 8004182:	f04f 0000 	mov.w	r0, #0
 8004186:	f380 8811 	msr	BASEPRI, r0
 800418a:	f04e 0e0d 	orr.w	lr, lr, #13
 800418e:	4770      	bx	lr

08004190 <pxCurrentTCBConst2>:
 8004190:	20000780 	.word	0x20000780
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004194:	bf00      	nop
 8004196:	bf00      	nop

08004198 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004198:	4806      	ldr	r0, [pc, #24]	; (80041b4 <prvPortStartFirstTask+0x1c>)
 800419a:	6800      	ldr	r0, [r0, #0]
 800419c:	6800      	ldr	r0, [r0, #0]
 800419e:	f380 8808 	msr	MSP, r0
 80041a2:	b662      	cpsie	i
 80041a4:	b661      	cpsie	f
 80041a6:	f3bf 8f4f 	dsb	sy
 80041aa:	f3bf 8f6f 	isb	sy
 80041ae:	df00      	svc	0
 80041b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80041b2:	bf00      	nop
 80041b4:	e000ed08 	.word	0xe000ed08

080041b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80041be:	4b32      	ldr	r3, [pc, #200]	; (8004288 <xPortStartScheduler+0xd0>)
 80041c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	22ff      	movs	r2, #255	; 0xff
 80041ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80041d8:	78fb      	ldrb	r3, [r7, #3]
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80041e0:	b2da      	uxtb	r2, r3
 80041e2:	4b2a      	ldr	r3, [pc, #168]	; (800428c <xPortStartScheduler+0xd4>)
 80041e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80041e6:	4b2a      	ldr	r3, [pc, #168]	; (8004290 <xPortStartScheduler+0xd8>)
 80041e8:	2207      	movs	r2, #7
 80041ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041ec:	e009      	b.n	8004202 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80041ee:	4b28      	ldr	r3, [pc, #160]	; (8004290 <xPortStartScheduler+0xd8>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	3b01      	subs	r3, #1
 80041f4:	4a26      	ldr	r2, [pc, #152]	; (8004290 <xPortStartScheduler+0xd8>)
 80041f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80041f8:	78fb      	ldrb	r3, [r7, #3]
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	005b      	lsls	r3, r3, #1
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004202:	78fb      	ldrb	r3, [r7, #3]
 8004204:	b2db      	uxtb	r3, r3
 8004206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800420a:	2b80      	cmp	r3, #128	; 0x80
 800420c:	d0ef      	beq.n	80041ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800420e:	4b20      	ldr	r3, [pc, #128]	; (8004290 <xPortStartScheduler+0xd8>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f1c3 0307 	rsb	r3, r3, #7
 8004216:	2b04      	cmp	r3, #4
 8004218:	d00a      	beq.n	8004230 <xPortStartScheduler+0x78>
	__asm volatile
 800421a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421e:	f383 8811 	msr	BASEPRI, r3
 8004222:	f3bf 8f6f 	isb	sy
 8004226:	f3bf 8f4f 	dsb	sy
 800422a:	60bb      	str	r3, [r7, #8]
}
 800422c:	bf00      	nop
 800422e:	e7fe      	b.n	800422e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004230:	4b17      	ldr	r3, [pc, #92]	; (8004290 <xPortStartScheduler+0xd8>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	021b      	lsls	r3, r3, #8
 8004236:	4a16      	ldr	r2, [pc, #88]	; (8004290 <xPortStartScheduler+0xd8>)
 8004238:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800423a:	4b15      	ldr	r3, [pc, #84]	; (8004290 <xPortStartScheduler+0xd8>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004242:	4a13      	ldr	r2, [pc, #76]	; (8004290 <xPortStartScheduler+0xd8>)
 8004244:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	b2da      	uxtb	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800424e:	4b11      	ldr	r3, [pc, #68]	; (8004294 <xPortStartScheduler+0xdc>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a10      	ldr	r2, [pc, #64]	; (8004294 <xPortStartScheduler+0xdc>)
 8004254:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004258:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800425a:	4b0e      	ldr	r3, [pc, #56]	; (8004294 <xPortStartScheduler+0xdc>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a0d      	ldr	r2, [pc, #52]	; (8004294 <xPortStartScheduler+0xdc>)
 8004260:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004264:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004266:	f000 f8b9 	bl	80043dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800426a:	4b0b      	ldr	r3, [pc, #44]	; (8004298 <xPortStartScheduler+0xe0>)
 800426c:	2200      	movs	r2, #0
 800426e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004270:	f7ff ff92 	bl	8004198 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004274:	f7ff f8c4 	bl	8003400 <vTaskSwitchContext>
	prvTaskExitError();
 8004278:	f7ff ff4e 	bl	8004118 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	e000e400 	.word	0xe000e400
 800428c:	20000dac 	.word	0x20000dac
 8004290:	20000db0 	.word	0x20000db0
 8004294:	e000ed20 	.word	0xe000ed20
 8004298:	2000000c 	.word	0x2000000c

0800429c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
	__asm volatile
 80042a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a6:	f383 8811 	msr	BASEPRI, r3
 80042aa:	f3bf 8f6f 	isb	sy
 80042ae:	f3bf 8f4f 	dsb	sy
 80042b2:	607b      	str	r3, [r7, #4]
}
 80042b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80042b6:	4b0f      	ldr	r3, [pc, #60]	; (80042f4 <vPortEnterCritical+0x58>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	3301      	adds	r3, #1
 80042bc:	4a0d      	ldr	r2, [pc, #52]	; (80042f4 <vPortEnterCritical+0x58>)
 80042be:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80042c0:	4b0c      	ldr	r3, [pc, #48]	; (80042f4 <vPortEnterCritical+0x58>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d10f      	bne.n	80042e8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80042c8:	4b0b      	ldr	r3, [pc, #44]	; (80042f8 <vPortEnterCritical+0x5c>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00a      	beq.n	80042e8 <vPortEnterCritical+0x4c>
	__asm volatile
 80042d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d6:	f383 8811 	msr	BASEPRI, r3
 80042da:	f3bf 8f6f 	isb	sy
 80042de:	f3bf 8f4f 	dsb	sy
 80042e2:	603b      	str	r3, [r7, #0]
}
 80042e4:	bf00      	nop
 80042e6:	e7fe      	b.n	80042e6 <vPortEnterCritical+0x4a>
	}
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bc80      	pop	{r7}
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	2000000c 	.word	0x2000000c
 80042f8:	e000ed04 	.word	0xe000ed04

080042fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004302:	4b11      	ldr	r3, [pc, #68]	; (8004348 <vPortExitCritical+0x4c>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d10a      	bne.n	8004320 <vPortExitCritical+0x24>
	__asm volatile
 800430a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430e:	f383 8811 	msr	BASEPRI, r3
 8004312:	f3bf 8f6f 	isb	sy
 8004316:	f3bf 8f4f 	dsb	sy
 800431a:	607b      	str	r3, [r7, #4]
}
 800431c:	bf00      	nop
 800431e:	e7fe      	b.n	800431e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004320:	4b09      	ldr	r3, [pc, #36]	; (8004348 <vPortExitCritical+0x4c>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	3b01      	subs	r3, #1
 8004326:	4a08      	ldr	r2, [pc, #32]	; (8004348 <vPortExitCritical+0x4c>)
 8004328:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800432a:	4b07      	ldr	r3, [pc, #28]	; (8004348 <vPortExitCritical+0x4c>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d105      	bne.n	800433e <vPortExitCritical+0x42>
 8004332:	2300      	movs	r3, #0
 8004334:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	f383 8811 	msr	BASEPRI, r3
}
 800433c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800433e:	bf00      	nop
 8004340:	370c      	adds	r7, #12
 8004342:	46bd      	mov	sp, r7
 8004344:	bc80      	pop	{r7}
 8004346:	4770      	bx	lr
 8004348:	2000000c 	.word	0x2000000c
 800434c:	00000000 	.word	0x00000000

08004350 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004350:	f3ef 8009 	mrs	r0, PSP
 8004354:	f3bf 8f6f 	isb	sy
 8004358:	4b0d      	ldr	r3, [pc, #52]	; (8004390 <pxCurrentTCBConst>)
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004360:	6010      	str	r0, [r2, #0]
 8004362:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004366:	f04f 0050 	mov.w	r0, #80	; 0x50
 800436a:	f380 8811 	msr	BASEPRI, r0
 800436e:	f7ff f847 	bl	8003400 <vTaskSwitchContext>
 8004372:	f04f 0000 	mov.w	r0, #0
 8004376:	f380 8811 	msr	BASEPRI, r0
 800437a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800437e:	6819      	ldr	r1, [r3, #0]
 8004380:	6808      	ldr	r0, [r1, #0]
 8004382:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004386:	f380 8809 	msr	PSP, r0
 800438a:	f3bf 8f6f 	isb	sy
 800438e:	4770      	bx	lr

08004390 <pxCurrentTCBConst>:
 8004390:	20000780 	.word	0x20000780
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004394:	bf00      	nop
 8004396:	bf00      	nop

08004398 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
	__asm volatile
 800439e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a2:	f383 8811 	msr	BASEPRI, r3
 80043a6:	f3bf 8f6f 	isb	sy
 80043aa:	f3bf 8f4f 	dsb	sy
 80043ae:	607b      	str	r3, [r7, #4]
}
 80043b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80043b2:	f7fe ff67 	bl	8003284 <xTaskIncrementTick>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d003      	beq.n	80043c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80043bc:	4b06      	ldr	r3, [pc, #24]	; (80043d8 <SysTick_Handler+0x40>)
 80043be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043c2:	601a      	str	r2, [r3, #0]
 80043c4:	2300      	movs	r3, #0
 80043c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	f383 8811 	msr	BASEPRI, r3
}
 80043ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80043d0:	bf00      	nop
 80043d2:	3708      	adds	r7, #8
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	e000ed04 	.word	0xe000ed04

080043dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80043dc:	b480      	push	{r7}
 80043de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80043e0:	4b0a      	ldr	r3, [pc, #40]	; (800440c <vPortSetupTimerInterrupt+0x30>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80043e6:	4b0a      	ldr	r3, [pc, #40]	; (8004410 <vPortSetupTimerInterrupt+0x34>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80043ec:	4b09      	ldr	r3, [pc, #36]	; (8004414 <vPortSetupTimerInterrupt+0x38>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a09      	ldr	r2, [pc, #36]	; (8004418 <vPortSetupTimerInterrupt+0x3c>)
 80043f2:	fba2 2303 	umull	r2, r3, r2, r3
 80043f6:	099b      	lsrs	r3, r3, #6
 80043f8:	4a08      	ldr	r2, [pc, #32]	; (800441c <vPortSetupTimerInterrupt+0x40>)
 80043fa:	3b01      	subs	r3, #1
 80043fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80043fe:	4b03      	ldr	r3, [pc, #12]	; (800440c <vPortSetupTimerInterrupt+0x30>)
 8004400:	2207      	movs	r2, #7
 8004402:	601a      	str	r2, [r3, #0]
}
 8004404:	bf00      	nop
 8004406:	46bd      	mov	sp, r7
 8004408:	bc80      	pop	{r7}
 800440a:	4770      	bx	lr
 800440c:	e000e010 	.word	0xe000e010
 8004410:	e000e018 	.word	0xe000e018
 8004414:	20000000 	.word	0x20000000
 8004418:	10624dd3 	.word	0x10624dd3
 800441c:	e000e014 	.word	0xe000e014

08004420 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004426:	f3ef 8305 	mrs	r3, IPSR
 800442a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2b0f      	cmp	r3, #15
 8004430:	d914      	bls.n	800445c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004432:	4a16      	ldr	r2, [pc, #88]	; (800448c <vPortValidateInterruptPriority+0x6c>)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	4413      	add	r3, r2
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800443c:	4b14      	ldr	r3, [pc, #80]	; (8004490 <vPortValidateInterruptPriority+0x70>)
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	7afa      	ldrb	r2, [r7, #11]
 8004442:	429a      	cmp	r2, r3
 8004444:	d20a      	bcs.n	800445c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444a:	f383 8811 	msr	BASEPRI, r3
 800444e:	f3bf 8f6f 	isb	sy
 8004452:	f3bf 8f4f 	dsb	sy
 8004456:	607b      	str	r3, [r7, #4]
}
 8004458:	bf00      	nop
 800445a:	e7fe      	b.n	800445a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800445c:	4b0d      	ldr	r3, [pc, #52]	; (8004494 <vPortValidateInterruptPriority+0x74>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004464:	4b0c      	ldr	r3, [pc, #48]	; (8004498 <vPortValidateInterruptPriority+0x78>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	429a      	cmp	r2, r3
 800446a:	d90a      	bls.n	8004482 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800446c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004470:	f383 8811 	msr	BASEPRI, r3
 8004474:	f3bf 8f6f 	isb	sy
 8004478:	f3bf 8f4f 	dsb	sy
 800447c:	603b      	str	r3, [r7, #0]
}
 800447e:	bf00      	nop
 8004480:	e7fe      	b.n	8004480 <vPortValidateInterruptPriority+0x60>
	}
 8004482:	bf00      	nop
 8004484:	3714      	adds	r7, #20
 8004486:	46bd      	mov	sp, r7
 8004488:	bc80      	pop	{r7}
 800448a:	4770      	bx	lr
 800448c:	e000e3f0 	.word	0xe000e3f0
 8004490:	20000dac 	.word	0x20000dac
 8004494:	e000ed0c 	.word	0xe000ed0c
 8004498:	20000db0 	.word	0x20000db0

0800449c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b08a      	sub	sp, #40	; 0x28
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80044a4:	2300      	movs	r3, #0
 80044a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80044a8:	f7fe fe32 	bl	8003110 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80044ac:	4b58      	ldr	r3, [pc, #352]	; (8004610 <pvPortMalloc+0x174>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d101      	bne.n	80044b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80044b4:	f000 f910 	bl	80046d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80044b8:	4b56      	ldr	r3, [pc, #344]	; (8004614 <pvPortMalloc+0x178>)
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4013      	ands	r3, r2
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f040 808e 	bne.w	80045e2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d01d      	beq.n	8004508 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80044cc:	2208      	movs	r2, #8
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4413      	add	r3, r2
 80044d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f003 0307 	and.w	r3, r3, #7
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d014      	beq.n	8004508 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f023 0307 	bic.w	r3, r3, #7
 80044e4:	3308      	adds	r3, #8
 80044e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f003 0307 	and.w	r3, r3, #7
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00a      	beq.n	8004508 <pvPortMalloc+0x6c>
	__asm volatile
 80044f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f6:	f383 8811 	msr	BASEPRI, r3
 80044fa:	f3bf 8f6f 	isb	sy
 80044fe:	f3bf 8f4f 	dsb	sy
 8004502:	617b      	str	r3, [r7, #20]
}
 8004504:	bf00      	nop
 8004506:	e7fe      	b.n	8004506 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d069      	beq.n	80045e2 <pvPortMalloc+0x146>
 800450e:	4b42      	ldr	r3, [pc, #264]	; (8004618 <pvPortMalloc+0x17c>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	429a      	cmp	r2, r3
 8004516:	d864      	bhi.n	80045e2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004518:	4b40      	ldr	r3, [pc, #256]	; (800461c <pvPortMalloc+0x180>)
 800451a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800451c:	4b3f      	ldr	r3, [pc, #252]	; (800461c <pvPortMalloc+0x180>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004522:	e004      	b.n	800452e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004526:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800452e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	429a      	cmp	r2, r3
 8004536:	d903      	bls.n	8004540 <pvPortMalloc+0xa4>
 8004538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1f1      	bne.n	8004524 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004540:	4b33      	ldr	r3, [pc, #204]	; (8004610 <pvPortMalloc+0x174>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004546:	429a      	cmp	r2, r3
 8004548:	d04b      	beq.n	80045e2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800454a:	6a3b      	ldr	r3, [r7, #32]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2208      	movs	r2, #8
 8004550:	4413      	add	r3, r2
 8004552:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	6a3b      	ldr	r3, [r7, #32]
 800455a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800455c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	1ad2      	subs	r2, r2, r3
 8004564:	2308      	movs	r3, #8
 8004566:	005b      	lsls	r3, r3, #1
 8004568:	429a      	cmp	r2, r3
 800456a:	d91f      	bls.n	80045ac <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800456c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4413      	add	r3, r2
 8004572:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	f003 0307 	and.w	r3, r3, #7
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00a      	beq.n	8004594 <pvPortMalloc+0xf8>
	__asm volatile
 800457e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004582:	f383 8811 	msr	BASEPRI, r3
 8004586:	f3bf 8f6f 	isb	sy
 800458a:	f3bf 8f4f 	dsb	sy
 800458e:	613b      	str	r3, [r7, #16]
}
 8004590:	bf00      	nop
 8004592:	e7fe      	b.n	8004592 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004596:	685a      	ldr	r2, [r3, #4]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	1ad2      	subs	r2, r2, r3
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80045a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80045a6:	69b8      	ldr	r0, [r7, #24]
 80045a8:	f000 f8f8 	bl	800479c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80045ac:	4b1a      	ldr	r3, [pc, #104]	; (8004618 <pvPortMalloc+0x17c>)
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	4a18      	ldr	r2, [pc, #96]	; (8004618 <pvPortMalloc+0x17c>)
 80045b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80045ba:	4b17      	ldr	r3, [pc, #92]	; (8004618 <pvPortMalloc+0x17c>)
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	4b18      	ldr	r3, [pc, #96]	; (8004620 <pvPortMalloc+0x184>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d203      	bcs.n	80045ce <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80045c6:	4b14      	ldr	r3, [pc, #80]	; (8004618 <pvPortMalloc+0x17c>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a15      	ldr	r2, [pc, #84]	; (8004620 <pvPortMalloc+0x184>)
 80045cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80045ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d0:	685a      	ldr	r2, [r3, #4]
 80045d2:	4b10      	ldr	r3, [pc, #64]	; (8004614 <pvPortMalloc+0x178>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	431a      	orrs	r2, r3
 80045d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80045dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045de:	2200      	movs	r2, #0
 80045e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80045e2:	f7fe fda3 	bl	800312c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	f003 0307 	and.w	r3, r3, #7
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00a      	beq.n	8004606 <pvPortMalloc+0x16a>
	__asm volatile
 80045f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f4:	f383 8811 	msr	BASEPRI, r3
 80045f8:	f3bf 8f6f 	isb	sy
 80045fc:	f3bf 8f4f 	dsb	sy
 8004600:	60fb      	str	r3, [r7, #12]
}
 8004602:	bf00      	nop
 8004604:	e7fe      	b.n	8004604 <pvPortMalloc+0x168>
	return pvReturn;
 8004606:	69fb      	ldr	r3, [r7, #28]
}
 8004608:	4618      	mov	r0, r3
 800460a:	3728      	adds	r7, #40	; 0x28
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	200019bc 	.word	0x200019bc
 8004614:	200019c8 	.word	0x200019c8
 8004618:	200019c0 	.word	0x200019c0
 800461c:	200019b4 	.word	0x200019b4
 8004620:	200019c4 	.word	0x200019c4

08004624 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b086      	sub	sp, #24
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d048      	beq.n	80046c8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004636:	2308      	movs	r3, #8
 8004638:	425b      	negs	r3, r3
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	4413      	add	r3, r2
 800463e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	685a      	ldr	r2, [r3, #4]
 8004648:	4b21      	ldr	r3, [pc, #132]	; (80046d0 <vPortFree+0xac>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4013      	ands	r3, r2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10a      	bne.n	8004668 <vPortFree+0x44>
	__asm volatile
 8004652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004656:	f383 8811 	msr	BASEPRI, r3
 800465a:	f3bf 8f6f 	isb	sy
 800465e:	f3bf 8f4f 	dsb	sy
 8004662:	60fb      	str	r3, [r7, #12]
}
 8004664:	bf00      	nop
 8004666:	e7fe      	b.n	8004666 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00a      	beq.n	8004686 <vPortFree+0x62>
	__asm volatile
 8004670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004674:	f383 8811 	msr	BASEPRI, r3
 8004678:	f3bf 8f6f 	isb	sy
 800467c:	f3bf 8f4f 	dsb	sy
 8004680:	60bb      	str	r3, [r7, #8]
}
 8004682:	bf00      	nop
 8004684:	e7fe      	b.n	8004684 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	685a      	ldr	r2, [r3, #4]
 800468a:	4b11      	ldr	r3, [pc, #68]	; (80046d0 <vPortFree+0xac>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4013      	ands	r3, r2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d019      	beq.n	80046c8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d115      	bne.n	80046c8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	685a      	ldr	r2, [r3, #4]
 80046a0:	4b0b      	ldr	r3, [pc, #44]	; (80046d0 <vPortFree+0xac>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	43db      	mvns	r3, r3
 80046a6:	401a      	ands	r2, r3
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80046ac:	f7fe fd30 	bl	8003110 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	4b07      	ldr	r3, [pc, #28]	; (80046d4 <vPortFree+0xb0>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4413      	add	r3, r2
 80046ba:	4a06      	ldr	r2, [pc, #24]	; (80046d4 <vPortFree+0xb0>)
 80046bc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80046be:	6938      	ldr	r0, [r7, #16]
 80046c0:	f000 f86c 	bl	800479c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80046c4:	f7fe fd32 	bl	800312c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80046c8:	bf00      	nop
 80046ca:	3718      	adds	r7, #24
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	200019c8 	.word	0x200019c8
 80046d4:	200019c0 	.word	0x200019c0

080046d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80046d8:	b480      	push	{r7}
 80046da:	b085      	sub	sp, #20
 80046dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80046de:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80046e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80046e4:	4b27      	ldr	r3, [pc, #156]	; (8004784 <prvHeapInit+0xac>)
 80046e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f003 0307 	and.w	r3, r3, #7
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00c      	beq.n	800470c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	3307      	adds	r3, #7
 80046f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f023 0307 	bic.w	r3, r3, #7
 80046fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004700:	68ba      	ldr	r2, [r7, #8]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	4a1f      	ldr	r2, [pc, #124]	; (8004784 <prvHeapInit+0xac>)
 8004708:	4413      	add	r3, r2
 800470a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004710:	4a1d      	ldr	r2, [pc, #116]	; (8004788 <prvHeapInit+0xb0>)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004716:	4b1c      	ldr	r3, [pc, #112]	; (8004788 <prvHeapInit+0xb0>)
 8004718:	2200      	movs	r2, #0
 800471a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	68ba      	ldr	r2, [r7, #8]
 8004720:	4413      	add	r3, r2
 8004722:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004724:	2208      	movs	r2, #8
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	1a9b      	subs	r3, r3, r2
 800472a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f023 0307 	bic.w	r3, r3, #7
 8004732:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	4a15      	ldr	r2, [pc, #84]	; (800478c <prvHeapInit+0xb4>)
 8004738:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800473a:	4b14      	ldr	r3, [pc, #80]	; (800478c <prvHeapInit+0xb4>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2200      	movs	r2, #0
 8004740:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004742:	4b12      	ldr	r3, [pc, #72]	; (800478c <prvHeapInit+0xb4>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2200      	movs	r2, #0
 8004748:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	1ad2      	subs	r2, r2, r3
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004758:	4b0c      	ldr	r3, [pc, #48]	; (800478c <prvHeapInit+0xb4>)
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	4a0a      	ldr	r2, [pc, #40]	; (8004790 <prvHeapInit+0xb8>)
 8004766:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	4a09      	ldr	r2, [pc, #36]	; (8004794 <prvHeapInit+0xbc>)
 800476e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004770:	4b09      	ldr	r3, [pc, #36]	; (8004798 <prvHeapInit+0xc0>)
 8004772:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004776:	601a      	str	r2, [r3, #0]
}
 8004778:	bf00      	nop
 800477a:	3714      	adds	r7, #20
 800477c:	46bd      	mov	sp, r7
 800477e:	bc80      	pop	{r7}
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	20000db4 	.word	0x20000db4
 8004788:	200019b4 	.word	0x200019b4
 800478c:	200019bc 	.word	0x200019bc
 8004790:	200019c4 	.word	0x200019c4
 8004794:	200019c0 	.word	0x200019c0
 8004798:	200019c8 	.word	0x200019c8

0800479c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80047a4:	4b27      	ldr	r3, [pc, #156]	; (8004844 <prvInsertBlockIntoFreeList+0xa8>)
 80047a6:	60fb      	str	r3, [r7, #12]
 80047a8:	e002      	b.n	80047b0 <prvInsertBlockIntoFreeList+0x14>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	60fb      	str	r3, [r7, #12]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d8f7      	bhi.n	80047aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	68ba      	ldr	r2, [r7, #8]
 80047c4:	4413      	add	r3, r2
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d108      	bne.n	80047de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	685a      	ldr	r2, [r3, #4]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	441a      	add	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	68ba      	ldr	r2, [r7, #8]
 80047e8:	441a      	add	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d118      	bne.n	8004824 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	4b14      	ldr	r3, [pc, #80]	; (8004848 <prvInsertBlockIntoFreeList+0xac>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d00d      	beq.n	800481a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685a      	ldr	r2, [r3, #4]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	441a      	add	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	601a      	str	r2, [r3, #0]
 8004818:	e008      	b.n	800482c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800481a:	4b0b      	ldr	r3, [pc, #44]	; (8004848 <prvInsertBlockIntoFreeList+0xac>)
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	601a      	str	r2, [r3, #0]
 8004822:	e003      	b.n	800482c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	429a      	cmp	r2, r3
 8004832:	d002      	beq.n	800483a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800483a:	bf00      	nop
 800483c:	3714      	adds	r7, #20
 800483e:	46bd      	mov	sp, r7
 8004840:	bc80      	pop	{r7}
 8004842:	4770      	bx	lr
 8004844:	200019b4 	.word	0x200019b4
 8004848:	200019bc 	.word	0x200019bc

0800484c <__libc_init_array>:
 800484c:	b570      	push	{r4, r5, r6, lr}
 800484e:	2600      	movs	r6, #0
 8004850:	4d0c      	ldr	r5, [pc, #48]	; (8004884 <__libc_init_array+0x38>)
 8004852:	4c0d      	ldr	r4, [pc, #52]	; (8004888 <__libc_init_array+0x3c>)
 8004854:	1b64      	subs	r4, r4, r5
 8004856:	10a4      	asrs	r4, r4, #2
 8004858:	42a6      	cmp	r6, r4
 800485a:	d109      	bne.n	8004870 <__libc_init_array+0x24>
 800485c:	f000 f830 	bl	80048c0 <_init>
 8004860:	2600      	movs	r6, #0
 8004862:	4d0a      	ldr	r5, [pc, #40]	; (800488c <__libc_init_array+0x40>)
 8004864:	4c0a      	ldr	r4, [pc, #40]	; (8004890 <__libc_init_array+0x44>)
 8004866:	1b64      	subs	r4, r4, r5
 8004868:	10a4      	asrs	r4, r4, #2
 800486a:	42a6      	cmp	r6, r4
 800486c:	d105      	bne.n	800487a <__libc_init_array+0x2e>
 800486e:	bd70      	pop	{r4, r5, r6, pc}
 8004870:	f855 3b04 	ldr.w	r3, [r5], #4
 8004874:	4798      	blx	r3
 8004876:	3601      	adds	r6, #1
 8004878:	e7ee      	b.n	8004858 <__libc_init_array+0xc>
 800487a:	f855 3b04 	ldr.w	r3, [r5], #4
 800487e:	4798      	blx	r3
 8004880:	3601      	adds	r6, #1
 8004882:	e7f2      	b.n	800486a <__libc_init_array+0x1e>
 8004884:	080049a0 	.word	0x080049a0
 8004888:	080049a0 	.word	0x080049a0
 800488c:	080049a0 	.word	0x080049a0
 8004890:	080049a4 	.word	0x080049a4

08004894 <memcpy>:
 8004894:	440a      	add	r2, r1
 8004896:	4291      	cmp	r1, r2
 8004898:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800489c:	d100      	bne.n	80048a0 <memcpy+0xc>
 800489e:	4770      	bx	lr
 80048a0:	b510      	push	{r4, lr}
 80048a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048a6:	4291      	cmp	r1, r2
 80048a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048ac:	d1f9      	bne.n	80048a2 <memcpy+0xe>
 80048ae:	bd10      	pop	{r4, pc}

080048b0 <memset>:
 80048b0:	4603      	mov	r3, r0
 80048b2:	4402      	add	r2, r0
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d100      	bne.n	80048ba <memset+0xa>
 80048b8:	4770      	bx	lr
 80048ba:	f803 1b01 	strb.w	r1, [r3], #1
 80048be:	e7f9      	b.n	80048b4 <memset+0x4>

080048c0 <_init>:
 80048c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048c2:	bf00      	nop
 80048c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048c6:	bc08      	pop	{r3}
 80048c8:	469e      	mov	lr, r3
 80048ca:	4770      	bx	lr

080048cc <_fini>:
 80048cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ce:	bf00      	nop
 80048d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048d2:	bc08      	pop	{r3}
 80048d4:	469e      	mov	lr, r3
 80048d6:	4770      	bx	lr
